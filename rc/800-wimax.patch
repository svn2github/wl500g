diff -urNBp gateway/rc/common_ex.c gateway/rc.new/common_ex.c
--- gateway/rc/common_ex.c	2009-09-24 21:36:12.000000000 +0400
+++ gateway/rc.new/common_ex.c	2009-11-14 17:24:23.000000000 +0300
@@ -627,6 +627,7 @@ void update_wan_status(int isup)
 	else if (!strcmp(proto, "pptp")) nvram_set("wan_proto_t", "PPTP");
 	else if (!strcmp(proto, "l2tp")) nvram_set("wan_proto_t", "L2TP");
 	else if (!strcmp(proto, "bigpond")) nvram_set("wan_proto_t", "BigPond");
+	else if (!strcmp(proto, "madwimax")) nvram_set("wan_proto_t", "MadWimax");
 
 
 	if (!isup)
diff -urNBp gateway/rc/Makefile gateway/rc.new/Makefile
--- gateway/rc/Makefile	2009-09-24 20:55:29.000000000 +0400
+++ gateway/rc.new/Makefile	2009-11-14 17:24:44.000000000 +0300
@@ -24,7 +24,7 @@ LDFLAGS	+= -L$(TOP)/nvram -lnvram -L$(TO
 OBJS := rc.o init.o interface.o network.o services.o udhcpc.o ppp.o \
     stats.o crc.o mtd.o common_ex.o network_ex.o firewall_ex.o services_ex.o \
     manu_ex.o http_ex.o watchdog.o sendalarm.o udhcpc_ex.o \
-    bigpond.o qos.o rcamd.o waveserver.o
+    bigpond.o qos.o rcamd.o waveserver.o wimax.o
 
 ifeq ($(CONFIG_NETCONF),y)
 OBJS += firewall.o
@@ -77,6 +77,7 @@ install: all
 	cd $(INSTALLDIR)/sbin && ln -sf rc start_ddns
 	cd $(INSTALLDIR)/sbin && ln -sf rc start_ftpd
 	cd $(INSTALLDIR)/sbin && ln -sf rc wlan_update
+	cd $(INSTALLDIR)/sbin && ln -sf rc madwimax-check
 
 
 rc: $(OBJS)
diff -urNBp gateway/rc/network.c gateway/rc.new/network.c
--- gateway/rc/network.c	2009-09-18 02:12:58.000000000 +0400
+++ gateway/rc.new/network.c	2009-11-14 17:24:23.000000000 +0300
@@ -673,7 +673,7 @@ start_wan(void)
 			close(s);
 			continue;
 		}
-		if (!(ifr.ifr_flags & IFF_UP)) {
+		if (!(ifr.ifr_flags & IFF_UP) && !nvram_match(strcat_r(prefix, "proto", tmp),"madwimax")) {
 			/* Sync connection nvram address and i/f hardware address */
 			memset(ifr.ifr_hwaddr.sa_data, 0, ETHER_ADDR_LEN);
 
@@ -840,7 +840,9 @@ start_wan(void)
 		* renew and release.
 		*/
 		else if (strcmp(wan_proto, "dhcp") == 0 ||
-			 strcmp(wan_proto, "bigpond") == 0 ) {
+			 strcmp(wan_proto, "bigpond") == 0 ||
+			 strcmp(wan_proto, "madwimax") == 0 ) 
+		{
 			char *wan_hostname = nvram_get(strcat_r(prefix, "hostname", tmp));
 			char *dhcp_argv[] = { "udhcpc",
 					      "-i", wan_ifname,
@@ -1073,28 +1075,69 @@ stop_wan2(void)
 }
 
 static int 
-update_resolvconf(void)
+update_resolvconf(char *ifname, int metric, int up)
 {
 	FILE *fp;
+	char fname[30];
+	char tmp[100], prefix[] = "wanXXXXXXXXXX_";
 	char word[100], *next;
+	int i;
+
 
+	dprintf("%s %d %d\n",ifname,metric,up);
+
+	if (wan_prefix(ifname, prefix) < 0)
+		return 0;
+	dprintf("%s\n", prefix);
 	/* check if auto dns enabled */	
-	if (!nvram_match("wan_dnsenable_x", "1"))
+	if (!nvram_match(strcat_r(prefix, "dnsenable_x", tmp), "1"))
 		return 0;
-
+	i = 0;
+	foreach(word, ( nvram_get( strcat_r(prefix, "dns",tmp) ) ? : nvram_safe_get("wanx_dns") ), next) 
+	{
+		snprintf(tmp, sizeof(tmp), "dns%02d%1d",metric,i);
+		if (up)
+			nvram_set(tmp, word);
+		else
+			nvram_unset(tmp);
+		i++;
+	}
 	if (!(fp = fopen("/tmp/resolv.conf", "w+"))) {
-		perror("/tmp/resolv.conf");
+		perror(tmp);
 		return errno;
 	}
-	
-	foreach(word, (nvram_get("wan0_dns") ? : 
-		nvram_safe_get("wanx_dns")), next) 
+	for ( i=0; i<100; i++) 
 	{
-		fprintf(fp, "nameserver %s\n", word);
+		snprintf(tmp, sizeof(tmp), "dns%03d",i);
+		if ( next = nvram_get(tmp) )
+			fprintf(fp, "nameserver %s\n", next);
 	}
-	
 	fclose(fp);
 	
+/*
+	char *cat_argv[] = { "cat", "/tmp/resolv.conf.*", NULL	};
+	snprintf(fname,sizeof(fname), "/tmp/resolv.conf.%03d.%s", metric, ifname);
+
+	if (up) {
+		if (!(fp = fopen(fname, "w+"))) {
+			perror(tmp);
+			return errno;
+		}
+
+		foreach(word, ( nvram_get( strcat_r(prefix, "dns",tmp) ) ? : nvram_safe_get("wanx_dns") ), next) 
+		{
+			fprintf(fp, "nameserver %s\n", word);
+		}
+		
+		fclose(fp);
+	} else {
+		unlink(fname);
+	}
+
+	// concatenate files
+	_eval(cat_argv,">/tmp/resolv.conf",0,NULL);
+
+*/
 	/* Notify dnsmasq of change */
 	eval("killall", "-1", "dnsmasq");
 
@@ -1106,9 +1149,16 @@ wan_up(char *wan_ifname)
 {
 	char tmp[100], prefix[] = "wanXXXXXXXXXX_";
 	char *wan_proto, *gateway;
+	int metric;
+
+#ifdef DEBUG
+	int r;
+	r = wan_prefix(wan_ifname, prefix);
+	dprintf("wan_up: %s %s %d\n", wan_ifname, prefix, r);
+#endif
 
 	/* Figure out nvram variable name prefix for this i/f */
 	if (wan_prefix(wan_ifname, prefix) < 0) 
 	{
 		/* called for dhcp+ppp */
 		if (!nvram_match("wan0_ifname", wan_ifname))
@@ -1146,7 +1196,7 @@ wan_up(char *wan_ifname)
 		/* start multicast router */
 		start_igmpproxy(wan_ifname);
 		
-		update_resolvconf();
+		update_resolvconf(wan_ifname,2,1);
 		
 		return;
 	}
@@ -1154,6 +1204,7 @@ wan_up(char *wan_ifname)
 	wan_proto = nvram_safe_get(strcat_r(prefix, "proto", tmp));	
 
 	dprintf("%s %s\n", wan_ifname, wan_proto);
+	metric = atoi(nvram_safe_get(strcat_r(prefix, "priority", tmp)));
 
 	/* Set default route to gateway if specified */
 	if (nvram_match(strcat_r(prefix, "primary", tmp), "1")) 
@@ -1165,7 +1216,9 @@ wan_up(char *wan_ifname)
 				NULL, "255.255.255.255");
 		}
 		/* default route via default gateway */
-		route_add(wan_ifname, 0, "0.0.0.0", 
+		
+		dprintf("metric %s - %d\n",nvram_safe_get(strcat_r(prefix, "priority", tmp)),metric);
+		route_add(wan_ifname, metric, "0.0.0.0", 
 			nvram_safe_get(strcat_r(prefix, "gateway", tmp)), "0.0.0.0");
 		/* hack: avoid routing cycles, when both peer and server has the same IP */
 		if (strcmp(wan_proto, "pptp") == 0 || strcmp(wan_proto, "l2tp") == 0) {
@@ -1190,7 +1243,7 @@ wan_up(char *wan_ifname)
 		add_wanx_routes(prefix, wan_ifname, 0);
 
 	/* Add dns servers to resolv.conf */
-	update_resolvconf();
+	update_resolvconf(wan_ifname, metric, 1 );
 
 	/* Sync time */
 	//start_ntpc();
@@ -1228,6 +1281,7 @@ wan_down(char *wan_ifname)
 {
 	char tmp[100], prefix[] = "wanXXXXXXXXXX_";
 	char *wan_proto;
+	int metric;
 
 	/* Figure out nvram variable name prefix for this i/f */
 	if (wan_prefix(wan_ifname, prefix) < 0)
@@ -1238,8 +1292,9 @@ wan_down(char *wan_ifname)
 	dprintf("%s %s\n", wan_ifname, wan_proto);
 
 	/* Remove default route to gateway if specified */
+	metric = atoi(nvram_safe_get(strcat_r(prefix, "priority", tmp)));
 	if (nvram_match(strcat_r(prefix, "primary", tmp), "1"))
-		route_del(wan_ifname, 0, "0.0.0.0", 
+		route_del(wan_ifname, metric, "0.0.0.0", 
 			nvram_safe_get(strcat_r(prefix, "gateway", tmp)),
 			"0.0.0.0");
 
@@ -1249,7 +1304,7 @@ wan_down(char *wan_ifname)
 	/* Update resolv.conf -- leave as is if no dns servers left for demand to work */
 	if (*nvram_safe_get("wanx_dns"))
 		nvram_unset(strcat_r(prefix, "dns", tmp));
-	update_resolvconf();
+	update_resolvconf(wan_ifname, metric, 0);
 
 #ifdef ASUS_EXT
 	update_wan_status(0);
@@ -1479,6 +1534,7 @@ wan_ifunit(char *wan_ifname)
 			if (nvram_match(strcat_r(prefix, "ifname", tmp), wan_ifname) &&
 			    (nvram_match(strcat_r(prefix, "proto", tmp), "dhcp") ||
 			     nvram_match(strcat_r(prefix, "proto", tmp), "bigpond") ||
+			     nvram_match(strcat_r(prefix, "proto", tmp), "madwimax") ||
 			     nvram_match(strcat_r(prefix, "proto", tmp), "static")))
 				return unit;
 		}
diff -urNBp gateway/rc/rc.c gateway/rc.new/rc.c
--- gateway/rc/rc.c	2009-04-26 17:54:12.000000000 +0400
+++ gateway/rc.new/rc.c	2009-11-14 17:24:23.000000000 +0300
@@ -531,6 +531,7 @@ set_wan0_vars(void)
 	} else {
 		nvram_set("wan0_ifname", nvram_get("wan_ifname"));
 		nvram_set("wan0_ifnames", nvram_get("wan_ifnames"));
+		nvram_set("wan0_priority", nvram_safe_get("wan_priority"));
 	}
 }
 
@@ -831,7 +832,8 @@ main_loop(void)
 			//	goto retry;
 			//}
 			start_services();
-			start_wan();
+			if (!madwimax_start())
+				start_wan();
 			start_nas("wan");
 
 #ifdef ASUS_EXT
@@ -902,6 +904,12 @@ main(int argc, char **argv)
 		return ipup_main(argc, argv);
 	else if (strstr(base, "ip-down"))
 		return ipdown_main(argc, argv);
+	/* start of daemon */
+	else if (strstr(base, "madwimax-check"))
+		return madwimax_check();
+	/* madwimax [ if-create if-up if-down if-release ] */
+	else if (strstr(base, "madwimax"))
+		return madwimax_main(argc, argv);
 	/* udhcpc [ deconfig bound renew ] */
 	else if (strstr(base, "udhcpc"))
 		return udhcpc_main(argc, argv);
diff -urNBp gateway/rc/services_ex.c gateway/rc.new/services_ex.c
--- gateway/rc/services_ex.c	2009-05-23 21:50:18.000000000 +0400
+++ gateway/rc.new/services_ex.c	2009-11-14 17:24:23.000000000 +0300
@@ -575,14 +575,40 @@ start_ddns(void)
 	char service[32];
 	char usrstr[64];
 	char wan_ifname[16];
+	char realip[16];
 	int  wild=nvram_match("ddns_wildcard_x", "1");
 
 
 	if (nvram_match("router_disable", "1")) return -1;
-	
 	if (nvram_invmatch("ddns_enable_x", "1")) return -1;
-	
-	if ((wan_ip = nvram_safe_get("wan_ipaddr_t"))==NULL) return -1;
+
+	memset(realip, 0, sizeof(realip));
+
+	if (nvram_match("ddns_realip_x", "1"))
+	{
+		char *ddns_realip[] = {"wget", "-qO", "/tmp/ddns.realip", NULL, NULL};
+		char *realip_sites[] = { "http://ip.xten.net",
+				 "http://www.networksecuritytoolkit.org/nst/cgi-bin/ip.cgi",
+				 NULL };
+		int i;
+
+		for (i=0;realip_sites[i];i++)
+		{
+			ddns_realip[3] = realip_sites[i];
+			if (_eval(ddns_realip, NULL, 0, NULL)==0) break;
+		}
+
+		if ((fp=fopen("/tmp/ddns.realip", "r")))
+		{
+			fgets(realip, sizeof(realip), fp);
+			fclose(fp);
+		}
+ 		wan_ip = realip;
+	} else {
+		if ((wan_ip = nvram_safe_get("wan_ipaddr_t"))==NULL) return -1;
+	}
+
+	dprintf("real-%s-%s\n",realip, wan_ip);
 
 	if (nvram_match("ddns_ipaddr", wan_ip) ||
 	   (inet_addr(wan_ip)==inet_addr(nvram_safe_get("ddns_ipaddr"))))
@@ -671,11 +697,12 @@ start_ddns(void)
 		"-c", "/etc/ddns.conf",
 #else
 		"-S", service,
-	        "-i", wan_ifname,
- 		"-u", usrstr,
+  		"-u", usrstr,
 		"-h", host,
 		wild ? "-w" : NULL,
 #endif
+		realip[0] == '\0' ? "-i" : "-a",
+		realip[0] == '\0' ? wan_ifname : realip,
 		"-e", "/sbin/ddns_updated",
 		"-b", "/tmp/ddns.cache",
 		NULL};	
@@ -1842,11 +1875,26 @@ hotplug_usb(void)
 	int isweb;
 	char flag[6];
 
+#ifdef DEBUG
+	dprintf("%s-%s-%s\n",getenv("INTERFACE"),getenv("ACTION"),product=getenv("PRODUCT"));
+#endif
 	if( !(interface = getenv("INTERFACE")) || !(action = getenv("ACTION")))
 		return EINVAL;
 
 	if ((product=getenv("PRODUCT")))
 	{
+		/* wimax modem */
+		if (strncmp(interface, "255/", 4) == 0)
+		{
+			if (strncmp(product, "4e8/6761", 8) == 0)
+			{
+				if (strcmp(action, "add") == 0)
+					nvram_set("wimax_device", product);
+				else
+					nvram_unset("wimax_device");
+				return 0;
+			}
+		}
 		/* usb storage */
 		if (strncmp(interface, "8/", 2) == 0)
 		{
diff -urNBp gateway/rc/watchdog.c gateway/rc.new/watchdog.c
--- gateway/rc/watchdog.c	2009-11-10 20:48:16.000000000 +0300
+++ gateway/rc.new/watchdog.c	2009-11-14 17:24:23.000000000 +0300
@@ -565,6 +565,19 @@ int http_processcheck(void)
 	}
 	return 0;
 }
+// madwimax
+
+
+void 	madwimax_check(void);
+
+int madwimax_processcheck(void)
+{
+//	pid_t pid;
+//
+//	char *argv[] = {"/sbin/madwimax-check", NULL};
+//	_eval(argv, NULL, 0, &pid);
+	madwimax_check();
+}
 
 #ifdef USB_SUPPORT
 char usbinterrupt[128];
@@ -748,6 +761,9 @@ void watchdog(int signum)
 	/* http server check */
 	http_processcheck();
 
+	/* madwimax */
+	madwimax_processcheck();
+
 #ifdef USB_SUPPORT
 	/* web cam process */
 	if (nvram_invmatch("usb_web_device", ""))
diff -urNBp gateway/rc/wimax.c gateway/rc.new/wimax.c
--- gateway/rc/wimax.c	1970-01-01 03:00:00.000000000 +0300
+++ gateway/rc.new/wimax.c	2009-11-10 20:52:24.000000000 +0300
@@ -0,0 +1,229 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <signal.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include <bcmnvram.h>
+#include <netconf.h>
+#include <shutils.h>
+#include <rc.h>
+
+#include <nvparse.h>
+
+static char *pid_fname = "/var/run/madwimax.pid";
+static char *ev_fname = "/tmp/madwimax.events";
+
+#define WIMAX_UNIT 10
+
+int
+wimax_modem(void)
+{
+//	dprintf("%s\n", nvram_safe_get("wimax_device"));
+	if (!nvram_safe_get("wimax_device")) 
+		return 0;
+
+	return 1;
+}
+
+int
+madwimax_start(void)
+{
+	int ret;
+	char *wimax_ssid = nvram_get("wimax_ssid");
+
+	char *argv[] = {"/usr/sbin/madwimax", "-qof",
+		"-e", ev_fname,
+		"-p", pid_fname,
+		"-s", "/tmp/madwimax.log",
+		"--ssid", wimax_ssid && *wimax_ssid ? wimax_ssid : "@yota.ru",
+		NULL};
+	pid_t pid;
+
+	if (nvram_match("wimax_enable","1") && (wimax_modem()) )
+	{
+		eval("insmod", "tun");
+		ret = _eval(argv, NULL, 0, &pid);
+		symlink("/sbin/rc", ev_fname);
+	}
+
+	return ( nvram_match("wan_proto","madwimax") );
+}
+
+// called from watchdog using the "madwimax-check" symlink to rc.
+int
+madwimax_check(void)
+{
+	char tmp[100];
+	// check nvram wimax_enble
+	if (!nvram_match("wimax_enable","1")) {
+		return 0;
+	}
+	if (!wimax_modem()) {
+		return 0;
+	}
+
+	// check the madwimax process
+	pid_t pid = 0;
+
+        FILE *fp = fopen(pid_fname, "r");
+        char buf[256];
+        if (fp && fgets(buf, sizeof(buf), fp)) {
+                pid = strtoul(buf, NULL, 0);
+                fclose(fp);
+        }
+/*
+	if (pid > 0) {			// TODO check the process state
+
+	}
+	return 1;
+*/
+	// if no madwimax, then STOP THE UDHCPC
+	if (pid == 0) {
+		int unit = atoi(nvram_get("wimax_unit"));
+		if (unit) {
+		 	// kill the udhcpc
+			kill_pidfile_s((sprintf(tmp, "/var/run/udhcpc%d.pid", unit), tmp), SIGUSR2);
+			kill_pidfile((sprintf(tmp, "/var/run/udhcpc%d.pid", unit), tmp));
+		}
+		madwimax_start();
+
+	}
+
+
+}
+
+//============== madwimax events
+
+// if-create
+int
+madwimax_create(char *ifname)
+{
+	char tmp[100];
+	char prefix[] = "wanXXXXXXXXXX_";
+
+	if (nvram_match("wan_proto","madwimax"))		// wimax - the main wan interface
+	{
+		nvram_set("wan_ifname",ifname);
+		nvram_set("wan0_ifname",ifname);
+		nvram_set("wan0_priority",nvram_safe_get("wimax_priority"));
+		nvram_set("wan0_proto","madwimax");
+		nvram_set("wan_ifnames",ifname);
+//		nvram_set("wimax_prefix", "wan0_");
+
+	}
+	else
+	{
+		snprintf(prefix, sizeof(prefix), "wan%d_", WIMAX_UNIT );// ???????? update_wan_status // MAX_NVPARSE-1
+		nvram_set(strcat_r(prefix, "ifname", tmp), ifname);
+		nvram_set(strcat_r(prefix, "proto", tmp), "madwimax");
+		nvram_set(strcat_r(prefix, "primary", tmp), "1");
+		nvram_set(strcat_r(prefix, "priority", tmp), nvram_safe_get("wimax_priority"));
+		nvram_set(strcat_r(prefix, "dnsenable_x", tmp), "1");	//nvram_safe_get("wimax_priority"));
+
+		snprintf(tmp, sizeof(tmp), "%d", WIMAX_UNIT);
+		nvram_set("wimax_unit", tmp);
+	}
+	return 1;
+}
+
+//if-release
+int
+madwimax_release(char *ifname)
+{
+	char tmp[100];
+	char prefix[] = "wanXXXXXXXXXX_";
+	int unit;
+
+	if (unit = wan_ifunit(ifname)) {
+		snprintf(prefix, sizeof(prefix), "wan%d_", unit );
+
+		unlink(ev_fname);
+
+		if (nvram_match("wan_proto","madwimax")) {
+			stop_wan();
+			nvram_set("wan_ifname","");
+			nvram_set("wan0_ifname","");
+			nvram_set("wan_ifnames","");
+		} else {
+			nvram_unset(strcat_r(prefix, "ifname", tmp));
+			nvram_unset(strcat_r(prefix, "proto", tmp));
+			nvram_unset(strcat_r(prefix, "primary", tmp));
+		}
+	}
+	return 1;
+}
+
+//if-up
+int
+madwimax_up(char *ifname)
+{
+	char tmp[100];
+	pid_t pid;
+	char prefix[] = "wanXXXXXXXXXX_";
+	int unit = WIMAX_UNIT;
+
+	if (nvram_match("wan_proto","madwimax"))		// wimax - the main wan interface
+	{
+		start_wan();
+	}
+	else
+	{
+		unit = atoi(nvram_safe_get("wimax_unit"));
+
+		dprintf("unit %d\n",unit);
+		unit = WIMAX_UNIT;
+		snprintf(prefix, sizeof(prefix), "wan%d_", unit );
+		nvram_set(strcat_r(prefix, "proto", tmp), "madwimax");
+
+		char *dhcp_argv[] = { "udhcpc",
+				      "-i", ifname,
+				      "-p", (sprintf(tmp, "/var/run/udhcpc%d.pid", unit), tmp),
+				      "-s", "/tmp/udhcpc",
+				      NULL
+		};
+		/* Start dhcp daemon */
+		_eval(dhcp_argv, NULL, 0, &pid);
+		// wan_up - called from udhcpc (bound)
+	}
+	return 1;
+}
+
+//if-down
+int
+madwimax_down(char *ifname)
+{
+	char tmp[100];
+	int unit;
+	char prefix[] = "wanXXXXXXXXXX_";
+
+	if (unit = wan_ifunit(ifname)) {
+	 	// kill the udhcpc
+		kill_pidfile_s((sprintf(tmp, "/var/run/udhcpc%d.pid", unit), tmp), SIGUSR2);
+		kill_pidfile((sprintf(tmp, "/var/run/udhcpc%d.pid", unit), tmp));
+		return 1;
+	}
+}
+
+
+
+int
+madwimax_main(int argc, char **argv)
+{
+
+	dprintf("%s %s %s\n", argv[0], argv[1], argv[2]);
+
+	if (argc != 3)
+		return(0);
+
+	if (strstr(argv[1], "if-create"))
+		return madwimax_create(argv[2]);
+	else if (strstr(argv[1], "if-up"))
+		return madwimax_up(argv[2]);
+	else if (strstr(argv[1], "if-down"))
+		return madwimax_down(argv[2]);
+	else if (strstr(argv[1], "if-release"))
+		return madwimax_release(argv[2]);
+	else return 0;
+}
