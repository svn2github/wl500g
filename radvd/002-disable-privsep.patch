diff --git radvd/config.h.in radvd.new/config.h.in
--- radvd/config.h.in
+++ radvd.new/config.h.in
@@ -109,3 +109,6 @@
 
 /* Define to empty if `const' does not conform to ANSI C. */
 #undef const
+
+/* Define to use priviledge separation */
+#undef USE_PRIVSEP
diff --git radvd/configure.in radvd.new/configure.in
--- radvd/configure.in
+++ radvd.new/configure.in
@@ -175,7 +175,12 @@
 dnl Checks for library functions.
 AC_CHECK_FUNCS(getopt_long)
 
-CONDITIONAL_SOURCES="device-${arch}.${OBJEXT} privsep-${arch}.${OBJEXT} ${CONDITIONAL_SOURCES}"
+AC_ARG_ENABLE(privsep,,
+    [AC_DEFINE([USE_PRIVSEP],1)
+	 CONDITIONAL_SOURCES="privsep-${arch}.${OBJEXT} ${CONDITIONAL_SOURCES}"]
+)
+
+CONDITIONAL_SOURCES="device-${arch}.${OBJEXT} ${CONDITIONAL_SOURCES}"
 AC_SUBST(CONDITIONAL_SOURCES)
 
 AC_SUBST(VERSION)
diff --git radvd/configure radvd.new/configure
--- radvd/configure
+++ radvd.new/configure
@@ -722,6 +714,7 @@ with_logfile
 with_pidfile
 with_configfile
 with_facility
+enable_privsep
 '
       ac_precious_vars='build_alias
 host_alias
@@ -5010,7 +4996,13 @@ fi
 done
 
 
-CONDITIONAL_SOURCES="device-${arch}.${OBJEXT} privsep-${arch}.${OBJEXT} ${CONDITIONAL_SOURCES}"
+# Check whether --enable-privsep was given.
+if test "${enable_privsep+set}" = set; then :
+  enableval=$enable_privsep; $as_echo "#define USE_PRIVSEP 1" >>confdefs.h
+     CONDITIONAL_SOURCES="privsep-${arch}.${OBJEXT} ${CONDITIONAL_SOURCES}"
+fi
+
+CONDITIONAL_SOURCES="device-${arch}.${OBJEXT} ${CONDITIONAL_SOURCES}"
 
 
 
diff -urBp radvd/radvd.c radvd.new/radvd.c
--- radvd/radvd.c	2010-07-05 19:39:30.000000000 +0400
+++ radvd.new/radvd.c	2010-07-05 21:07:12.000000000 +0400
@@ -37,7 +37,9 @@ struct option prog_opt[] = {
 	{"chrootdir", 1, 0, 't'},
 	{"version", 0, 0, 'v'},
 	{"help", 0, 0, 'h'},
+#ifdef USE_PRIVSEP
 	{"singleprocess", 0, 0, 's'},
+#endif
 	{NULL, 0, 0, 0}
 };
 #endif
@@ -77,7 +79,9 @@ main(int argc, char *argv[])
 	char *username = NULL;
 	char *chrootdir = NULL;
 	int configtest = 0;
+#ifdef USE_PRIVSEP
 	int singleprocess = 0;
+#endif
 #ifdef HAVE_GETOPT_LONG
 	int opt_idx;
 #endif
@@ -151,9 +155,11 @@ main(int argc, char *argv[])
 		case 'v':
 			version();
 			break;
+#ifdef USE_PRIVSEP
 		case 's':
 			singleprocess = 1;
 			break;
+#endif
 		case 'h':
 			usage();
 #ifdef HAVE_GETOPT_LONG
@@ -219,6 +225,7 @@ main(int argc, char *argv[])
 	if (readin_config(conf_file) < 0)
 		exit(1);
 
+#ifdef USE_PRIVSEP
 	/* drop root privileges if requested. */
 	if (username) {
 		if (!singleprocess) {
@@ -230,6 +237,7 @@ main(int argc, char *argv[])
 		if (drop_root_privileges(username) < 0)
 			exit(1);
 	}
+#endif
 
 	if ((fd = open(pidfile, O_RDONLY, 0)) > 0)
 	{
diff -urBp radvd/radvd.h radvd.new/radvd.h
--- radvd/radvd.h	2009-09-07 11:59:57.000000000 +0400
+++ radvd.new/radvd.h	2010-07-05 21:16:35.000000000 +0400
@@ -235,6 +235,7 @@ int check_rdnss_presence(struct AdvRDNSS
 ssize_t readn(int fd, void *buf, size_t count);
 ssize_t writen(int fd, const void *buf, size_t count);
 
+#ifdef USE_PRIVSEP
 /* privsep.c */
 int privsep_init(void);
 int privsep_enabled(void);
@@ -242,6 +243,13 @@ int privsep_interface_linkmtu(const char
 int privsep_interface_curhlim(const char *iface, uint32_t hlim);
 int privsep_interface_reachtime(const char *iface, uint32_t rtime);
 int privsep_interface_retranstimer(const char *iface, uint32_t rettimer);
+#else
+static inline int privsep_enabled(void)	{ return 0; }
+static inline int privsep_interface_linkmtu(const char *iface, uint32_t mtu)		{ return 0; }
+static inline int privsep_interface_curhlim(const char *iface, uint32_t hlim)		{ return 0; }
+static inline int privsep_interface_reachtime(const char *iface, uint32_t rtime)	{ return 0; }
+static inline int privsep_interface_retranstimer(const char *iface, uint32_t rettimer)	{ return 0; }
+#endif
 
 /*
  * compat hacks in case libc and kernel get out of sync:
