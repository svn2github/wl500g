Patch from Tomato project:

9818e503609252f5a6c67bd65217dfad551d032c Samba: minor fix for processing requested access flags.
2e5000c1259e3fcf2245f17ebe5a8150853aa888 Samba: fix for processing requested access flags.

---

 source/smbd/nttrans.c |  137 +++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 126 insertions(+), 11 deletions(-)

diff --git a/source/smbd/nttrans.c b/source/smbd/nttrans.c
--- a/source/smbd/nttrans.c	2008-02-25 10:09:34.000000000 +0300
+++ b/source/smbd/nttrans.c	2009-04-03 16:32:54.000000000 -0400
@@ -47,6 +47,80 @@ static char *known_nt_pipes[] = {
   NULL
 };
 
+/* Combinations of standard masks. */
+#define STANDARD_RIGHTS_ALL_ACCESS (DELETE_ACCESS|READ_CONTROL_ACCESS|WRITE_DAC_ACCESS|WRITE_OWNER_ACCESS|SYNCHRONIZE_ACCESS) /* 0x001f0000 */
+#define STANDARD_RIGHTS_EXECUTE_ACCESS (READ_CONTROL_ACCESS) /* 0x00020000 */
+#define STANDARD_RIGHTS_READ_ACCESS (READ_CONTROL_ACCESS) /* 0x00200000 */
+#define STANDARD_RIGHTS_REQUIRED_ACCESS (DELETE_ACCESS|READ_CONTROL_ACCESS|WRITE_DAC_ACCESS|WRITE_OWNER_ACCESS) /* 0x000f0000 */
+#define STANDARD_RIGHTS_WRITE_ACCESS (READ_CONTROL_ACCESS) /* 0x00020000 */
+
+/* Mapping of generic access rights for files to specific rights. */
+
+#define FILE_GENERIC_ALL (STANDARD_RIGHTS_REQUIRED_ACCESS| SYNCHRONIZE_ACCESS|FILE_ALL_ATTRIBUTES)
+
+#define FILE_GENERIC_READ (STANDARD_RIGHTS_READ_ACCESS|FILE_READ_DATA|FILE_READ_ATTRIBUTES|\
+							FILE_READ_EA|SYNCHRONIZE_ACCESS)
+
+#define FILE_GENERIC_WRITE (STANDARD_RIGHTS_WRITE_ACCESS|FILE_WRITE_DATA|FILE_WRITE_ATTRIBUTES|\
+							FILE_WRITE_EA|FILE_APPEND_DATA|SYNCHRONIZE_ACCESS)
+
+#define FILE_GENERIC_EXECUTE (STANDARD_RIGHTS_EXECUTE_ACCESS|FILE_READ_ATTRIBUTES|\
+								FILE_EXECUTE|SYNCHRONIZE_ACCESS)
+
+/* A type to describe the mapping of generic access rights to object
+   specific access rights. */
+
+typedef struct generic_mapping {
+	uint32 generic_read;
+	uint32 generic_write;
+	uint32 generic_execute;
+	uint32 generic_all;
+} GENERIC_MAPPING;
+
+/* Map generic permissions to file object specific permissions */
+ 
+struct generic_mapping file_generic_mapping = {
+    FILE_GENERIC_READ,
+    FILE_GENERIC_WRITE,
+    FILE_GENERIC_EXECUTE,
+    FILE_GENERIC_ALL
+};
+
+/* Map generic access rights to object specific rights.  This technique is
+   used to give meaning to assigning read, write, execute and all access to
+   objects.  Each type of object has its own mapping of generic to object
+   specific access rights. */
+
+void se_map_generic(uint32 *access_mask, struct generic_mapping *mapping)
+{
+	uint32 old_mask = *access_mask;
+
+	if (*access_mask & GENERIC_READ_ACCESS) {
+		*access_mask &= ~GENERIC_READ_ACCESS;
+		*access_mask |= mapping->generic_read;
+	}
+
+	if (*access_mask & GENERIC_WRITE_ACCESS) {
+		*access_mask &= ~GENERIC_WRITE_ACCESS;
+		*access_mask |= mapping->generic_write;
+	}
+
+	if (*access_mask & GENERIC_EXECUTE_ACCESS) {
+		*access_mask &= ~GENERIC_EXECUTE_ACCESS;
+		*access_mask |= mapping->generic_execute;
+	}
+
+	if (*access_mask & GENERIC_ALL_ACCESS) {
+		*access_mask &= ~GENERIC_ALL_ACCESS;
+		*access_mask |= mapping->generic_all;
+	}
+
+	if (old_mask != *access_mask) {
+		DEBUG(10, ("se_map_generic(): mapped mask 0x%08x to 0x%08x\n",
+			   old_mask, *access_mask));
+	}
+}
+
 /****************************************************************************
  Send the required number of replies back.
  We assume all fields other than the data fields are
@@ -392,13 +466,29 @@ static int map_create_disposition( uint3
  Utility function to map share modes.
 ****************************************************************************/
 
-static int map_share_mode( BOOL *pstat_open_only, char *fname,
+static int map_share_mode( BOOL *pstat_open_only, char *fname, uint32 create_options,
 							uint32 desired_access, uint32 share_access, uint32 file_attributes)
 {
   int smb_open_mode = -1;
 
+  DEBUG(6, ("map_share_mode(%s, create_options=0x%x, "
+    "desired_access=0x%x, share_access=0x%x, "
+    "file_attributes=0x%x\n",
+    fname, create_options, desired_access,
+    share_access, file_attributes));
+
+  /*
+   * Convert GENERIC bits to specific bits.
+   */
+
+  se_map_generic(&desired_access, &file_generic_mapping);
+
   *pstat_open_only = False;
 
+  /* this is just so the next switch works sane */
+  if (desired_access & FILE_EXECUTE)
+    desired_access |= FILE_READ_DATA;
+
   switch( desired_access & (FILE_READ_DATA|FILE_WRITE_DATA|FILE_APPEND_DATA) ) {
   case FILE_READ_DATA:
     smb_open_mode = DOS_OPEN_RDONLY;
@@ -436,11 +526,17 @@ static int map_share_mode( BOOL *pstat_o
     if(desired_access & (DELETE_ACCESS|WRITE_DAC_ACCESS|WRITE_OWNER_ACCESS|SYNCHRONIZE_ACCESS|
                               FILE_EXECUTE|FILE_READ_ATTRIBUTES|
                               FILE_READ_EA|FILE_WRITE_EA|SYSTEM_SECURITY_ACCESS|
-                              FILE_WRITE_ATTRIBUTES|READ_CONTROL_ACCESS))
+                              FILE_WRITE_ATTRIBUTES|READ_CONTROL_ACCESS)) {
       smb_open_mode = DOS_OPEN_RDONLY;
-    else {
-      DEBUG(0,("map_share_mode: Incorrect value %lx for desired_access to file %s\n",
-             (unsigned long)desired_access, fname));
+    } else if (desired_access == 0) {
+      /*
+       * JRA - NT seems to sometimes send desired_access as zero. play it safe
+       * and map to a stat open.
+       */
+      smb_open_mode = DOS_OPEN_RDONLY;
+    } else {
+      DEBUG(0,("map_share_mode: Incorrect value 0x%lx for desired_access to file %s\n",
+        (unsigned long)desired_access, fname));
       return -1;
     }
   }
@@ -451,8 +547,27 @@ static int map_share_mode( BOOL *pstat_o
    * JRA.
    */
 
-  if(share_access & FILE_SHARE_DELETE)
+  if(share_access & FILE_SHARE_DELETE) {
     smb_open_mode |= ALLOW_SHARE_DELETE;
+    DEBUG(10,("map_share_mode: FILE_SHARE_DELETE requested. open_mode = 0x%x\n", smb_open_mode));
+  }
+
+  /*
+   * We need to store the intent to open for Delete. This
+   * is what determines if a delete on close flag can be set.
+   * This is the wrong way (and place) to store this, but for 2.x this
+   * is the only practical way. JRA.
+   */
+
+  if(desired_access & DELETE_ACCESS) {
+    DEBUG(10,("map_share_mode: DELETE_ACCESS requested. open_mode = 0x%x\n", smb_open_mode));
+  }
+
+  if (create_options & FILE_DELETE_ON_CLOSE) {
+    /* Implicit delete access is *NOT* requested... */
+    smb_open_mode |= DELETE_ON_CLOSE_FLAG;
+    DEBUG(10,("map_share_mode: FILE_DELETE_ON_CLOSE requested. open_mode = 0x%x\n", smb_open_mode));
+  }
 
   /* Add in the requested share mode. */
   switch( share_access & (FILE_SHARE_READ|FILE_SHARE_WRITE)) {
@@ -477,8 +592,8 @@ static int map_share_mode( BOOL *pstat_o
   if(file_attributes & FILE_FLAG_WRITE_THROUGH)
     smb_open_mode |= FILE_SYNC_OPENMODE;
 
-  DEBUG(10,("map_share_mode: Mapped desired access %lx, share access %lx, file attributes %lx \
-to open_mode %x\n", (unsigned long)desired_access, (unsigned long)share_access,
+  DEBUG(10,("map_share_mode: Mapped desired access 0x%lx, share access 0x%lx, file attributes 0x%lx \
+to open_mode 0x%x\n", (unsigned long)desired_access, (unsigned long)share_access,
                     (unsigned long)file_attributes, smb_open_mode ));
  
   return smb_open_mode;
@@ -723,10 +838,10 @@ int reply_ntcreate_and_X(connection_stru
 
 	/*
 	 * Now contruct the smb_open_mode value from the filename, 
-     * desired access and the share access.
+	 * desired access and the share access.
 	 */
 	
-	if((smb_open_mode = map_share_mode(&stat_open_only, fname, desired_access, 
+	if((smb_open_mode = map_share_mode(&stat_open_only, fname, create_options, desired_access, 
 					   share_access, 
 					   file_attributes)) == -1)
 		return(ERROR(ERRDOS,ERRbadaccess));
@@ -1103,7 +1218,7 @@ static int call_nt_transact_create(conne
      * and the share access.
      */
 
-    if((smb_open_mode = map_share_mode( &stat_open_only, fname, desired_access,
+    if((smb_open_mode = map_share_mode( &stat_open_only, fname, create_options, desired_access,
                                         share_access, file_attributes)) == -1)
       return(ERROR(ERRDOS,ERRbadaccess));
 
-- 
1.6.5.GIT
