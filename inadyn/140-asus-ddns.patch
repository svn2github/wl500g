--- inadyn.orig/include/dyndns.h	2010-07-15 00:15:30.000000000 +0600
+++ inadyn/include/dyndns.h	2012-06-23 23:35:09.213446318 +0600
@@ -48,6 +48,8 @@ typedef enum
     DNSOMATIC_DEFAULT,
     HE_IPV6TB,
     HE_DYNDNS,
+    ASUS_REGISTER,
+    ASUS_UPDATE,
     LAST_DNS_SYSTEM = -1
 } DYNDNS_SYSTEM_ID;
 
@@ -75,6 +77,10 @@ typedef enum
 #define DYNDNS_3322_MY_DNS_SERVER	"members.3322.org"
 #define DYNDNS_3322_MY_DNS_SERVER_URL "/dyndns/update?"
 
+#define ASUS_MY_DNS_SERVER		"ns1.asuscomm.com"
+#define ASUS_MY_DNS_REGISTER_URL	"/ddns/register.jsp?"
+#define ASUS_MY_DNS_UPDATE_URL		"/ddns/update.jsp?"
+
 /*REQ/RSP definitions*/
 
 #define DYNDNS_IP_SERVER_RESPONSE_BEGIN "Current IP Address: "
@@ -176,6 +182,15 @@ typedef enum
 	"Host: %s\r\n" \
 	"User-Agent: "DYNDNS_AGENT_NAME " " DYNDNS_EMAIL_ADDR"\r\n\r\n"
 
+#define ASUS_PROCESS_MY_IP_REQUEST_FORMAT \
+    "GET %s" \
+	"hostname=%s&" \
+	"myip=%s " \
+	 "HTTP/1.0\r\n" \
+	"Authorization: Basic %s\r\n" \
+	"Host: %s\r\n" \
+	"User-Agent: "DYNDNS_AGENT_NAME " " DYNDNS_EMAIL_ADDR"\r\n\r\n"
+
 #define DYNDNS_OK_RESPONSE	"good"
 #define DYNDNS_OK_NOCHANGE	"nochg"
 
--- inadyn.orig/include/md5.h	2010-07-11 16:09:26.000000000 +0600
+++ inadyn/include/md5.h	2012-06-23 23:50:59.881445396 +0600
@@ -136,4 +136,8 @@ extern int md5_stream PARAMS ((FILE *str
 extern void *md5_buffer PARAMS ((const char *buffer, size_t len,
 				 void *resblock));
 
+extern void *hmac_md5_buffer PARAMS ((const void *buffer, size_t len,
+				      const void *key, size_t key_len,
+				      void *resblock));
+
 #endif
--- inadyn.orig/src/dyndns.c	2010-07-15 00:15:52.000000000 +0600
+++ inadyn/src/dyndns.c	2012-06-23 23:51:50.657447812 +0600
@@ -60,6 +60,7 @@ static int get_req_for_zoneedit_http_dns
 static int get_req_for_easydns_http_dns_server(DYN_DNS_CLIENT *p_self, int infcnt, int alcnt, DYNDNS_SYSTEM *p_sys_info);
 static int get_req_for_tzo_http_dns_server(DYN_DNS_CLIENT *p_self, int infcnt, int alcnt, DYNDNS_SYSTEM *p_sys_info);
 static int get_req_for_he_ipv6tb_server(DYN_DNS_CLIENT *p_self, int infcnt, int alcnt, DYNDNS_SYSTEM *p_sys_info);
+static int get_req_for_asus_server(DYN_DNS_CLIENT *p_self, int infcnt, int alcnt, DYNDNS_SYSTEM *p_sys_info);
 
 static BOOL is_dyndns_server_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infcnt, char* p_ok_string);
 static BOOL is_freedns_server_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infcnt, char* p_ok_string);
@@ -68,6 +69,8 @@ static BOOL is_zoneedit_server_rsp_ok( D
 static BOOL is_easydns_server_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infcnt, char* p_ok_string);
 static BOOL is_tzo_server_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infcnt, char* p_ok_string);
 static BOOL is_he_ipv6_server_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infcnt, char* p_ok_string);
+static BOOL is_asus_server_register_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infcnt, char* p_ok_string);
+static BOOL is_asus_server_update_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infcnt, char* p_ok_string);
 
 DYNDNS_SYSTEM_INFO dns_system_table[] = 
 { 
@@ -158,6 +161,19 @@ DYNDNS_SYSTEM_INFO dns_system_table[] =
 	    DYNDNS_MY_IP_SERVER, DYNDNS_MY_IP_SERVER_URL,
 			"dyn.dns.he.net", "/nic/update?hostname=", NULL}},
 
+    {ASUS_REGISTER,
+	{"register@asus.com", NULL,
+	    (DNS_SYSTEM_SRV_RESPONSE_OK_FUNC)is_asus_server_register_rsp_ok,
+	    (DNS_SYSTEM_REQUEST_FUNC) get_req_for_asus_server,
+	    DYNDNS_MY_IP_SERVER, DYNDNS_MY_IP_SERVER_URL,
+			ASUS_MY_DNS_SERVER, ASUS_MY_DNS_REGISTER_URL, ASUS_MY_DNS_REGISTER_URL}},
+    {ASUS_UPDATE,
+	{"update@asus.com", NULL,
+	    (DNS_SYSTEM_SRV_RESPONSE_OK_FUNC)is_asus_server_update_rsp_ok,
+	    (DNS_SYSTEM_REQUEST_FUNC) get_req_for_asus_server,
+	    DYNDNS_MY_IP_SERVER, DYNDNS_MY_IP_SERVER_URL,
+			ASUS_MY_DNS_SERVER, ASUS_MY_DNS_UPDATE_URL, ASUS_MY_DNS_UPDATE_URL}},
+
     {CUSTOM_HTTP_BASIC_AUTH, 
         {"custom@http_svr_basic_auth", NULL,  
             (DNS_SYSTEM_SRV_RESPONSE_OK_FUNC)is_generic_server_rsp_ok, 
@@ -314,6 +330,52 @@ static int get_req_for_he_ipv6tb_server(
 	    p_self->info[infcnt].dyndns_server_name.name);
 }
 
+static int get_req_for_asus_server(DYN_DNS_CLIENT *p_self, int infcnt, int alcnt, DYNDNS_SYSTEM *p_sys_info)
+{
+	unsigned char digest[MD5_DIGEST_BYTES];
+	char auth[6*2+1+MD5_DIGEST_BYTES*2+1];
+	char *p_tmp, *p_auth = auth;
+	int i, size;
+
+	(void)p_sys_info;
+
+	/* prepare username */
+	p_tmp = p_self->info[infcnt].credentials.my_username;
+	for (i = 0; i < 6*2; i++) {
+		while (*p_tmp && !isxdigit(*p_tmp)) p_tmp++;
+		*p_auth++ = *p_tmp ? toupper(*p_tmp++) : '0';
+	}
+
+	/* split username and password */
+	*p_auth++ = ':';
+
+	/* prepare password, reuse p_req_buffer */
+	sprintf(p_self->p_req_buffer, "%s%s",
+		p_self->info[infcnt].alias_info[alcnt].names.name,
+		p_self->info[infcnt].my_ip_address.name);
+	hmac_md5_buffer(p_self->p_req_buffer, strlen(p_self->p_req_buffer),
+			p_self->info[infcnt].credentials.my_password,
+			strlen(p_self->info[infcnt].credentials.my_password), digest);
+	for (i = 0; i < MD5_DIGEST_BYTES; i++)
+		p_auth += sprintf(p_auth, "%02X", digest[i]);
+
+	/*encode*/
+	if (p_self->info[infcnt].credentials.p_enc_usr_passwd_buffer != NULL)
+		free(p_self->info[infcnt].credentials.p_enc_usr_passwd_buffer);
+	p_self->info[infcnt].credentials.p_enc_usr_passwd_buffer = b64encode(auth);
+	p_self->info[infcnt].credentials.encoded =
+		(p_self->info[infcnt].credentials.p_enc_usr_passwd_buffer != NULL);
+	p_self->info[infcnt].credentials.size =
+		strlen(p_self->info[infcnt].credentials.p_enc_usr_passwd_buffer);
+
+	return sprintf(p_self->p_req_buffer, ASUS_PROCESS_MY_IP_REQUEST_FORMAT,
+	    p_self->info[infcnt].dyndns_server_url,
+	    p_self->info[infcnt].alias_info[alcnt].names.name,
+	    p_self->info[infcnt].my_ip_address.name,
+	    p_self->info[infcnt].credentials.p_enc_usr_passwd_buffer,
+	    p_self->info[infcnt].dyndns_server_name.name);
+}
+
 static int get_req_for_ip_server(DYN_DNS_CLIENT *p_self, int infcnt, void *p_specific_data)
 {
     return sprintf(p_self->p_req_buffer, DYNDNS_GET_MY_IP_HTTP_REQUEST,
@@ -546,6 +608,72 @@ static BOOL is_he_ipv6_server_rsp_ok( DY
 		(strstr(p_rsp, "already") != NULL));
 }
 
+static BOOL is_asus_server_register_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infnr, char* p_ok_string)
+{
+	int ret;
+	char *p, domain[256] = "";
+	(void) p_ok_string;
+
+	if (sscanf(p_rsp, "HTTP/1.%*c %3d", &ret) != 1)
+		return FALSE;
+
+	if ((p = strchr(p_rsp, '|')) && (p = strchr(++p, '|')))
+		sscanf(p, "|%255[^|\r\n]", domain);
+
+	switch (ret) {
+	case 200:		/* registration success */
+	case 220:		/* registration same domain success*/
+		return TRUE;
+	case 203:		/* registration failed */
+		DBG_PRINTF((LOG_WARNING,"W: Registration failed, suggested domain '%s'\n", domain));
+		return FALSE;
+	case 230:		/* registration new domain success */
+		DBG_PRINTF((LOG_WARNING,"W: Registration success, previous domain '%s'\n", domain));
+		return TRUE;
+	case 233:		/* registration failed */
+		DBG_PRINTF((LOG_WARNING,"W: Registration failed, previous domain '%s'\n", domain));
+		return FALSE;
+	case 297:		/* invalid hostname */
+	case 298:		/* invalid domain name */
+	case 299:		/* invalid ip format */
+	case 401:		/* authentication failure */
+	case 407:		/* proxy authentication required */
+		return FALSE;
+	}
+
+	if (ret >= 500)		/* shutdown */
+		return FALSE;
+
+	return FALSE;		/* unknown error */
+}
+
+static BOOL is_asus_server_update_rsp_ok( DYN_DNS_CLIENT *p_self, char*p_rsp, int infnr, char* p_ok_string)
+{
+	int ret;
+	(void) p_ok_string;
+	static int z = 0;
+
+	if (sscanf(p_rsp, "HTTP/1.%*c %3d", &ret) != 1)
+		return FALSE;
+
+	switch (ret) {
+	case 200:		/* update success */
+	case 220:		/* update same domain success*/
+		return TRUE;
+	case 297:		/* invalid hostname */
+	case 298:		/* invalid domain name */
+	case 299:		/* invalid ip format */
+	case 401:		/* authentication failure */
+	case 407:		/* proxy authentication required */
+		return FALSE;
+	}
+
+	if (ret >= 500)		/* shutdown */
+		return FALSE;
+
+	return FALSE;		/* unknown error */
+}
+
 static RC_TYPE do_update_alias_table(DYN_DNS_CLIENT *p_self)
 {
 	int i, j;
--- inadyn.orig/src/md5.c	2010-07-11 16:09:26.000000000 +0600
+++ inadyn/src/md5.c	2012-06-23 23:55:05.257445727 +0600
@@ -389,3 +389,42 @@ md5_process_block (const void *buffer, s
   ctx->C = C;
   ctx->D = D;
 }
+
+void *
+hmac_md5_buffer (const void *buffer, size_t len, const void *key, size_t key_len, void *resblock)
+{
+	struct md5_ctx ctx;
+	unsigned char k_ipad[65];
+	unsigned char k_opad[65];
+	unsigned char tk[16];
+	int i;
+
+	/* if key is longer than 64 bytes reset it to key=MD5(key) */
+	if (key_len > 64) {
+		md5_buffer(key, key_len, tk);
+		key = tk;
+		key_len = 16;
+	}
+	/* start out by storing key in pads */
+	memset(k_ipad, 0, sizeof(k_ipad));
+	memset(k_opad, 0, sizeof(k_opad));
+	memcpy(k_ipad, key, key_len);
+	memcpy(k_opad, key, key_len);
+	/*xor key with ipad and opad values */
+	for (i = 0; i < 64; i++) {
+		k_ipad[i] ^= 0x36;
+		k_opad[i] ^= 0x5c;
+	}
+	/* inner MD5 */
+	md5_init_ctx (&ctx);
+	md5_process_bytes(k_ipad, 64, &ctx);
+	md5_process_bytes(buffer, len, &ctx);
+	md5_finish_ctx (&ctx, resblock);
+	/* outter MD5 */
+	md5_init_ctx (&ctx);
+	md5_process_bytes(k_opad, 64, &ctx);
+	md5_process_bytes(resblock, 16, &ctx);
+	md5_finish_ctx (&ctx, resblock);
+
+	return resblock;
+}
