#
# Broadcom Linux Router Makefile
# 
# Copyright 2004, Broadcom Corporation
# All Rights Reserved.
# 
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id$
#

include .config

RELEASE=1.9.2.7-d


MODEL=WL500gp
# WL500gx, WL550gE, WL500gp, WL500gpv2, WL500W

#
# asus trx trailer
#

KERNEL_VER=1.9
FS_VER=2.7
HWL1=0.02
HWH1=2.99

#
# Paths
#

# Source bases
export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))

#
# Cross-compile environment variables
#

# Build platform
export BUILD := i386-pc-linux-gnu
export HOSTCC := gcc
export HOSTCXX := g++

# uClibc wrapper
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif

ifeq ($(PLATFORM),mipsel)
export CROSS_COMPILE := mipsel-linux-
export CONFIGURE := ./configure --host=mipsel-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../mipsel-linux && pwd -P)
endif

ifeq ($(PLATFORM),mipsel-uclibc)
export CROSS_COMPILE := mipsel-uclibc-
export CONFIGURE := ./configure --host=mipsel-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
endif

ifeq ($(CONFIG_BCMWPA2),y)
EXTRACFLAGS += -DBCMWPA2 
endif

ifeq ($(CONFIG_IPV6),y)
export CONFIG_IPV6 := y
else
CONFIG_IPV6 :=
endif

export CC := $(CROSS_COMPILE)gcc
export AR := $(CROSS_COMPILE)ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)nm
export RANLIB := $(CROSS_COMPILE)ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

# Determine kernel version
LINUX_KERNEL=$(subst ",,$(word 3, $(shell grep "UTS_RELEASE" $(LINUXDIR)/include/linux/version.h)))
export MODULESDIR := $(TARGETDIR)/lib/modules/$(LINUX_KERNEL)
SRCMODULESDIR := $(PLATFORMDIR)/modules/lib/modules/*/kernel

# always build libbcmcrypto, required by nas
obj-y += libbcmcrypto 

# always build libusb, if required by usb_modeswitch
ifeq ($(CONFIG_USBMODESWITCH),y)
export CONFIG_LIBUSB := y
obj-$(CONFIG_LIBUSB) += libusb
endif

# always build libusb, if required by madwimax
ifeq ($(CONFIG_MADWIMAX),y)
export CONFIG_LIBUSB := y
endif

ifeq ($(CONFIG_LIBUSB),y)
obj-$(CONFIG_LIBUSB) += libusb10
endif

#
# Configuration
#

obj-$(CONFIG_HTTPD) += httpd
obj-$(CONFIG_RC) += rc
obj-$(CONFIG_LIBBCM) += libbcm
obj-$(CONFIG_SHARED) += shared
obj-$(CONFIG_WWW) += www
obj-$(CONFIG_GLIBC) += lib
obj-$(CONFIG_UCLIBC) += lib
obj-$(CONFIG_WLCONF) += wlconf
obj-$(CONFIG_BRIDGE) += bridge
obj-$(CONFIG_BUSYBOX) += busybox
obj-$(CONFIG_DNSMASQ) += dnsmasq
obj-$(CONFIG_IPTABLES) += iptables
obj-$(CONFIG_LIBIPT) += iptables
obj-$(CONFIG_NETCONF) += netconf
obj-$(CONFIG_NTP) += ntpclient
obj-$(CONFIG_NVRAM) += nvram
obj-$(CONFIG_PPP) += ppp
obj-$(CONFIG_UDHCPD) += udhcpd
obj-$(CONFIG_UPNP) += upnp
obj-$(CONFIG_UTILS) += utils
obj-$(CONFIG_ETC) += etc
obj-$(CONFIG_VLAN) += vlan

# Added by Joey for ASUS application
obj-$(CONFIG_PPTP) += pptp
obj-$(CONFIG_PPTP) += accel-pptp
obj-$(CONFIG_PPPOERELAY) += rp-pppoe
obj-$(CONFIG_INFOSVR) += infosvr
obj-$(CONFIG_EZIPUPDATE) += ez-ipupdate
obj-$(CONFIG_JPEG6B) += jpeg-6b
obj-$(CONFIG_RCAMD) += rcamdmips
obj-$(CONFIG_SENDMAIL) += sendmail
obj-$(CONFIG_LPRNG) += LPRng
obj-$(CONFIG_OTHERS) += others
obj-$(CONFIG_TEST) += test
obj-$(CONFIG_BPALOGIN) += bpalogin
obj-$(CONFIG_WAVESERVER) += waveserver

# custom firmware
obj-$(CONFIG_SSHD) += dropbear
obj-$(CONFIG_JETDIRECT) += p910nd
obj-$(CONFIG_SAMBA) += samba
obj-$(CONFIG_NFSD) += nfs-utils
obj-$(CONFIG_NFSD) += portmap
obj-$(CONFIG_IPROUTE2) += iproute2
obj-$(CONFIG_LOADER) += loader
obj-$(CONFIG_IPV6) += radvd
obj-$(CONFIG_SNMP) += ucdsnmp
obj-$(CONFIG_L2TP) += rp-l2tp
#obj-$(CONFIG_L2TP) += xl2tpd
obj-$(CONFIG_IGMPPROXY) += igmpproxy
obj-$(CONFIG_STUPIDFTPD) += vsftpd
obj-$(CONFIG_SCSIIDLE) += scsi-idle
obj-$(CONFIG_USBMODESWITCH) += usb_modeswitch
obj-$(CONFIG_MADWIMAX) += madwimax
obj-y += udpxy

obj-y += kernel

# Netfilter modules NOT to include in main FW
netfilter_external_modules := ipt_layer7.o ip_set.o \
 ip_set_ipmap.o ip_set_iptree.o ip_set_iptreemap.o ip_set_macipmap.o \
 ip_set_nethash.o ip_set_iphash.o \
 ip_set_portmap.o ip_set_ipporthash.o ip_set_ipportiphash.o \
 ip_set_ipportnethash.o ip_set_setlist.o ipt_SET.o ipt_set.o

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)

# defaults
export LANGUAGE := "EN"
export GLOBAL_OPTIONS := -DUSB_SUPPORT -DQOS -DWPA2_WMM -DPRNINFO -DNO_PARALLEL -DUSBONLY

LZMADIR=$(SRCBASE)/lzma/SRC/7zip/Compress

SVNREVISION:=$(shell cat $(TOP)/.svnrev 2>/dev/null)
ifneq (0,$(words $(SVNREVISION)))
  RELEASE:=$(RELEASE)-r$(firstword $(SVNREVISION))
endif

define SwitchConfParam
	@( ORIG_STR=`grep "$(2)" $(1) 2>/dev/null`; \
	if [ "$(3)" = "n" ]; then \
	    TEST_PATTERN="# $(2) is not set"; \
	else \
	    TEST_PATTERN="$(2)=$(3)"; \
	fi; \
	IS_SAME_VALUE=`echo $${ORIG_STR} | grep "$${TEST_PATTERN}" 2>/dev/null`; \
	if [ "$${IS_SAME_VALUE}" = "" ]; then \
	    sed "s/$${ORIG_STR}/$${TEST_PATTERN}/" $(1) >$(1).sed; \
	    mv $(1).sed $(1); \
	fi )
endef

#
# Basic rules
#

all: $(obj-y) 

clean: $(obj-clean) config-clean
	rm -rf $(TARGETDIR)
	rm -f $(PLATFORMDIR)/linux.trx $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs
	rm -f full usb20 lite
	$(MAKE) -C $(LINUXDIR) clean

distclean mrproper: clean
	rm -f .config $(LINUXDIR)/.config

lzma-lib:
	$(MAKE) -C $(LZMADIR)/LZMA_Lib/

lzma:
	$(MAKE) -C $(LZMADIR)/LZMA_Alone/

kernel-modules: $(LINUXDIR)/.config
	( . $(LINUXDIR)/.config ; \
	if [ "$${CONFIG_MODULES}" = "y" ] ; then \
	    $(MAKE) -C $(LINUXDIR) modules CC=$(CROSS_COMPILE)gcc-3.4.6; \
	fi )

kernel-image: $(LINUXDIR)/.config
	( . $(LINUXDIR)/.config ; \
	if [ "$${CONFIG_EMBEDDED_RAMDISK}" = "" ] ; then \
	    $(MAKE) -C $(LINUXDIR) zImage CC=$(CROSS_COMPILE)gcc-3.4.6; \
	fi )

$(LINUXDIR)/fs/fuse/Makefile:
	cd $(LINUXDIR)/fs/fuse && \
	$(CONFIGURE) --enable-kernel-module --with-kernel=$(LINUXDIR) CC=$(CROSS_COMPILE)gcc-3.4.6

fuse-driver: $(LINUXDIR)/.config $(LINUXDIR)/fs/fuse/Makefile
	cd $(LINUXDIR)/fs/fuse && $(MAKE)

kernel: kernel-image kernel-modules fuse-driver
	@true

kernel-clean:
	$(MAKE) -C $(LINUXDIR) clean
	
kernel-install: lzma
ifeq ($(CONFIG_LOADER),y)
	cat $(LINUXDIR)/arch/mips/bcm947xx/compressed/piggy | \
		$(LZMADIR)/LZMA_Alone/lzma e -si -so -lc1 -lp2 -pb2 > $(PLATFORMDIR)/vmlinuz
else
	cp $(LINUXDIR)/arch/mips/bcm947xx/compressed/vmlinuz $(PLATFORMDIR)/
endif
	( . $(LINUXDIR)/.config ; \
	if [ "$${CONFIG_MODULES}" = "y" ] ; then \
	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(PLATFORMDIR)/modules ; \
	    cd $(LINUXDIR)/fs/fuse && $(MAKE) install DEPMOD=/bin/true INSTALL_MOD_PATH=$(PLATFORMDIR)/modules; \
	    $(TOP)/busybox/examples/depmod.pl -b $(PLATFORMDIR)/modules/lib/modules/* -F $(LINUXDIR)/System.map; \
	fi )
	rm -f $(PLATFORMDIR)/modules/lib/modules/*/build

modules_install-WL500g modules_install-WL500b: modules_install
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o

modules_install-WL500bv2: modules_install
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o
	rm -f $(MODULESDIR)/wl.o
	install -t $(MODULESDIR)/ rt2460/rt2400.o 

modules_install-WL3%: modules_install
	rm -rf $(MODULESDIR)/parport

modules_install-WL500gx modules_install-WL500gp modules_install-WL500W: modules_install
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/usb-uhci.o \
		$(SRCMODULESDIR)/drivers/usb/host/ehci-hcd.o 
	rm -rf $(MODULESDIR)/parport

modules_install-WL700g: modules_install
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/usb-uhci.o \
		$(SRCMODULESDIR)/drivers/usb/host/ehci-hcd.o \
		$(SRCMODULESDIR)/drivers/char/gpiortc.o \
		$(SRCMODULESDIR)/drivers/ide/ide-mod.o \
		$(SRCMODULESDIR)/drivers/ide/ide-disk.o \
		$(SRCMODULESDIR)/drivers/ide/ide-probe-mod.o
	rm -rf $(MODULESDIR)/parport

modules_install-WLHDD: modules_install
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o \
		$(SRCMODULESDIR)/drivers/char/gpiortc.o \
		$(SRCMODULESDIR)/drivers/ide/ide-mod.o \
		$(SRCMODULESDIR)/drivers/ide/ide-disk.o \
		$(SRCMODULESDIR)/drivers/ide/ide-probe-mod.o
	rm -rf $(MODULESDIR)/parport

modules_install-WL550gE modules_install-WL520gu modules_install-WL500gpv2: modules_install
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o \
		$(SRCMODULESDIR)/drivers/usb/host/ehci-hcd.o 
	rm -rf $(MODULESDIR)/parport

NETFILTER_MODS_LIST:=$(filter-out $(patsubst %.o,\%/%.o,$(netfilter_external_modules)),$(shell ls -1 $(SRCMODULESDIR)/net/ipv4/netfilter/*.o 2>/dev/null))

modules_install: .config
	install -d $(MODULESDIR)
	# network stuff
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/net/et/et.o \
		$(SRCMODULESDIR)/drivers/net/wl/wl.o \
		$(SRCMODULESDIR)/drivers/net/tun.o \
		$(SRCMODULESDIR)/drivers/net/imq.o \
		$(NETFILTER_MODS_LIST)
	# generic usb
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/usbcore.o \
		$(SRCMODULESDIR)/drivers/usb/printer.o
	# usb storage
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/storage/usb-storage.o \
		$(SRCMODULESDIR)/drivers/scsi/sd_mod.o \
		$(SRCMODULESDIR)/drivers/scsi/scsi_mod.o
	# usb serial
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/serial/usbserial.o \
		$(SRCMODULESDIR)/drivers/usb/serial/pl2303.o \
		$(SRCMODULESDIR)/drivers/usb/serial/ftdi_sio.o \
		$(SRCMODULESDIR)/drivers/usb/serial/option.o
	# usb webcams
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/media/video/videodev.o \
		$(SRCMODULESDIR)/drivers/usb/ov51x.o \
		$(SRCMODULESDIR)/drivers/usb/ov511_decomp.o \
		$(SRCMODULESDIR)/drivers/usb/ov518_decomp.o \
		$(SRCMODULESDIR)/drivers/usb/pwc.o \
		$(SRCMODULESDIR)/drivers/usb/pwcx.o
	# usb audio
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/audio.o \
		$(SRCMODULESDIR)/drivers/sound/soundcore.o
ifeq ($(CONFIG_NFSD),y)
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/fs/lockd/*.o \
		$(SRCMODULESDIR)/fs/nfsd/*.o	\
		$(SRCMODULESDIR)/net/sunrpc/*.o
endif
ifeq ($(CONFIG_NFS),y)
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/fs/nfs/*.o
endif

install: package-$(MODEL)
	@true

package-%: $(filter-out lib-install www-install,$(obj-install)) $(LINUXDIR)/.config lzma-lib
	$(MAKE) www-pages-$*
        # Install binaries into target directory
	rm -rf $(TARGETDIR) && install -d $(TARGETDIR)
	echo $(RELEASE) > $(TARGETDIR)/.version
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) $(INSTALLDIR)/www ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	# Optimize crypto library
	$(MAKE) -C libbcmcrypto optimize
        # Install (and possibly optimize) C library
	$(MAKE) lib-install
	# statically linked ASUS shit
ifeq ($(CONFIG_WAVESERVER),y)
	$(STRIP) others/waveserver -o $(TARGETDIR)/usr/sbin/waveserver
endif
	# Install binary Addons, if any
	@-( if [ -d $(SRCBASE)/router/Addon ]; then \
            ( cp -dup $(SRCBASE)/router/Addon/* $(TARGETDIR)/usr/sbin/ ) \
        fi )
        # Install modules into filesystem
	$(MAKE) modules_install-$*
        # Prepare filesystem
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
        # Make sure mksquashfs-2.0 is used
	$(MAKE) -C $(LINUXDIR)/scripts/squashfs mksquashfs-lzma \
		LZMAPATH=$(LZMADIR)/LZMA_Lib CC=$(HOSTCC) CXX=$(HOSTCXX)
	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(TARGETDIR) $(PLATFORMDIR)/target.cramfs -all-root -noappend -nopad
	rm -f $(PLATFORMDIR)/$*-$(RELEASE).trx
	$(MAKE) -C $(SRCBASE)/asustrx CC=$(HOSTCC)
ifeq ($(CONFIG_LOADER),y)
	$(SRCBASE)/asustrx/asustrx -p $* -v $(KERNEL_VER).$(FS_VER) -o $(PLATFORMDIR)/$*-$(RELEASE).trx \
		loader/loader.gz $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs
else
	$(SRCBASE)/asustrx/asustrx -p $* -v $(KERNEL_VER).$(FS_VER) -o $(PLATFORMDIR)/$*-$(RELEASE).trx \
		$(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs
endif
	@echo
	@echo "Finished building $* firmware version $(KERNEL_VER).$(FS_VER) ($(RELEASE))"
	@echo

manpages-install:
	@mkdir -p $(PLATFORMDIR)/manpages/man/man8 \
	    $(PLATFORMDIR)/manpages/man/man1 $(PLATFORMDIR)/manpages/man/man5
	install --mode=0644 -t $(PLATFORMDIR)/manpages/man/man8 \
	    LPRng/man/lpd.8 bridge/doc/brctl.8 dnsmasq/man/dnsmasq.8 \
	    dropbear/dropbear.8 dropbear/dropbearkey.8 igmpproxy/doc/igmpproxy.8 \
	    iptables/iptables.8 iptables/iptables-restore.8 iptables/iptables-save.8 \
	    p910nd/p910nd.8 ppp/chat/chat.8 ppp/pppd/pppd.8 pptp/pptp.8 \
	    sendmail/mini_sendmail.8 vsftpd/vsftpd.8 \
	    samba/docs/manpages/smbpasswd.8 samba/docs/manpages/nmbd.8 samba/docs/manpages/smbd.8 
	install --mode=0644 -t $(PLATFORMDIR)/manpages/man/man1 \
	    busybox/docs/BusyBox.1 dropbear/dbclient.1 ntpclient/ntpclient.1 \
	    ucdsnmp/man/snmpd.1 
	install --mode=0644 -t $(PLATFORMDIR)/manpages/man/man5 \
	    igmpproxy/doc/igmpproxy.conf.5 vsftpd/vsftpd.conf.5 samba/docs/manpages/smb.conf.5 \
	    ucdsnmp/man/snmpd.conf.5
ifeq ($(CONFIG_IPV6),y)
	make -C radvd install-man DESTDIR=$(PLATFORMDIR)/manpages
	install --mode=0644 -t $(PLATFORMDIR)/manpages/man/man8 \
	    iptables/ip6tables.8 iptables/ip6tables-restore.8 iptables/ip6tables-save.8 
endif

modules: kernel-install
	tar -C $(PLATFORMDIR)/$@ -czf $(PLATFORMDIR)/$@-$(RELEASE).tgz .

manpages: manpages-install
	tar -C $(PLATFORMDIR)/$@ -czf $(PLATFORMDIR)/$@-$(RELEASE).tgz .

#
# Configuration rules
#

conf mconf:
	$(MAKE) -C config
	@./config/$@ ./config/Config
        # Also configure kernel
	$(MAKE) k$@

oldconf: .config
	$(MAKE) -C config
	@./config/conf -o ./config/Config
        # Also configure kernel
	$(MAKE) k$@

kconf:
	$(MAKE) -C $(LINUXDIR) config

kmconf:
	$(MAKE) -C $(LINUXDIR) menuconfig

koldconf: $(LINUXDIR)/.config
	$(MAKE) -C $(LINUXDIR) oldconfig

$(LINUXDIR)/include/linux/version.h: $(LINUXDIR)/.config
	$(MAKE) -C $(LINUXDIR) include/linux/version.h

# Convenience
config: conf

menuconfig: mconf

oldconfig: oldconf

# Default configurations
.config:
	cp config/defconfig $@
	$(MAKE) oldconfig

$(LINUXDIR)/.config: .config
	cp $(LINUXDIR)/arch/mips/defconfig-bcm947xx $@
	$(call SwitchConfParam,$@,CONFIG_IPV6,$(if $(CONFIG_IPV6),y,n))

#
# Overrides
#

httpd: netconf shared nvram $(EXTRA_LIBS)

rc: netconf shared nvram $(EXTRA_LIBS)

www www-%:
	$(MAKE) -C www/$(CONFIG_VENDOR) $* INSTALLDIR=$(INSTALLDIR)/www

wwwmt wwwmt-%:
	$(MAKE) -C www/mea $* INSTALLDIR=$(INSTALLDIR)/www

radvd/Makefile: radvd/Makefile.in
	cd radvd && CPPFLAGS="$(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=""

radvd: radvd/Makefile

radvd-install:
	install -D radvd/radvd $(INSTALLDIR)/radvd/usr/sbin/radvd
	$(STRIP) $(INSTALLDIR)/radvd/usr/sbin/radvd

bridge:
	$(MAKE) -C $@ brctl/brctl EXTRACFLAGS="$(EXTRACFLAGS)"

bridge-install: bridge
	install -D bridge/brctl/brctl $(INSTALLDIR)/bridge/usr/sbin/brctl
	$(STRIP) $(INSTALLDIR)/bridge/usr/sbin/brctl

ez-ipupdate/Makefile: ez-ipupdate/Makefile.in ez-ipupdate/config.h.in ez-ipupdate/configure.in
	cd ez-ipupdate && ac_cv_prog_CC=$(CC) CPP=$(CC) CPPFLAGS="$(EXTRACFLAGS)" \
	$(CONFIGURE)

ez-ipupdate: ez-ipupdate/Makefile

ez-ipupdate-install:
	install -D ez-ipupdate/ez-ipupdate $(INSTALLDIR)/ez-ipupdate/usr/sbin/ez-ipupdate
	$(STRIP) $(INSTALLDIR)/ez-ipupdate/usr/sbin/ez-ipupdate

busybox/.config: .config
	cd busybox && cp -fp sysdeps/linux/$(CONFIG_BUSYBOX_CONFIG) .config
	$(call SwitchConfParam,$@,CONFIG_FEATURE_IPV6,$(if $(CONFIG_IPV6),y,n))
	$(MAKE) -C busybox oldconfig

busybox: busybox/.config
	$(MAKE) -C $@ all STRIP=$(STRIP) EXTRA_CFLAGS="$(EXTRACFLAGS)"

busybox-install: busybox
	$(MAKE) -C busybox install STRIP=$(STRIP) CONFIG_PREFIX=$(INSTALLDIR)/busybox EXTRA_CFLAGS="$(EXTRACFLAGS)"

dproxy-install: dproxy
	install -D dproxy/dproxy $(INSTALLDIR)/dproxy/usr/sbin/dproxy
	$(STRIP) $(INSTALLDIR)/dproxy/usr/sbin/dproxy

iptables: $(LINUXDIR)/include/linux/version.h
	$(MAKE) -C $@ BINDIR=/usr/sbin LIBDIR=/usr/lib KERNEL_DIR=$(LINUXDIR) COPT_FLAGS="-O2 $(EXTRACFLAGS)" DO_MULTI=1

iptables-install: iptables
ifeq ($(CONFIG_IPTABLES),y)
	install -d $(INSTALLDIR)/iptables/usr/lib/iptables
	install iptables/extensions/libipt_*.so $(INSTALLDIR)/iptables/usr/lib/iptables
	install -D iptables/iptables $(INSTALLDIR)/iptables/usr/sbin/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables
	ln -sf iptables $(INSTALLDIR)/iptables/usr/sbin/iptables-restore
	ln -sf iptables $(INSTALLDIR)/iptables/usr/sbin/iptables-save
ifeq ($(CONFIG_IPV6),y)
	install iptables/extensions/libip6t_*.so $(INSTALLDIR)/iptables/usr/lib/iptables
	install iptables/ip6tables $(INSTALLDIR)/iptables/usr/sbin/ip6tables
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/ip6tables
	ln -sf ip6tables $(INSTALLDIR)/iptables/usr/sbin/ip6tables-restore
	ln -sf ip6tables $(INSTALLDIR)/iptables/usr/sbin/ip6tables-save
endif
	$(STRIP) $(INSTALLDIR)/iptables/usr/lib/iptables/libip*.so
else
        # So that generic rule does not take precedence
	@true
endif

iptables-clean:
	-$(MAKE) -C iptables KERNEL_DIR=$(LINUXDIR) clean


netconf: iptables

ntpclient-install: ntpclient
	install -D ntpclient/ntpclient $(INSTALLDIR)/ntpclient/usr/sbin/ntpclient
	$(STRIP) $(INSTALLDIR)/ntpclient/usr/sbin/ntpclient

udhcpd-install: udhcpd
	install -D udhcpd/udhcpd $(INSTALLDIR)/udhcpd/usr/sbin/udhcpd
	$(STRIP) $(INSTALLDIR)/udhcpd/usr/sbin/udhcpd
	cd $(INSTALLDIR)/udhcpd/usr/sbin && ln -sf udhcpd udhcpc

upnp: netconf nvram shared

wlconf: nvram shared

vlan:
	$(MAKE) -C vlan CROSS=$(CROSS_COMPILE) STRIPTOOL=$(STRIP)

vlan-install:
	$(MAKE) -C vlan CROSS=$(CROSS_COMPILE) STRIPTOOL=$(STRIP) INSTALLDIR=$(INSTALLDIR) install

pptp-install: pptp
	install -D pptp/pptp $(INSTALLDIR)/pptp/usr/sbin/pptp
	$(STRIP) $(INSTALLDIR)/pptp/usr/sbin/pptp

ppp/Makefile: ppp/linux/Makefile.top
	cd ppp && $(CONFIGURE) --prefix=/usr --sysconfdir=/tmp

ppp: ppp/Makefile

ppp-install: ppp
	install -D ppp/pppd/pppd $(INSTALLDIR)/ppp/usr/sbin/pppd
	$(STRIP) $(INSTALLDIR)/ppp/usr/sbin/pppd
	install -D ppp/chat/chat $(INSTALLDIR)/ppp/usr/sbin/chat
	$(STRIP) $(INSTALLDIR)/ppp/usr/sbin/chat
	install -D ppp/pppd/plugins/pppol2tp/pppol2tp.so $(INSTALLDIR)/ppp/usr/lib/pppd/pppol2tp.so
	$(STRIP) $(INSTALLDIR)/ppp/usr/lib/pppd/*.so

rp-pppoe/src/Makefile: rp-pppoe/src/Makefile.in
	cd rp-pppoe/src && CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	    $(CONFIGURE) --prefix=/usr --enable-plugin=$(TOP)/ppp \
	     ac_cv_linux_kernel_pppoe=yes rpppoe_cv_pack_bitfields=rev

rp-pppoe: ppp rp-pppoe/src/Makefile
	$(MAKE) -C rp-pppoe/src pppoe-relay rp-pppoe.so

rp-pppoe-clean:
	$(MAKE) -C rp-pppoe/src clean

rp-pppoe-install: rp-pppoe
	install -D rp-pppoe/src/pppoe-relay $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay
	$(STRIP) $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay
	install -D rp-pppoe/src/rp-pppoe.so $(INSTALLDIR)/rp-pppoe/usr/lib/pppd/rp-pppoe.so
	$(STRIP) $(INSTALLDIR)/rp-pppoe/usr/lib/pppd/rp-pppoe.so

accel-pptp: ppp accel-pptp/pppd_plugin/Makefile
	$(MAKE) -C accel-pptp/pppd_plugin

accel-pptp/pppd_plugin/Makefile: accel-pptp/pppd_plugin/Makefile.in $(LINUXDIR)/include/linux/version.h
	cd accel-pptp/pppd_plugin && CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	    $(CONFIGURE) --prefix=/usr KDIR=$(LINUXDIR) PPPDIR=$(TOP)/ppp

accel-pptp-clean:
	$(MAKE) -C accel-pptp/pppd_plugin clean

accel-pptp-install: accel-pptp
	install -D accel-pptp/pppd_plugin/src/.libs/pptp.so $(INSTALLDIR)/accel-pptp/usr/lib/pppd/pptp.so
	$(STRIP) $(INSTALLDIR)/accel-pptp/usr/lib/pppd/pptp.so

dnsmasq:
	$(MAKE) -C $@ CFLAGS="-Os $(EXTRACFLAGS)"
	
dnsmasq-install:
	install -D dnsmasq/src/dnsmasq $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq
	$(STRIP) $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq

dropbear/config.h: dropbear/config.h.in
	cd dropbear && CPPFLAGS="$(EXTRACFLAGS)" \
	    $(CONFIGURE) --disable-zlib --disable-shadow \
	    --disable-lastlog --disable-utmp --disable-utmpx --disable-wtmp --disable-wtmpx \
	    --disable-libutil --disable-loginfunc --disable-pututline --disable-pututxline

dropbear: dropbear/config.h
	$(MAKE) -C $@ PROGRAMS="dropbear dbclient scp dropbearkey dropbearconvert" MULTI=1 SCPPROGRESS=1

dropbear-install:
	install -D dropbear/dropbearmulti $(INSTALLDIR)/dropbear/usr/sbin/dropbear
	$(STRIP) $(INSTALLDIR)/dropbear/usr/sbin/dropbear
	ln -sf dropbear $(INSTALLDIR)/dropbear/usr/sbin/dropbearkey
	ln -sf dropbear $(INSTALLDIR)/dropbear/usr/sbin/dropbearconvert
	install -d $(INSTALLDIR)/dropbear/usr/bin
	ln -sf ../sbin/dropbear $(INSTALLDIR)/dropbear/usr/bin/ssh
	ln -sf ../sbin/dropbear $(INSTALLDIR)/dropbear/usr/bin/scp

p910nd:
	$(MAKE) -C $@ p910nd CROSS=$(CROSS_COMPILE) CFLAGS="-DLOCKFILE_DIR=\\\"/var/lock\\\" -O2 $(EXTRACFLAGS)"

p910nd-install:
	install -D p910nd/p910nd $(INSTALLDIR)/p910nd/usr/sbin/p910nd
	$(STRIP) $(INSTALLDIR)/p910nd/usr/sbin/p910nd

samba/source/Makefile: samba/source/Makefile.in
	cd samba/source && \
	    CPPFLAGS="-D_GNU_SOURCE -DNDEBUG -DSHMEM_SIZE=524288 -Dfcntl=fcntl64" CFLAGS="-Os $(EXTRACFLAGS)" \
	    ac_cv_sizeof_int=4 ac_cv_sizeof_long=4 ac_cv_sizeof_short=2 \
	    samba_cv_FTRUNCATE_NEEDS_ROOT=no samba_cv_HAVE_BROKEN_FCNTL64_LOCKS=no \
	    samba_cv_HAVE_BROKEN_GETGROUPS=no samba_cv_HAVE_BROKEN_READDIR=no \
	    samba_cv_HAVE_FCNTL_LOCK=yes samba_cv_HAVE_FNMATCH=yes \
	    samba_cv_HAVE_FTRUNCATE_EXTEND=no samba_cv_HAVE_IFACE_AIX=no \
	    samba_cv_HAVE_IFACE_IFCONF=yes samba_cv_HAVE_IFACE_IFREQ=yes \
	    samba_cv_HAVE_INO64_T=yes samba_cv_HAVE_IRIX_SPECIFIC_CAPABILITIES=no \
	    samba_cv_HAVE_OFF64_T=yes samba_cv_HAVE_ROOT=yes \
	    samba_cv_HAVE_SECURE_MKSTEMP=yes samba_cv_HAVE_SHARED_MMAP=yes \
	    samba_cv_HAVE_STRUCT_FLOCK64=yes samba_cv_HAVE_SYSV_IPC=no \
	    samba_cv_HAVE_TRUNCATED_SALT=no samba_cv_HAVE_UNION_SEMUN=no \
	    samba_cv_HAVE_UNSIGNED_CHAR=yes samba_cv_NEED_SGI_SEMUN_HACK=no \
	    samba_cv_REPLACE_INET_NTOA=no samba_cv_SIZEOF_INO_T=4 \
	    samba_cv_SIZEOF_OFF_T=4 samba_cv_SYSCONF_SC_NGROUPS_MAX=yes \
	    samba_cv_USE_SETRESUID=no samba_cv_USE_SETREUID=yes \
	    samba_cv_USE_SETEUID=yes samba_cv_USE_SETUIDX=no \
	    samba_cv_have_longlong=yes samba_cv_have_setresgid=no \
	    samba_cv_have_setresuid=no samba_cv_HAVE_GETTIMEOFDAY_TZ=yes \
	 $(CONFIGURE) --prefix=/usr --localstatedir=/var/log --libdir=/etc \
	    --with-privatedir=/etc --with-lockdir=/var/lock --with-syslog

samba: samba/source/Makefile
	$(MAKE) -C samba/source shared

samba-install:
	install -D samba/source/bin/smbd.shared $(INSTALLDIR)/samba/usr/sbin/smbd
	install -D samba/source/bin/nmbd.shared $(INSTALLDIR)/samba/usr/sbin/nmbd
	install -D samba/source/bin/smbpasswd.shared $(INSTALLDIR)/samba/usr/bin/smbpasswd
	install -D samba/source/bin/libsmb.so $(INSTALLDIR)/samba/usr/lib/libsmb.so
	install -d $(INSTALLDIR)/samba/usr/codepages/
	install -D samba/source/codepages/codepage.* $(INSTALLDIR)/samba/usr/codepages
	install -D samba/source/codepages/unicode_map.* $(INSTALLDIR)/samba/usr/codepages
	$(STRIP) $(INSTALLDIR)/samba/usr/sbin/smbd
	$(STRIP) $(INSTALLDIR)/samba/usr/sbin/nmbd
	$(STRIP) $(INSTALLDIR)/samba/usr/bin/smbpasswd
	$(STRIP) $(INSTALLDIR)/samba/usr/lib/libsmb.so
	
samba-clean:
	$(MAKE) -C samba/source clean

nfs-utils/config.mk: nfs-utils/config.mk.in
	cd nfs-utils && $(CONFIGURE) --enable-nfsv3 --disable-nfsv4 \
	    --disable-gss --disable-rquotad

nfs-utils: nfs-utils/config.mk
	$(MAKE) -C $@ CCOPTS="$(EXTRACFLAGS)"

nfs-utils-install:
	install -D nfs-utils/utils/nfsd/nfsd $(INSTALLDIR)/nfs-utils/usr/sbin/nfsd
	install -D nfs-utils/utils/mountd/mountd $(INSTALLDIR)/nfs-utils/usr/sbin/mountd
	install -D nfs-utils/utils/lockd/lockd $(INSTALLDIR)/nfs-utils/usr/sbin/lockd
	install -D nfs-utils/utils/exportfs/exportfs $(INSTALLDIR)/nfs-utils/usr/sbin/exportfs
	install -D nfs-utils/utils/showmount/showmount $(INSTALLDIR)/nfs-utils/usr/sbin/showmount
	install -D nfs-utils/utils/statd/statd $(INSTALLDIR)/nfs-utils/usr/sbin/statd
	install -D nfs-utils/support/lib/libnfs.so $(INSTALLDIR)/nfs-utils/usr/lib/libnfs.so
	$(STRIP) $(INSTALLDIR)/nfs-utils/usr/sbin/* $(INSTALLDIR)/nfs-utils/usr/lib/libnfs.so

portmap-install:
	install -D portmap/portmap $(INSTALLDIR)/portmap/usr/sbin/portmap
	$(STRIP) $(INSTALLDIR)/portmap/usr/sbin/portmap

iproute2: .config
	$(MAKE) -C $@ KERNEL_INCLUDE=$(LINUXDIR)/include EXTRACFLAGS="$(EXTRACFLAGS)"

iproute2-install:
	install -D iproute2/ip/ip $(INSTALLDIR)/iproute2/usr/sbin/ip
	install -D iproute2/tc/tc $(INSTALLDIR)/iproute2/usr/sbin/tc
	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/ip
	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/tc

ucdsnmp/Makefile: ucdsnmp/Makefile.in
	cd ucdsnmp && \
	    ac_cv_CAN_USE_SYSCTL=no ac_cv_struct_ifnet_has_if_obytes=yes \
	    ac_cv_struct_ifnet_has_if_ibytes=yes ac_cv_struct_ifnet_has_if_ibytes=yes \
	 $(CONFIGURE) --with-cflags="-g -O2 $(EXTRACFLAGS)" \
	    --disable-debugging --without-opaque-special-types \
	    --with-out-mib-modules="v2party" --with-sys-location=Unknown --with-sys-contact=Administrator \
	    --with-logfile=/var/log/snmpd.log

ucdsnmp: ucdsnmp/Makefile

ucdsnmp-install:
	install -D ucdsnmp/agent/snmpd $(INSTALLDIR)/ucdsnmp/usr/sbin/snmpd
	$(STRIP) $(INSTALLDIR)/ucdsnmp/usr/sbin/snmpd

rp-l2tp/Makefile: rp-l2tp/Makefile.in
	cd rp-l2tp && CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr

rp-l2tp: ppp rp-l2tp/Makefile

rp-l2tp-install:
	install -D rp-l2tp/l2tpd $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tpd
	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tpd
	install -D rp-l2tp/handlers/l2tp-control $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tp-control
	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tp-control
	install -d $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins
	install -D rp-l2tp/handlers/*.so $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins
	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins/*.so

xl2tpd: ppp
	CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	$(MAKE) -C $@ xl2tpd KERNELSRC="$(LINUXDIR)" PREFIX=/usr
	    KERNELSRC="$(LINUXDIR)" PREFIX=/usr

xl2tpd-install:
	install -D xl2tpd/xl2tpd $(INSTALLDIR)/xl2tpd/usr/sbin/xl2tpd
	$(STRIP) $(INSTALLDIR)/xl2tpd/usr/sbin/xl2tpd

igmpproxy/src/Makefile: igmpproxy/src/Makefile.in
	cd igmpproxy && CPPFLAGS="$(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr

igmpproxy: igmpproxy/src/Makefile
	$(MAKE) -C igmpproxy/src

igmpproxy-clean:
	$(MAKE) -C igmpproxy/src clean

igmpproxy-install:
	install -D igmpproxy/src/igmpproxy $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy
	$(STRIP) $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy

vsftpd-install:
	install -D vsftpd/vsftpd $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd
	$(STRIP) $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd

udpxy:
	$(MAKE) -C $@ release CDEFS="-O2 $(EXTRACFLAGS)"

udpxy-install:
	install -D udpxy/udpxy $(INSTALLDIR)/udpxy/usr/sbin/udpxy
	$(STRIP) $(INSTALLDIR)/udpxy/usr/sbin/udpxy
	ln -sf udpxy $(INSTALLDIR)/udpxy/usr/sbin/udpxrec

scsi-idle-install:
	install -D scsi-idle/scsi-start $(INSTALLDIR)/scsi-idle/usr/sbin/scsi-start
	$(STRIP) $(INSTALLDIR)/scsi-idle/usr/sbin/scsi-start
	ln -sf scsi-start $(INSTALLDIR)/scsi-idle/usr/sbin/scsi-stop

libusb10/Makefile: libusb10/Makefile.in
	cd libusb10 && CFLAGS="-O2 $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr ac_cv_lib_rt_clock_gettime=no

libusb10: libusb10/Makefile
	$(MAKE) -C $@

libusb/Makefile: libusb/Makefile.in
	cd libusb && CFLAGS="-Wall -Os $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr \
	    LIBUSB_1_0_CFLAGS="-I$(TOP)/libusb10/libusb" \
	    LIBUSB_1_0_LIBS="-L$(TOP)/libusb10/libusb/.libs -lusb-1.0"

libusb: libusb10 libusb/Makefile
	$(MAKE) -C $@

libusb-install:
	install -D libusb/libusb/.libs/libusb-0.1.so.4.4.4 $(INSTALLDIR)/libusb/usr/lib/libusb-0.1.so.4.4.4
	$(STRIP) $(INSTALLDIR)/libusb/usr/lib/*.so.*
	ln -sf libusb-0.1.so.4.4.4 $(INSTALLDIR)/libusb/usr/lib/libusb-0.1.so.4
	ln -sf libusb-0.1.so.4.4.4 $(INSTALLDIR)/libusb/usr/lib/libusb.so

libusb10-install:
	install -D libusb10/libusb/.libs/libusb-1.0.so.0.0.0 $(INSTALLDIR)/libusb10/usr/lib/libusb-1.0.so.0.0.0
	$(STRIP) $(INSTALLDIR)/libusb10/usr/lib/*.so.*
	ln -sf libusb-1.0.so.0.0.0 $(INSTALLDIR)/libusb10/usr/lib/libusb-1.0.so.0
	ln -sf libusb-1.0.so.0.0.0 $(INSTALLDIR)/libusb10/usr/lib/libusb-1.0.so

usb_modeswitch: libusb
	$(MAKE) -C $@ CC=$(CC) CCFLAGS="-Wall -Os $(EXTRACFLAGS) \
	    -I$(TOP)/libusb10/libusb -L$(TOP)/libusb10/libusb/.libs -lusb-1.0 \
	    -I$(TOP)/libusb/libusb -L$(TOP)/libusb/libusb/.libs -lusb"

usb_modeswitch-install:
	install -D usb_modeswitch/usb_modeswitch $(INSTALLDIR)/usb_modeswitch/usr/sbin/usb_modeswitch
	$(STRIP) $(INSTALLDIR)/usb_modeswitch/usr/sbin/usb_modeswitch
#	install -D -m 0644 usb_modeswitch/usb_modeswitch.conf $(INSTALLDIR)/usb_modeswitch/usr/etc/usb_modeswitch.conf

madwimax/Makefile: madwimax/Makefile.in
	cd madwimax && CPPFLAGS="$(EXTRACFLAGS)" PKG_CONFIG=/bin/true \
	    libusb1_CFLAGS="-I$(TOP)/libusb10/libusb" \
	    libusb1_LIBS="-L$(TOP)/libusb10/libusb/.libs -lusb-1.0" \
	$(CONFIGURE) --prefix=/usr --without-man-pages --with-script=wl500g --sysconfdir=/etc

madwimax: madwimax/Makefile libusb10
	$(MAKE) -C $@

madwimax-install:
	install -D madwimax/src/madwimax $(INSTALLDIR)/madwimax/usr/sbin/madwimax
	$(STRIP) $(INSTALLDIR)/madwimax/usr/sbin/madwimax

rcamdmips:
	$(MAKE) -C $@ LINUXKERNELSRC=$(LINUXDIR)

LPRng:
	$(MAKE) -C $@ GLOBAL_OPTIONS="$(EXTRACFLAGS)"

model-%:
	make rc-clean
	make infosvr-clean
	#make LPRng-clean
	#make vlan-clean
	#make shared-clean

	( if [ "$*" = "WL500gx" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DWL500GX -DQOS -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
	elif [ "$*" = "WL500gp" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL500GP -DQOS -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
	elif [ "$*" = "WL500gpv2" -o "$*" = "WL520gu" -o "$*" = "WL330gE" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL520GX -DQOS -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
	elif [ "$*" = "WL700g" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL700G -DQOS -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
	elif [ "$*" = "WL500W" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL500W -DQOS -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
	elif [ "$*" = "WL550gE" -o "$*" = "WL320gE" -o "$*" = "WL320gP" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL550GE -DQOS -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
	elif [ "$*" = "WLHDD" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WLHDD -DQOS -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
	elif [ "$*" = "WL300g" ]; then \
		make rc GLOBAL_OPTIONS="-DCONFIG_WL300G -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
	elif [ "$*" = "WL300g2" ]; then \
		make rc GLOBAL_OPTIONS="-DCONFIG_WL300G2 -DWPA2_WMM"; \
		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
	elif [ "$*" = "WL331g" ]; then \
		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL331G -DWPA2_WMM -DWOB"; \
		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
	elif [ "$*" = "WL331gl" ]; then \
		make rc GLOBAL_OPTIONS="-DCONFIG_WL331G -DWPA2_WMM -DWOB"; \
		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
	fi )

image-%:
	make model-$*
	make package-$*

images-%:
	make image-$* LANGUAGE="EN"
	#make image-$* LANGUAGE="KR"
	#make image-$* LANGUAGE="TW"
	#make image-$* LANGUAGE="CN"
	#make image-$* LANGUAGE="JP"

images:
	make images-WL500gx
	#make images-WL300g
	#make images-WLHDD
	make images-WL550gE
	make images-WL320gE
	make images-WL320gP
	make images-WL500gp
	make images-WL500W
	make images-WL520gu
	make images-WL500gpv2
	make images-WL330gE
	#make images-WL700g
	#make images-WL331g
	#make images-WL331gl

fast:
	# vlan/usb
	make images-WL500gx
	make rc-clean rc package-WL550gE
	make rc-clean rc package-WL500gp
	make rc-clean rc package-WL500W
	# usb/lpt/brcm
	#make images-WL500g
	#make package-WL500b
	# others
	#make images-WL500bv2
	#make images-WL300g
	#make images-WLHDD

#
# Generic rules
#

%:
	[ ! -d $* ] || $(MAKE) -C $*  EXTRACFLAGS="$(EXTRACFLAGS)"

%-clean:
	[ ! -d $* ] || $(MAKE) -C $* clean

%-install:
	[ ! -d $* ] || $(MAKE) -C $* install INSTALLDIR=$(INSTALLDIR)/$*

%-diff:
	make -C wl500g $*-diff

$(obj-y) $(obj-n) $(obj-clean) $(obj-install): dummy

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy
