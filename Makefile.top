#
# Broadcom Linux Router Makefile
# 
# Copyright 2004, Broadcom Corporation
# All Rights Reserved.
# 
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id$
#

ifneq ($(MAKECMDGOALS),.config)
include .config
endif

RELEASE=1.9.2.7-rtn

#
# asus trx trailer
#

KERNEL_VER=1.9
FS_VER=2.7
HWL1=0.02
HWH1=2.99

#
# Paths
#

# Source bases
export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))

#
# Cross-compile environment variables
#

# Build platform
export BUILD := $(shell (gcc -dumpmachine))
export HOSTCC := gcc
export HOSTCXX := g++

# uClibc wrapper
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif

ifeq ($(PLATFORM),mipsel)
export CROSS_COMPILE := mipsel-linux-
export CONFIGURE := ./configure --host=mipsel-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../mipsel-linux && pwd -P)
endif

ifeq ($(PLATFORM),mipsel-uclibc)
export CROSS_COMPILE := mipsel-uclibc-
export CONFIGURE := ./configure --host=mipsel-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
endif

ifeq ($(CONFIG_BCMWPA2),y)
EXTRACFLAGS += -DBCMWPA2 
endif
ifeq ($(CONFIG_WSCCMD),y)
EXTRACFLAGS += -DBCMWPS
endif

ifeq ($(CONFIG_IPV6),y)
export CONFIG_IPV6 := y
else
CONFIG_IPV6 :=
endif

export CC := $(CROSS_COMPILE)gcc
export AR := $(CROSS_COMPILE)ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)nm
export RANLIB := $(CROSS_COMPILE)ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

# Determine kernel version
kver=$(subst ",,$(word 3, $(shell grep -s "UTS_RELEASE" $(LINUXDIR)/include/linux/$(1))))

LINUX_KERNEL=$(call kver,version.h)
ifeq ($(LINUX_KERNEL),)
LINUX_KERNEL=$(call kver,utsrelease.h)
endif
export MODULESDIR := $(TARGETDIR)/lib/modules/$(LINUX_KERNEL)
SRCMODULESDIR := $(PLATFORMDIR)/modules/lib/modules/*/kernel

#
# Configuration
#
img-$(if $(CONFIG_RTN16),y,n)	+= RT-N16
img-$(if $(CONFIG_RTN15U),y,n)	+= RT-N15U
img-$(if $(CONFIG_RTN12),y,n)	+= RT-N12
img-$(if $(CONFIG_RTN12B1),y,n)	+= RT-N12B1
img-$(if $(CONFIG_RTN12C1),y,n)	+= RT-N12C1
img-$(if $(CONFIG_RTN10),y,n)	+= RT-N10
img-$(if $(CONFIG_RTN10U),y,n)	+= RT-N10U
img-$(if $(CONFIG_WL500GP),y,n)	+= WL500gp
img-$(if $(CONFIG_WL500GPV2),y,n)+=WL500gpv2
img-$(if $(CONFIG_WL500W),y,n)	+= WL500W
img-$(if $(CONFIG_WL700G),y,n)	+= WL700g

MODEL = $(firstword $(img-y))

# always build libbcmcrypto, required by nas
obj-y += libbcmcrypto
obj-y += kernel busybox dnsmasq e2fsprogs
obj-$(CONFIG_LIBUSB) += libusb10
obj-$(CONFIG_HTTPD) += httpd
obj-$(CONFIG_RC) += rc
obj-$(CONFIG_LIBBCM) += libbcm
obj-$(CONFIG_SHARED) += shared
obj-$(CONFIG_WWW) += www
obj-$(CONFIG_GLIBC) += lib
obj-$(CONFIG_UCLIBC) += lib
obj-$(CONFIG_WLCONF) += wlconf
obj-$(CONFIG_BRIDGE) += bridge
obj-$(CONFIG_IPTABLES) += iptables
obj-$(CONFIG_LIBIPT) += iptables
obj-$(CONFIG_NETCONF) += netconf
obj-$(CONFIG_NVRAM) += nvram
obj-$(CONFIG_PPP) += ppp
obj-$(CONFIG_UDHCPD) += udhcpd
obj-$(CONFIG_UPNP) += upnp
obj-$(CONFIG_MINIUPNPD) += miniupnpd
obj-$(CONFIG_UTILS) += utils
obj-$(CONFIG_ETC) += etc

# ASUS applications
obj-$(CONFIG_ACCEL_PPTP) += accel-pptp
obj-$(CONFIG_PPPOERELAY) += rp-pppoe
obj-$(CONFIG_EZIPUPDATE) += ez-ipupdate
obj-$(CONFIG_LPRNG) += LPRng
obj-$(CONFIG_OTHERS) += others
obj-$(CONFIG_BPALOGIN) += bpalogin
obj-$(CONFIG_EMF) += emf igs
obj-y += udev

# custom firmware
obj-$(CONFIG_SSHD) += dropbear
obj-$(CONFIG_JETDIRECT) += p910nd
obj-$(CONFIG_SAMBA) += samba
obj-$(CONFIG_NFSD) += nfs-utils
obj-$(CONFIG_NFSD) += portmap
obj-$(CONFIG_IPROUTE2) += iproute2
obj-$(CONFIG_LOADER) += loader
obj-$(CONFIG_RADVD) += radvd
obj-$(CONFIG_SNMP) += ucd-snmp
obj-$(CONFIG_L2TP) += rp-l2tp
obj-$(CONFIG_XL2TPD) += xl2tpd
obj-$(CONFIG_IGMPPROXY) += igmpproxy
obj-$(CONFIG_RIPD) += quagga
obj-$(CONFIG_VSFTPD) += vsftpd
obj-$(CONFIG_NTFS3G) += ntfs-3g
obj-$(CONFIG_INADYN) += inadyn
obj-$(CONFIG_SCSIIDLE) += scsi-idle
obj-$(CONFIG_USBMODESWITCH) += usb_modeswitch
obj-$(CONFIG_MADWIMAX) += madwimax
obj-$(CONFIG_MODEM) += cdma
obj-$(CONFIG_EAPOL) += wpa_supplicant
obj-$(CONFIG_TELENET) += lanauth
obj-$(CONFIG_CONVEX) += authcli
obj-$(CONFIG_LLTD) += lltd
obj-$(CONFIG_TCPDUMP) += tcpdump libpcap
obj-$(CONFIG_LIBJPEG) += jpeg-8b
obj-$(CONFIG_RCAMD) += mjpg-streamer
obj-$(CONFIG_USBIP) += usbip
obj-$(CONFIG_LIBSYSFS) += sysfsutils
obj-y += udpxy

# Exclude targets for non-USB routers
ifeq ($(filter RT-N10 RT-N12 RT-N12B1 RT-N12C1,$(MODEL)),$(MODEL))
obj-y := $(filter-out LPRng e2fsprogs libusb10 madwimax p910nd mjpg-streamer samba scsi-idle cdma usb_modeswitch vsftpd ntfs-3g,$(obj-y))
endif
# Exclude more targets for non-USB routers with small flash-memory
ifeq ($(filter RT-N10 RT-N12,$(MODEL)),$(MODEL))
obj-y := $(filter-out nfs-utils quagga tcpdump,$(obj-y))
endif

# Kernel modules extension
EXTRACFLAGS += -DLINUX26
ko=.ko

# Netfilter modules NOT to include in main FW
netfilter_external_modules := {xt,ipt}_layer7$(ko) ip_set$(ko) \
 ip_set_ipmap$(ko) ip_set_iptree$(ko) ip_set_iptreemap$(ko) \
 ip_set_macipmap$(ko) ip_set_nethash$(ko) ip_set_iphash$(ko) \
 ip_set_portmap$(ko) ip_set_ipporthash$(ko) ip_set_ipportiphash$(ko) \
 ip_set_ipportnethash$(ko) ip_set_setlist$(ko) \
 ipt_SET$(ko) ipt_set$(ko)

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)

# defaults
export LANGUAGE := "EN"
GLOBAL_OPTIONS := -DUSB_SUPPORT -DQOS -DWPA2_WMM -DASUS_EXT

LZMASDK=$(SRCBASE)/lzma
LZMADIR=$(LZMASDK)/CPP/7zip/Bundles/LzmaCon

# legacy, to remove in future
LZMA4SDK=$(SRCBASE)/lzma4xx
LZMA4LIB=$(LZMA4SDK)/CPP/7zip/Compress/LZMA_Lib
SQUASHFS3=y

ifeq ($(SQUASHFS3),y)
MKSQUASHFSDIR=$(LINUXDIR)/scripts/squashfs
MKSQUASHFS=$(MKSQUASHFSDIR)/mksquashfs-lzma
else
MKSQUASHFSDIR=$(TOP)/squashfs/squashfs-tools
MKSQUASHFS=$(MKSQUASHFSDIR)/mksquashfs
endif

SVNREVISION:=$(shell cat $(TOP)/.svnrev 2>/dev/null)
ifneq (0,$(words $(SVNREVISION)))
  RELEASE:=$(RELEASE)-r$(firstword $(SVNREVISION))
endif

# $1 - config name, $2 - params list to change, $3 - new param value (y/n/m)
define SwitchConfParam
	@( \
	SW_SEDCMD=""; \
	for SW_PARAM in $(2); do \
	 ORIG_STR=`grep -w "$${SW_PARAM}" $(1) 2>/dev/null`; \
	 if [ "$(3)" = "n" ]; then \
	    TEST_PATTERN="# $${SW_PARAM} is not set"; \
	 else \
	    TEST_PATTERN="$${SW_PARAM}=$(3)"; \
	 fi; \
	 IS_SAME_VALUE=`echo $${ORIG_STR} | grep "$${TEST_PATTERN}" 2>/dev/null`; \
	 if [ "$${IS_SAME_VALUE}" = "" ]; then \
	    SW_SEDCMD="$${SW_SEDCMD};s/$${ORIG_STR}/$${TEST_PATTERN}/"; \
	 fi; \
	done; \
	if [ "$${SW_SEDCMD}" != "" ]; then \
	    sed "$${SW_SEDCMD}" $(1) >$(1).sed; \
	    mv $(1).sed $(1); \
	fi; \
	)
endef

FlashMaxSize = \
    $(if $(filter $(1),WL520gc),1703936, \
    $(if $(filter $(1),WL500gx WL550gE WL320gE WL320gP WL520gu WL330gE RT-N10 RT-N12),3801880, \
    $(if $(filter $(1),WL500gp WL500W WL500gpv2 WL700g RT-N10U RT-N12B1 RT-N12C1 RT-N15U),7995392, \
    $(if $(filter $(1),RT-N16),16384000,0)))) \

#
# Basic rules
#

all: $(obj-y) 

clean: $(obj-clean) config-clean lzma-clean mksquashfs-clean
	rm -rf $(TARGETDIR)
	rm -f $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs

mrproper: clean
	rm -f .config $(LINUXDIR)/.config

distclean:
	for subdir in $(obj-y); do \
		$(MAKE) -C $$subdir distclean; \
	done

lzma $(LZMADIR)/lzma:
	$(MAKE) -C $(LZMADIR) -f makefile.gcc

lzma-clean:
	$(MAKE) -C $(LZMADIR) -f makefile.gcc clean

loader:
	$(MAKE) -C $@ LZMAPATH=$(LZMA4SDK)/C/Compress/Lzma
#	$(MAKE) -C $@ LZMAPATH=$(SRCBASE)/lzma/C

mksquashfs $(MKSQUASHFS):
ifeq ($(SQUASHFS3),y)
	$(MAKE) -C $(LZMA4LIB) CC=$(HOSTCC) CXX=$(HOSTCXX)
	$(MAKE) -C $(MKSQUASHFSDIR) \
		LZMAPATH=$(LZMA4LIB) CC=$(HOSTCC) CXX=$(HOSTCXX)
else
	$(MAKE) -C $(MKSQUASHFSDIR) CC=$(HOSTCC) CXX=$(HOSTCXX) \
		LZMA_DIR=$(LZMASDK) EXTRA_CFLAGS="-O3 -D_7ZIP_ST"
endif

mksquashfs-clean:
	$(MAKE) -C $(MKSQUASHFSDIR) clean LZMA_DIR=.
ifeq ($(SQUASHFS3),y)
	$(MAKE) -C $(LZMA4LIB) clean
endif

$(PLATFORMDIR):
	install -d $@

$(PLATFORMDIR)/vmlinuz: $(LINUXDIR)/vmlinux lzma $(PLATFORMDIR)
ifeq ($(CONFIG_LOADER),y)
	$(MAKE) -C loader vmlinuz-install LZMA=$(LZMADIR)/lzma DESTDIR=$(PLATFORMDIR)
else
	$(MAKE) -C $(LINUXDIR)/arch/mips/brcm-boards/bcm947xx/compressed vmlinuz
	cp $(LINUXDIR)/arch/mips/brcm-boards/bcm947xx/compressed/vmlinuz $(PLATFORMDIR)/
endif

MIPSREV := $(if $(filter RT-N%,$(MODEL)),MIPS32r2,MIPS32r1)

$(LINUXDIR)/.stamp-$(MIPSREV): $(LINUXDIR)/.config
	@-rm -f $(LINUXDIR)/.stamp-*
	$(call SwitchConfParam,$<,CONFIG_CPU_MIPS32_R1,$(if $(filter WL%,$(MODEL)),y,n))
	$(call SwitchConfParam,$<,CONFIG_CPU_MIPS32_R2,$(if $(filter RT-N%,$(MODEL)),y,n))
	touch $@

kernel-modules: $(LINUXDIR)/.stamp-$(MIPSREV) $(LINUXDIR)/.config
	$(MAKE) -C $(LINUXDIR) modules CC=$(CROSS_COMPILE)gcc

kernel: $(LINUXDIR)/.stamp-$(MIPSREV) $(LINUXDIR)/.config
	$(MAKE) -C $(LINUXDIR) CC=$(CROSS_COMPILE)gcc

kernel-clean:
	$(MAKE) -C $(LINUXDIR) clean
	@-rm -f $(LINUXDIR)/.stamp-*

kernel-install: kernel $(PLATFORMDIR)/vmlinuz
	( . $(LINUXDIR)/.config ; \
	if [ "$${CONFIG_MODULES}" = "y" ] ; then \
	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(PLATFORMDIR)/modules \
	     INSTALL_MOD_STRIP="--strip-debug -x -R .comment -R .pdr -R .mdebug.abi32 -R .note.gnu.build-id -R .gnu.attributes -R .reginfo" ; \
	    $(TOP)/busybox/examples/depmod.pl -b $(PLATFORMDIR)/modules/lib/modules/* -F $(LINUXDIR)/System.map; \
	fi )
	rm -f $(PLATFORMDIR)/modules/lib/modules/*/build

modules_install-WL500gx modules_install-WL500gp modules_install-WL500W: modules_install modules_install-usb
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/uhci-hcd$(ko)

modules_install-WL700g: modules_install-WL500gp
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/char/gpiortc$(ko) \
		$(SRCMODULESDIR)/drivers/ide/ide-core$(ko) \
		$(SRCMODULESDIR)/drivers/ide/ide-disk$(ko) \
		$(SRCMODULESDIR)/drivers/ide/pci/aec62xx$(ko) 

modules_install-RT-N10 modules_install-RT-N12 modules_install-RT-N12B1 modules_install-RT-N12C1: modules_install
	@true

modules_install-RT-N10U modules_install-RT-N15U modules_install-RT-N16: modules_install modules_install-usb
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/ohci-hcd$(ko) 

modules_install-WL550gE modules_install-WL520gu modules_install-WL500gpv2: modules_install modules_install-usb
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/host/ohci-hcd$(ko) 

modules_install-WL520gc: modules_install
	@true

NETFILTER_MODS_LIST:=$(filter-out $(patsubst %$(ko),\%/%$(ko),$(netfilter_external_modules)),$(shell ls -1 $(SRCMODULESDIR)/net/netfilter/*$(ko) 2>/dev/null))
NETFILTER_MODS_LIST+=$(filter-out $(patsubst %$(ko),\%/%$(ko),$(netfilter_external_modules)),$(shell ls -1 $(SRCMODULESDIR)/net/ipv4/netfilter/*$(ko) 2>/dev/null))
ifeq ($(CONFIG_IPV6),y)
NETFILTER_MODS_LIST+=$(filter-out $(patsubst %$(ko),\%/%$(ko),$(netfilter_external_modules)),$(shell ls -1 $(SRCMODULESDIR)/net/ipv6/netfilter/*$(ko) 2>/dev/null))
endif

modules_install-usb:
	# NLS
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/fs/nls/nls_cp950$(ko)
	# generic usb
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/core/usbcore$(ko) \
		$(SRCMODULESDIR)/drivers/usb/host/ehci-hcd$(ko) \
		$(SRCMODULESDIR)/drivers/usb/class/usblp$(ko)
	# usb storage
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/storage/usb-storage$(ko) \
		$(SRCMODULESDIR)/drivers/scsi/sd_mod$(ko) \
		$(SRCMODULESDIR)/drivers/scsi/scsi_mod$(ko)
	# usb serial
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/serial/usbserial$(ko) \
		$(SRCMODULESDIR)/drivers/usb/serial/pl2303$(ko) \
		$(SRCMODULESDIR)/drivers/usb/serial/ftdi_sio$(ko) \
		$(SRCMODULESDIR)/drivers/usb/serial/option$(ko) \
		$(SRCMODULESDIR)/drivers/usb/class/cdc-acm$(ko)
	# usb ethernet
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/net/usb/usbnet$(ko) \
		$(SRCMODULESDIR)/drivers/net/usb/cdc_ether$(ko) \
		$(SRCMODULESDIR)/drivers/net/usb/rndis_host$(ko)
	# usb webcams
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/media/video/videodev$(ko) \
		$(SRCMODULESDIR)/drivers/media/video/v4l2-common$(ko) \
		$(SRCMODULESDIR)/drivers/media/video/uvc/uvcvideo$(ko) \
		$(SRCMODULESDIR)/drivers/input/input-core$(ko)
	# usb audio
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/sound/soundcore$(ko) \
		$(SRCMODULESDIR)/sound/core/snd$(ko) \
		$(SRCMODULESDIR)/sound/core/snd-*$(ko) \
		$(SRCMODULESDIR)/sound/core/oss/snd-*$(ko) \
		$(SRCMODULESDIR)/sound/usb/snd-usb-*$(ko)
	# NFS
ifeq ($(CONFIG_NFS),y)
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/fs/nfs/nfs$(ko)
endif
	# NFS
ifeq ($(CONFIG_NFSD),y)
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/fs/lockd/lockd$(ko) \
		$(SRCMODULESDIR)/fs/exportfs/exportfs$(ko)    \
		$(SRCMODULESDIR)/fs/nfsd/nfsd$(ko)    \
		$(SRCMODULESDIR)/net/sunrpc/sunrpc$(ko)
endif
	# fs
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/fs/ntfs/ntfs$(ko)
ifeq ($(CONFIG_NTFS3G),y)
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/fs/fuse/fuse$(ko)
endif
	# USB/IP
ifeq ($(CONFIG_USBIP),y)
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/usb/usbip/usbip-core$(ko) \
		$(SRCMODULESDIR)/drivers/usb/usbip/usbip-host$(ko)
endif

modules_install: .config
	install -d $(MODULESDIR)
	# network stuff
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/drivers/net/et/et$(ko) \
		$(SRCMODULESDIR)/drivers/net/wl/wl$(ko) \
		$(SRCMODULESDIR)/drivers/net/emf/emf$(ko) \
		$(SRCMODULESDIR)/drivers/net/igs/igs$(ko) \
		$(SRCMODULESDIR)/drivers/net/pppox$(ko) \
		$(SRCMODULESDIR)/drivers/net/pppoe$(ko) \
		$(SRCMODULESDIR)/drivers/net/pptp$(ko) \
		$(SRCMODULESDIR)/drivers/net/pppol2tp$(ko) \
		$(SRCMODULESDIR)/drivers/net/tun$(ko) \
		$(SRCMODULESDIR)/drivers/net/imq$(ko) \
		$(SRCMODULESDIR)/drivers/connector/cn$(ko) \
		$(NETFILTER_MODS_LIST)
	# other
	install -t $(MODULESDIR) \
		$(SRCMODULESDIR)/lib/libcrc32c$(ko)
	# extra strip modules without params
	$(STRIP) --strip-unneeded $(MODULESDIR)/wl$(ko)

install: package-$(MODEL)
	@true

package-%: $(filter-out lib-install www-install,$(obj-install)) $(LINUXDIR)/.config mksquashfs
	$(MAKE) www-pages-$*
	# Install binaries into target directory
	rm -rf $(TARGETDIR) && install -d $(TARGETDIR)
	echo $(RELEASE) > $(TARGETDIR)/.version
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) $(INSTALLDIR)/www ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	# Optimize crypto library
	$(MAKE) -C libbcmcrypto optimize
	# Install (and possibly optimize) C library
	$(MAKE) lib-install
	# Install Addons, if any
	@-( if [ -d $(SRCBASE)/router/Addon ]; then \
	    ( cp -dupR $(SRCBASE)/router/Addon/* $(TARGETDIR) ) \
	fi )
	# Install modules into filesystem
	$(MAKE) modules_install-$*
	# Prepare filesystem
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
        # Make rootfs image
ifeq ($(SQUASHFS3),y)
	$(MKSQUASHFS) $(TARGETDIR) $(PLATFORMDIR)/target.cramfs \
		-all-root -noappend -nopad -pf $(TOP)/misc/rootprep.files
else
	$(MKSQUASHFS) $(TARGETDIR) $(PLATFORMDIR)/target.cramfs \
		-all-root -noappend -nopad -pf $(TOP)/misc/rootprep.files \
		-comp lzma -Xlc 0 -Xlp 2 -Xpb 2 -Xfb 128
endif
	rm -f $(PLATFORMDIR)/$*-$(RELEASE).trx
	$(MAKE) -C $(SRCBASE)/asustrx CC=$(HOSTCC)
ifeq ($(CONFIG_LOADER),y)
	$(SRCBASE)/asustrx/asustrx -p $* -v $(KERNEL_VER).$(FS_VER) -m $(call FlashMaxSize,$*) \
		-o $(PLATFORMDIR)/$*-$(RELEASE).trx \
		loader/loader.gz $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs
else
	$(SRCBASE)/asustrx/asustrx -p $* -v $(KERNEL_VER).$(FS_VER) -m $(call FlashMaxSize,$*) \
		-o $(PLATFORMDIR)/$*-$(RELEASE).trx \
		$(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs
endif
	@echo
	@echo "Finished building $* firmware version $(KERNEL_VER).$(FS_VER) ($(RELEASE))"
	@echo

MANPAGES-y := busybox/docs/BusyBox.1 \
	    LPRng/man/lpd.8 bridge/doc/brctl.8 dnsmasq/man/dnsmasq.8 \
	    dropbear/dbclient.1 dropbear/dropbear.8 dropbear/dropbearkey.8 \
	    igmpproxy/doc/igmpproxy.8 igmpproxy/doc/igmpproxy.conf.5 \
	    iptables/iptables.8 iptables/iptables-restore.8 iptables/iptables-save.8 \
	    p910nd/p910nd.8 ppp/chat/chat.8 ppp/pppd/pppd.8 \
	    ucd-snmp/man/snmpd.1 ucd-snmp/man/snmpd.conf.5 \
	    vsftpd/vsftpd.8 vsftpd/vsftpd.conf.5

MANPAGES-$(CONFIG_SAMBA) += samba/docs/manpages/smb.conf.5 \
	    samba/docs/manpages/smbpasswd.8 samba/docs/manpages/nmbd.8 samba/docs/manpages/smbd.8
MANPAGES-$(CONFIG_IPV6) += iptables/ip6tables.8 iptables/ip6tables-restore.8 iptables/ip6tables-save.8
MANPAGES-$(CONFIG_INADYN) += inadyn/man/inadyn.conf.5 inadyn/man/inadyn.8
MANPAGES-$(CONFIG_NTFS3G) += ntfs-3g/src/ntfs-3g.8
MANPAGES-$(CONFIG_RIPD) += quagga/doc/ospfd.8 quagga/doc/ripd.8 quagga/doc/zebra.8
MANPAGES-$(CONFIG_TCPDUMP) += tcpdump/tcpdump.1

manpages-install:
	$(MAKE) -C LPRng/man
	@mkdir -p $(PLATFORMDIR)/manpages/man/man8 \
	    $(PLATFORMDIR)/manpages/man/man1 $(PLATFORMDIR)/manpages/man/man5
	install --mode=0644 -t $(PLATFORMDIR)/manpages/man/man8 \
	    $(filter %.8,$(MANPAGES-y))
	install --mode=0644 -t $(PLATFORMDIR)/manpages/man/man1 \
	    $(filter %.1,$(MANPAGES-y))
	install --mode=0644 -t $(PLATFORMDIR)/manpages/man/man5 \
	    $(filter %.5,$(MANPAGES-y))
ifeq ($(CONFIG_NFSD),y)
	for subdir in exportfs mountd nfsd statd; do \
	$(MAKE) -C nfs-utils/utils/$${subdir} install-man DESTDIR=$(PLATFORMDIR)/ datarootdir=manpages ; \
	done
endif
ifeq ($(CONFIG_RADVD),y)
	$(MAKE) -C radvd install-man DESTDIR=$(PLATFORMDIR)/manpages
endif

modules: kernel-install
	tar -C $(PLATFORMDIR)/$@ -czf $(PLATFORMDIR)/$@-$(RELEASE)-$(subst .stamp-,,$(notdir $(wildcard $(LINUXDIR)/.stamp-*))).tgz .

manpages: manpages-install
	tar -C $(PLATFORMDIR)/$@ -czf $(PLATFORMDIR)/$@-$(RELEASE).tgz .

#
# Configuration rules
#

conf mconf:
	$(MAKE) -C config
	@./config/$@ ./config/Config
	# Also configure kernel
	$(MAKE) k$@

oldconf: .config
	$(MAKE) -C config
	@./config/conf -o ./config/Config
	$(MAKE) shared-clean rc-clean httpd-clean
	# Also configure kernel
	$(MAKE) k$@

kconf:
	$(MAKE) -C $(LINUXDIR) config

kmconf:
	$(MAKE) -C $(LINUXDIR) menuconfig

koldconf: $(LINUXDIR)/.config
	@true

$(LINUXDIR)/include/linux/version.h: $(LINUXDIR)/.config
	$(MAKE) -C $(LINUXDIR) include/linux/version.h
	$(MAKE) -C $(LINUXDIR) include/linux/autoconf.h

# Convenience
config: conf

menuconfig: mconf

oldconfig: oldconf

# Default configurations
.config:
	cp config/defconfig $@
	$(MAKE) oldconfig

$(LINUXDIR)/.config: .config
	cp $(LINUXDIR)/arch/mips/defconfig-bcm947xx $@
	$(call SwitchConfParam,$@,CONFIG_IPV6,$(if $(CONFIG_IPV6),y,n))

#
# Overrides
#

httpd: netconf shared nvram $(EXTRA_LIBS)

rc: $(if $(CONFIG_UPNP),netconf,) shared nvram $(EXTRA_LIBS)
	$(MAKE) -C $@ GLOBAL_OPTIONS="$(GLOBAL_OPTIONS) -DMODEL_$(shell echo $(MODEL) | tr '[a-z][:punct:]' '[A-Z]_')" EXTRACFLAGS="$(EXTRACFLAGS)"

rc-install:
	$(MAKE) -C rc install INSTALLDIR=$(INSTALLDIR)/rc GLOBAL_OPTIONS="$(GLOBAL_OPTIONS) -DMODEL_$(shell echo $(MODEL) | tr '[a-z][:punct:]' '[A-Z]_')" EXTRACFLAGS="$(EXTRACFLAGS)"

www-%:
	$(MAKE) -C www $* INSTALLDIR=$(INSTALLDIR)/www

radvd/Makefile: radvd/Makefile.in
	cd radvd && CFLAGS="-g -Os" CPPFLAGS="$(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=""

radvd: radvd/Makefile

radvd-install:
	install -D radvd/radvd $(INSTALLDIR)/radvd/usr/sbin/radvd
	$(STRIP) $(INSTALLDIR)/radvd/usr/sbin/radvd

quagga/Makefile: quagga/Makefile.in
	cd quagga && CFLAGS="-g -Os -std=gnu99 -Wall $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr --localstatedir=/var/run --sysconfdir=/etc/quagga/ \
	 --disable-bgp-announce --disable-ipv6 --enable-multipath=8 \
	 --disable-vtysh --disable-bgpd --disable-watchquagga \
	 --disable-opaque-lsa --disable-ospf-te \
	 --disable-static --enable-pie=no \
	 quagga_cv_ipforward_method=proc \
	 ac_cv_func_realloc_0_nonnull=yes ac_cv_func_malloc_0_nonnull=yes \
	 ac_cv_have_decl_CLOCK_MONOTONIC=no

quagga: quagga/Makefile

quagga-install:
	install -D quagga/ripd/.libs/ripd $(INSTALLDIR)/quagga/usr/sbin/ripd
	install -D quagga/ospfd/.libs/ospfd $(INSTALLDIR)/quagga/usr/sbin/ospfd
	install -D quagga/ospfd/.libs/libospf.so.0.0.0 $(INSTALLDIR)/quagga/usr/lib/libospf.so.0.0.0
	ln -sf libospf.so.0.0.0 $(INSTALLDIR)/quagga/usr/lib/libospf.so.0
	ln -sf libospf.so.0.0.0 $(INSTALLDIR)/quagga/usr/lib/libospf.so
	install -D quagga/zebra/.libs/zebra $(INSTALLDIR)/quagga/usr/sbin/zebra
	install -D quagga/lib/.libs/libzebra.so.0.0.0 $(INSTALLDIR)/quagga/usr/lib/libzebra.so.0.0.0
	ln -sf libzebra.so.0.0.0 $(INSTALLDIR)/quagga/usr/lib/libzebra.so.0
	ln -sf libzebra.so.0.0.0 $(INSTALLDIR)/quagga/usr/lib/libzebra.so
	$(STRIP) $(INSTALLDIR)/quagga/usr/sbin/ripd $(INSTALLDIR)/quagga/usr/sbin/ospfd \
	 $(INSTALLDIR)/quagga/usr/sbin/zebra \
	 $(INSTALLDIR)/quagga/usr/lib/libospf.so.0.0.0 \
	 $(INSTALLDIR)/quagga/usr/lib/libzebra.so.0.0.0

bridge/Makefile: bridge/Makefile.in
	cd bridge && CFLAGS="-g -Os $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix="/usr" --with-linux-headers=$(LINUXDIR)/include

bridge: bridge/Makefile

bridge-install: bridge
	install -D bridge/brctl/brctl $(INSTALLDIR)/bridge/usr/sbin/brctl
	$(STRIP) $(INSTALLDIR)/bridge/usr/sbin/brctl

ez-ipupdate/Makefile: ez-ipupdate/Makefile.in ez-ipupdate/config.h.in ez-ipupdate/configure.in
	cd ez-ipupdate && ac_cv_prog_CC=$(CC) CPP=$(CC) CFLAGS="-g -Os $(EXTRACFLAGS)" \
	$(CONFIGURE)

ez-ipupdate: ez-ipupdate/Makefile

ez-ipupdate-install:
	install -D ez-ipupdate/ez-ipupdate $(INSTALLDIR)/ez-ipupdate/usr/sbin/ez-ipupdate
	$(STRIP) $(INSTALLDIR)/ez-ipupdate/usr/sbin/ez-ipupdate

inadyn/Makefile.in: inadyn/Makefile.am inadyn/configure.ac
	NOCONFIGURE="yes" inadyn/autogen.sh

inadyn/Makefile: inadyn/Makefile.in inadyn/configure
	cd inadyn && CFLAGS="-g -Os $(EXTRACFLAGS)" \
	ac_cv_func_malloc_0_nonnull="yes" ac_cv_func_realloc_0_nonnull="yes" \
	use_cache_file="yes" \
	$(CONFIGURE)

inadyn: inadyn/Makefile

inadyn-install:
	install -D inadyn/src/inadyn $(INSTALLDIR)/inadyn/usr/sbin/inadyn
	$(STRIP) $(INSTALLDIR)/inadyn/usr/sbin/inadyn

bpalogin/Makefile: bpalogin/Makefile.in
	cd bpalogin && CC=$(CC) CFLAGS="-g -Os $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr

bpalogin: bpalogin/Makefile

bpalogin-install:
	install -D bpalogin/bpalogin $(INSTALLDIR)/bpalogin/usr/sbin/bpalogin
	$(STRIP) $(INSTALLDIR)/bpalogin/usr/sbin/bpalogin

busybox/.config: .config
	cp -fp busybox/sysdeps/linux/$(CONFIG_BUSYBOX_CONFIG) $@
	$(call SwitchConfParam,$@,CONFIG_FEATURE_IPV6 CONFIG_PING6 CONFIG_TRACEROUTE6,$(if $(CONFIG_IPV6),y,n))
	$(call SwitchConfParam,$@,CONFIG_SENDMAIL,$(if $(CONFIG_SENDMAIL),y,n))
	sed -i 's/CONFIG_EXTRA_CFLAGS=.*/CONFIG_EXTRA_CFLAGS="$(EXTRACFLAGS)"/' $@
	$(MAKE) -C busybox oldconfig

busybox: busybox/.config
	$(MAKE) -C $@ all STRIP=$(STRIP) EXTRA_LDFLAGS="-Wl,-rpath /lib"

busybox-install: busybox
	$(MAKE) -C busybox install STRIP=$(STRIP) CONFIG_PREFIX=$(INSTALLDIR)/busybox EXTRA_CFLAGS="$(EXTRACFLAGS)" EXTRA_LDFLAGS="-Wl,-rpath /lib"

cdma:
	@true

cdma-install:
	install -d $(INSTALLDIR)/cdma
	$(MAKE) -C cdma install

iptables/Makefile: iptables/Makefile.in
	cd iptables && CFLAGS="-Os $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr --with-pic --with-kernel=$(LINUXDIR) \
	 $(if $(CONFIG_IPV6),,--disable-ipv6) \
	 blacklist_modules="dscp DSCP rateest RATEEST realm SECMARK socket sctp TRACE state"

iptables: $(LINUXDIR)/include/linux/version.h iptables/Makefile
	$(MAKE) -C $@ EXTRA_LDFLAGS="-Wl,-rpath=/lib:/usr/lib"

iptables-install: iptables
ifeq ($(CONFIG_IPTABLES),y)
	install -d $(INSTALLDIR)/iptables/usr/libexec/xtables
	install iptables/extensions/libipt_*.so $(INSTALLDIR)/iptables/usr/libexec/xtables
	install iptables/extensions/libxt_*.so $(INSTALLDIR)/iptables/usr/libexec/xtables
	install -D iptables/.libs/iptables-multi $(INSTALLDIR)/iptables/usr/sbin/iptables
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables
	ln -sf iptables $(INSTALLDIR)/iptables/usr/sbin/iptables-restore
	ln -sf iptables $(INSTALLDIR)/iptables/usr/sbin/iptables-save
	install -D iptables/.libs/libxtables.so.2.0.0 $(INSTALLDIR)/iptables/usr/lib/libxtables.so.2.0.0
	ln -sf libxtables.so.2.0.0 $(INSTALLDIR)/iptables/usr/lib/libxtables.so.2
	ln -sf libxtables.so.2.0.0 $(INSTALLDIR)/iptables/usr/lib/libxtables.so
ifeq ($(CONFIG_IPV6),y)
	install iptables/extensions/libip6t_*.so $(INSTALLDIR)/iptables/usr/libexec/xtables
	install iptables/.libs/ip6tables-multi $(INSTALLDIR)/iptables/usr/sbin/ip6tables
	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/ip6tables
	ln -sf ip6tables $(INSTALLDIR)/iptables/usr/sbin/ip6tables-restore
	ln -sf ip6tables $(INSTALLDIR)/iptables/usr/sbin/ip6tables-save
endif
	$(STRIP) $(INSTALLDIR)/iptables/usr/libexec/xtables/libip*.so $(INSTALLDIR)/iptables/usr/libexec/xtables/libxt*.so
else
	# So that generic rule does not take precedence
	@true
endif

iptables-clean:
	-$(MAKE) -C iptables KERNEL_DIR=$(LINUXDIR) clean


netconf: iptables

upnp: netconf nvram shared

miniupnpd/config.h:
	cd miniupnpd && ./genconfig.sh

miniupnpd: iptables netconf miniupnpd/config.h
	$(MAKE) -C $@ -f Makefile.linux EXTRACFLAGS="$(EXTRACFLAGS)" \
	    IPTABLESPATH=$(TOP)/iptables ARCH=$(PLATFORM) \
	    $(if $(CONFIG_NETCONF),LDFLAGS="-L$(TOP)/netconf -lnetconf",LDFLAGS="-liptc") \
	    miniupnpd

miniupnpd-install:
	install -D miniupnpd/miniupnpd $(INSTALLDIR)/miniupnpd/usr/sbin/miniupnpd
	$(STRIP) $(INSTALLDIR)/miniupnpd/usr/sbin/miniupnpd

miniupnpd-clean:
	$(MAKE) -C miniupnpd -f Makefile.linux clean

wlconf: nvram shared

ppp/Makefile: ppp/linux/Makefile.top
	cd ppp && $(CONFIGURE) --prefix=/usr --sysconfdir=/tmp

ppp: ppp/Makefile
	$(MAKE) -C $@ MFLAGS="$(if $(CONFIG_IPV6),HAVE_INET6=y,) EXTRACFLAGS=\"$(EXTRACFLAGS)\" EXTRA_LDFLAGS=\"-Wl,-rpath /lib\""

ppp-install: ppp
	install -D ppp/pppd/pppd $(INSTALLDIR)/ppp/usr/sbin/pppd
	$(STRIP) $(INSTALLDIR)/ppp/usr/sbin/pppd
	install -D ppp/chat/chat $(INSTALLDIR)/ppp/usr/sbin/chat
	$(STRIP) $(INSTALLDIR)/ppp/usr/sbin/chat
	install -D ppp/pppd/plugins/pppol2tp/pppol2tp.so $(INSTALLDIR)/ppp/usr/lib/pppd/pppol2tp.so
	$(STRIP) $(INSTALLDIR)/ppp/usr/lib/pppd/*.so

rp-pppoe/src/Makefile: rp-pppoe/src/Makefile.in
	cd rp-pppoe/src && CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	    $(CONFIGURE) --prefix=/usr --enable-plugin=$(TOP)/ppp \
	     ac_cv_linux_kernel_pppoe=yes rpppoe_cv_pack_bitfields=rev

rp-pppoe: ppp rp-pppoe/src/Makefile
	$(MAKE) -C rp-pppoe/src pppoe-relay rp-pppoe.so

rp-pppoe-clean:
	$(MAKE) -C rp-pppoe/src clean

rp-pppoe-install:
	install -D rp-pppoe/src/pppoe-relay $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay
	$(STRIP) $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay
	install -D rp-pppoe/src/rp-pppoe.so $(INSTALLDIR)/rp-pppoe/usr/lib/pppd/rp-pppoe.so
	$(STRIP) $(INSTALLDIR)/rp-pppoe/usr/lib/pppd/rp-pppoe.so

accel-pptp: ppp accel-pptp/pppd_plugin/Makefile
	$(MAKE) -C accel-pptp/pppd_plugin

accel-pptp/pppd_plugin/Makefile: accel-pptp/pppd_plugin/Makefile.in $(LINUXDIR)/include/linux/version.h
	cd accel-pptp/pppd_plugin && CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	    $(CONFIGURE) --prefix=/usr KDIR=$(LINUXDIR) PPPDIR=$(TOP)/ppp

accel-pptp-clean:
	$(MAKE) -C accel-pptp/pppd_plugin clean

accel-pptp-install: accel-pptp
	install -D accel-pptp/pppd_plugin/src/.libs/pptp.so $(INSTALLDIR)/accel-pptp/usr/lib/pppd/pptp.so
	$(STRIP) $(INSTALLDIR)/accel-pptp/usr/lib/pppd/pptp.so

dnsmasq:
	$(MAKE) -C $@ CFLAGS="-Os $(EXTRACFLAGS)" COPTS="$(if $(CONFIG_IPV6),-DUSE_IPV6,)"

dnsmasq-install:
	install -D dnsmasq/src/dnsmasq $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq
	$(STRIP) $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq

dropbear/config.h: dropbear/config.h.in
	cd dropbear && CPPFLAGS="-DARGTYPE=3 $(EXTRACFLAGS)" \
	    LDFLAGS="-Wl,-rpath /lib" \
	    $(CONFIGURE) --disable-zlib --disable-shadow \
	    --disable-lastlog --disable-utmp --disable-utmpx \
	    --disable-wtmp --disable-wtmpx \
	    --disable-libutil --disable-loginfunc --disable-pututline \
	    --disable-pututxline --enable-bundled-libtom

dropbear: dropbear/config.h
	$(MAKE) -C $@ PROGRAMS="dropbear dbclient scp dropbearkey dropbearconvert" MULTI=1 SCPPROGRESS=1

dropbear-install:
	install -D dropbear/dropbearmulti $(INSTALLDIR)/dropbear/usr/sbin/dropbear
	$(STRIP) $(INSTALLDIR)/dropbear/usr/sbin/dropbear
	ln -sf dropbear $(INSTALLDIR)/dropbear/usr/sbin/dropbearkey
	ln -sf dropbear $(INSTALLDIR)/dropbear/usr/sbin/dropbearconvert
	install -d $(INSTALLDIR)/dropbear/usr/bin
	ln -sf ../sbin/dropbear $(INSTALLDIR)/dropbear/usr/bin/ssh
	ln -sf ../sbin/dropbear $(INSTALLDIR)/dropbear/usr/bin/scp

p910nd:
	$(MAKE) -C $@ p910nd CROSS=$(CROSS_COMPILE) CFLAGS="-DLOCKFILE_DIR=\\\"/var/lock\\\" -O2 $(EXTRACFLAGS)"

p910nd-install:
	install -D p910nd/p910nd $(INSTALLDIR)/p910nd/usr/sbin/p910nd
	$(STRIP) $(INSTALLDIR)/p910nd/usr/sbin/p910nd

samba/source/Makefile: samba/source/Makefile.in
	cd samba/source && \
	    CPPFLAGS="-DNDEBUG -DSHMEM_SIZE=524288 -Dfcntl=fcntl64" \
	    CFLAGS="-Os $(EXTRACFLAGS)" \
	    ac_cv_sizeof_int=4 ac_cv_sizeof_long=4 ac_cv_sizeof_short=2 \
	    samba_cv_have_longlong=yes ac_cv_func_memcmp_clean=yes \
	    fu_cv_sys_stat_statvfs64=yes \
	    samba_cv_HAVE_INO64_T=yes samba_cv_HAVE_OFF64_T=yes \
	    samba_cv_SIZEOF_INO_T=yes samba_cv_SIZEOF_OFF_T=yes \
	    samba_cv_FTRUNCATE_NEEDS_ROOT=no samba_cv_HAVE_BROKEN_FCNTL64_LOCKS=no \
	    samba_cv_HAVE_BROKEN_GETGROUPS=no samba_cv_HAVE_BROKEN_READDIR=no \
	    samba_cv_HAVE_FCNTL_LOCK=yes samba_cv_HAVE_FNMATCH=yes \
	    samba_cv_HAVE_FTRUNCATE_EXTEND=yes samba_cv_HAVE_IFACE_AIX=no \
	    samba_cv_HAVE_IFACE_IFCONF=yes samba_cv_HAVE_IFACE_IFREQ=yes \
	    samba_cv_HAVE_IRIX_SPECIFIC_CAPABILITIES=no samba_cv_HAVE_ROOT=yes \
	    samba_cv_HAVE_SECURE_MKSTEMP=yes samba_cv_HAVE_SHARED_MMAP=yes \
	    samba_cv_HAVE_STRUCT_FLOCK64=yes samba_cv_HAVE_SYSV_IPC=no \
	    samba_cv_HAVE_TRUNCATED_SALT=no samba_cv_HAVE_UNION_SEMUN=no \
	    samba_cv_HAVE_UNSIGNED_CHAR=yes samba_cv_NEED_SGI_SEMUN_HACK=no \
	    samba_cv_REPLACE_INET_NTOA=no samba_cv_SYSCONF_SC_NGROUPS_MAX=yes \
	    samba_cv_USE_SETRESUID=no samba_cv_USE_SETREUID=yes \
	    samba_cv_USE_SETEUID=yes samba_cv_USE_SETUIDX=no \
	    samba_cv_have_setresgid=no samba_cv_have_setresuid=no \
	    samba_cv_HAVE_GETTIMEOFDAY_TZ=yes samba_cv_LINUX_LFS_SUPPORT=yes \
	 $(CONFIGURE) --prefix=/usr --localstatedir=/var/log --libdir=/etc \
	    --with-privatedir=/etc --with-lockdir=/var/lock --with-syslog

samba: samba/source/Makefile samba/source/bin/smbd.shared samba/source/bin/nmbd.shared
	$(MAKE) -C samba/source shared

samba-install:
	install -D samba/source/bin/smbd.shared $(INSTALLDIR)/samba/usr/sbin/smbd
	install -D samba/source/bin/nmbd.shared $(INSTALLDIR)/samba/usr/sbin/nmbd
	install -D samba/source/bin/smbpasswd.shared $(INSTALLDIR)/samba/usr/bin/smbpasswd
	install -D samba/source/bin/libsmb.so $(INSTALLDIR)/samba/usr/lib/libsmb.so
	install -d $(INSTALLDIR)/samba/usr/codepages/
	install -D -m 0644 samba/source/codepages/codepage.* $(INSTALLDIR)/samba/usr/codepages
	install -D -m 0644 samba/source/codepages/unicode_map.* $(INSTALLDIR)/samba/usr/codepages
	$(STRIP) $(INSTALLDIR)/samba/usr/sbin/smbd
	$(STRIP) $(INSTALLDIR)/samba/usr/sbin/nmbd
	$(STRIP) $(INSTALLDIR)/samba/usr/bin/smbpasswd
	$(STRIP) $(INSTALLDIR)/samba/usr/lib/libsmb.so

samba-clean:
	$(MAKE) -C samba/source clean

nfs-utils/Makefile: nfs-utils/Makefile.in
	cd nfs-utils && CPPFLAGS="$(EXTRACFLAGS)" knfsd_cv_bsd_signals=no \
	$(CONFIGURE) --enable-nfsv3 --disable-nfsv4 --disable-ipv6 \
	    --disable-uuid --disable-gss --disable-mount \
		--without-tcp-wrappers

nfs-utils: nfs-utils/Makefile
	$(MAKE) -C $@

nfs-utils-install:
	install -D nfs-utils/utils/nfsd/nfsd $(INSTALLDIR)/nfs-utils/usr/sbin/nfsd
	install -D nfs-utils/utils/mountd/mountd $(INSTALLDIR)/nfs-utils/usr/sbin/mountd
	install -D nfs-utils/utils/exportfs/exportfs $(INSTALLDIR)/nfs-utils/usr/sbin/exportfs
	install -D nfs-utils/utils/showmount/showmount $(INSTALLDIR)/nfs-utils/usr/sbin/showmount
	install -D nfs-utils/utils/statd/statd $(INSTALLDIR)/nfs-utils/usr/sbin/statd
	install -D nfs-utils/support/lib/libnfs.so $(INSTALLDIR)/nfs-utils/usr/lib/libnfs.so
	$(STRIP) $(INSTALLDIR)/nfs-utils/usr/sbin/* $(INSTALLDIR)/nfs-utils/usr/lib/libnfs.so

portmap: portmap/Makefile
	$(MAKE) -C $@  EXTRACFLAGS="$(EXTRACFLAGS)" NO_TCP_WRAPPER=y RPCUSER=rpc

portmap-install:
	install -D portmap/portmap $(INSTALLDIR)/portmap/usr/sbin/portmap
	$(STRIP) $(INSTALLDIR)/portmap/usr/sbin/portmap

iproute2: $(LINUXDIR)/include/linux/version.h
	$(MAKE) -C $@ KERNEL_INCLUDE=$(LINUXDIR)/include EXTRACFLAGS="-Os $(EXTRACFLAGS)" EXTRA_LDFLAGS="-Wl,-rpath /lib"

iproute2-install:
	install -D iproute2/ip/ip $(INSTALLDIR)/iproute2/usr/sbin/ip
	install -D iproute2/tc/tc $(INSTALLDIR)/iproute2/usr/sbin/tc
	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/ip
	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/tc

ucd-snmp/Makefile: ucd-snmp/Makefile.in
	cd ucd-snmp && \
	    ac_cv_CAN_USE_SYSCTL=no ac_cv_struct_ifnet_has_if_obytes=yes \
	    ac_cv_struct_ifnet_has_if_ibytes=yes ac_cv_struct_ifnet_has_if_ibytes=yes \
	 $(CONFIGURE) --with-cflags="-g -O2 $(EXTRACFLAGS)" \
	    --disable-debugging --without-opaque-special-types \
	    --with-out-mib-modules="v2party" --with-sys-location=Unknown --with-sys-contact=Administrator \
	    --with-logfile=/var/log/snmpd.log

ucd-snmp: ucd-snmp/Makefile

ucd-snmp-install:
	install -D ucd-snmp/agent/snmpd $(INSTALLDIR)/ucd-snmp/usr/sbin/snmpd
	$(STRIP) $(INSTALLDIR)/ucd-snmp/usr/sbin/snmpd

utils: shared

rp-l2tp/Makefile: rp-l2tp/Makefile.in
	cd rp-l2tp && CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr --sysconfdir=/etc

rp-l2tp: ppp rp-l2tp/Makefile

rp-l2tp-install:
	install -D rp-l2tp/l2tpd $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tpd
	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tpd
	install -D rp-l2tp/handlers/l2tp-control $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tp-control
	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tp-control
	install -d $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins
	install -D rp-l2tp/handlers/*.so $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins
	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins/*.so

xl2tpd: ppp
	CFLAGS="-g -O2 $(EXTRACFLAGS)" \
	$(MAKE) -C $@ xl2tpd PREFIX=/usr

xl2tpd-install:
	install -D xl2tpd/xl2tpd $(INSTALLDIR)/xl2tpd/usr/sbin/xl2tpd
	$(STRIP) $(INSTALLDIR)/xl2tpd/usr/sbin/xl2tpd

igmpproxy/src/Makefile: igmpproxy/src/Makefile.in
	cd igmpproxy && CPPFLAGS="$(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr

igmpproxy: igmpproxy/src/Makefile
	$(MAKE) -C igmpproxy/src

igmpproxy-clean:
	$(MAKE) -C igmpproxy/src clean

igmpproxy-install:
	install -D igmpproxy/src/igmpproxy $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy
	$(STRIP) $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy

vsftpd:
	$(MAKE) -C $@ LDFLAGS="-Wl,-rpath /lib"

vsftpd-install:
	install -D vsftpd/vsftpd $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd
	$(STRIP) $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd

ntfs-3g/Makefile: ntfs-3g/Makefile.in
	cd ntfs-3g && $(CONFIGURE) --enable-shared=no --enable-static=no \
	--disable-library --disable-ldconfig --disable-mount-helper \
	--with-fuse=internal

ntfs-3g: ntfs-3g/Makefile

ntfs-3g-install:
	install -D ntfs-3g/src/ntfs-3g $(INSTALLDIR)/ntfs-3g/usr/sbin/ntfs-3g
	$(STRIP) $(INSTALLDIR)/ntfs-3g/usr/sbin/ntfs-3g
	install -D ntfs-3g/src/ntfs-3g.probe $(INSTALLDIR)/ntfs-3g/usr/sbin/ntfs-3g.probe
	$(STRIP) $(INSTALLDIR)/ntfs-3g/usr/sbin/ntfs-3g.probe
	@mkdir -p $(INSTALLDIR)/ntfs-3g/sbin
	ln -sf ../usr/sbin/ntfs-3g $(INSTALLDIR)/ntfs-3g/sbin/mount.ntfs-3g

udpxy:
	$(MAKE) -C $@ release CDEFS="-O2 $(EXTRACFLAGS)"

udpxy-install:
	install -D udpxy/udpxy $(INSTALLDIR)/udpxy/usr/sbin/udpxy
	$(STRIP) $(INSTALLDIR)/udpxy/usr/sbin/udpxy
	ln -sf udpxy $(INSTALLDIR)/udpxy/usr/sbin/udpxrec

scsi-idle-install:
	$(MAKE) -C scsi-idle DESTDIR=$(INSTALLDIR)/scsi-idle/usr/sbin/ install

libusb10/Makefile: libusb10/Makefile.in
	cd libusb10 && CFLAGS="-O2 $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr ac_cv_lib_rt_clock_gettime=no

libusb10: libusb10/Makefile
	$(MAKE) -C $@

libusb10-install:
	install -D libusb10/libusb/.libs/libusb-1.0.so $(INSTALLDIR)/libusb10/usr/lib/libusb-1.0.so
	$(STRIP) $(INSTALLDIR)/libusb10/usr/lib/*.so

usb_modeswitch: libusb10
	$(MAKE) -C $@ CC=$(CC) CFLAGS="-Wall -Os $(EXTRACFLAGS) \
	    -I$(TOP)/libusb10/libusb -L$(TOP)/libusb10/libusb/.libs -lusb-1.0"

usb_modeswitch-install:
	install -D usb_modeswitch/usb_modeswitch $(INSTALLDIR)/usb_modeswitch/usr/sbin/usb_modeswitch
	$(STRIP) $(INSTALLDIR)/usb_modeswitch/usr/sbin/usb_modeswitch
	install -d $(INSTALLDIR)/usb_modeswitch/usr/share/usb_modeswitch.d/
	install -D -m 0644 usb_modeswitch/data/usb_modeswitch.d/* $(INSTALLDIR)/usb_modeswitch/usr/share/usb_modeswitch.d/

madwimax/Makefile: madwimax/Makefile.in
	cd madwimax && CPPFLAGS="$(EXTRACFLAGS)" PKG_CONFIG=/bin/true \
	    libusb1_CFLAGS="-I$(TOP)/libusb10/libusb" \
	    libusb1_LIBS="-L$(TOP)/libusb10/libusb/.libs -lusb-1.0" \
	$(CONFIGURE) --prefix=/usr --without-man-pages --with-script=wl500g --sysconfdir=/etc

madwimax: libusb10 madwimax/Makefile
	$(MAKE) -C $@

madwimax-install:
	install -D madwimax/src/madwimax $(INSTALLDIR)/madwimax/usr/sbin/madwimax
	$(STRIP) $(INSTALLDIR)/madwimax/usr/sbin/madwimax

lltd: nvram shared
	$(MAKE) -C $@ EXTRACFLAGS="$(EXTRACFLAGS)"

lltd-install: lltd
	install -D lltd/lld2d $(INSTALLDIR)/lltd/usr/sbin/lld2d
	$(STRIP) $(INSTALLDIR)/lltd/usr/sbin/lld2d
	install -D -m 0644 lltd/lld2d.conf $(INSTALLDIR)/lltd/usr/etc/lld2d.conf
	[ ! -f lltd/icons/$(MODEL).ico ] || \
	    install -D -m 0644 lltd/icons/$(MODEL).ico $(INSTALLDIR)/lltd/usr/share/lld2d/icon.ico

wpa_supplicant:
	$(MAKE) -C $@/wpa_supplicant EXTRACFLAGS="-Os $(EXTRACFLAGS)"

wpa_supplicant-install: wpa_supplicant
	install -D wpa_supplicant/wpa_supplicant/wpa_supplicant $(INSTALLDIR)/wpa_supplicant/usr/sbin/wpa_supplicant
	install -D wpa_supplicant/wpa_supplicant/wpa_cli $(INSTALLDIR)/wpa_supplicant/usr/sbin/wpa_cli
	$(STRIP) $(INSTALLDIR)/wpa_supplicant/usr/sbin/*

wpa_supplicant-clean:
	$(MAKE) -C wpa_supplicant/wpa_supplicant clean

udev:
	$(MAKE) -C $@ CROSS_COMPILE=$(CROSS_COMPILE) EXTRACFLAGS="$(EXTRACFLAGS)" \
	    PROGRAMS=udevtrigger LIBUDEV="" udevtrigger

udev-install:
	install -d $(TARGETDIR)
	$(MAKE) -C udev DESTDIR=$(INSTALLDIR) prefix=/udev install-udevtrigger

emf:
	$(MAKE) -C $(SRCBASE)/emf/emfconf CROSS=$(CROSS_COMPILE) EXTRACFLAGS="$(EXTRACFLAGS)"

emf-install:
	$(MAKE) -C $(SRCBASE)/emf/emfconf INSTALLDIR=$(INSTALLDIR) install

igs:
	$(MAKE) -C $(SRCBASE)/emf/igsconf CROSS=$(CROSS_COMPILE) EXTRACFLAGS="$(EXTRACFLAGS)"

igs-install:
	$(MAKE) -C $(SRCBASE)/emf/igsconf INSTALLDIR=$(INSTALLDIR) install

mjpg-streamer: jpeg-8b
	$(MAKE) -C mjpg-streamer/mjpg-streamer CC=$(CC) EXTRACFLAGS="-I$(LINUXDIR)/include -I$(TOP)/jpeg-8b $(EXTRACFLAGS)" LIBS=$(TOP)/jpeg-8b/.libs/libjpeg.a

mjpg-streamer-install:
	$(MAKE) -C mjpg-streamer/mjpg-streamer DESTDIR=$(INSTALLDIR)/mjpg-streamer/usr install
	$(STRIP) $(INSTALLDIR)/mjpg-streamer/usr/bin/mjpg_streamer $(INSTALLDIR)/mjpg-streamer/usr/lib/mjpg-streamer/*.so

mjpg-streamer-clean:
	$(MAKE) -C mjpg-streamer/mjpg-streamer clean

jpeg-8b/Makefile: jpeg-8b/Makefile.in
	cd jpeg-8b && CC=$(CC) CPPFLAGS="-fPIC $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr --disable-shared

jpeg-8b: jpeg-8b/Makefile
	$(MAKE) -C $@ libjpeg.la

jpeg-8b-install:
	@true

LPRng/Makefile: LPRng/Makefile.in
	cd LPRng && CC=$(CC) CPPFLAGS="$(EXTRACFLAGS) -DWINDOW_1 -DTEST_WRITE -DNODEBUG -DLPR_with_ASUS" \
	$(CONFIGURE) --includedir=$(LINUXDIR)/include --disable-werror \
	--disable-kerberos --disable-ssl --disable-mit_kerberos4 \
	--with-userid=root --with-groupid=root --disable-setuid --disable-nls \
	--enable-static

LPRng: LPRng/Makefile
	$(MAKE) -C $@/src TARGET=lpd

LPRng-install:
	install -D LPRng/src/lpd $(INSTALLDIR)/LPRng/usr/sbin/lpd
	$(STRIP) $(INSTALLDIR)/LPRng/usr/sbin/lpd


libpcap/Makefile: libpcap/Makefile.in
	cd libpcap && CFLAGS="-g -Os -isystem$(LINUXDIR)/include $(EXTRACFLAGS)" \
	$(CONFIGURE) --disable-shared --enable-static --disable-yydebug \
	    --with-pcap=linux --without-septel --without-dag \
	    $(if $(CONFIG_IPV6),--enable-ipv6,) ac_cv_linux_vers=2

libpcap: libpcap/Makefile
	$(MAKE) -C $@

libpcap-install:
	@true

tcpdump/Makefile: tcpdump/Makefile.in
	cd tcpdump && CFLAGS="-g -Os $(EXTRACFLAGS) -DTCPDUMP_MINI" \
	$(CONFIGURE) --prefix=/usr --without-crypto \
	    $(if $(CONFIG_IPV6),--enable-ipv6,) \
	    ac_cv_linux_vers=2 td_cv_buggygetaddrinfo=no

tcpdump: libpcap tcpdump/Makefile
	$(MAKE) -C $@ TCPDUMP_MINI=1

tcpdump-install:
	install -D tcpdump/tcpdump $(INSTALLDIR)/tcpdump/usr/sbin/tcpdump
	$(STRIP) $(INSTALLDIR)/tcpdump/usr/sbin/tcpdump

sysfsutils/Makefile: sysfsutils/Makefile.in
	cd sysfsutils && CFLAGS="-Os $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr
	# Create symlink for build of depended apps instead of headers-install
	-mkdir sysfsutils/sys-include
	ln -snf ../include sysfsutils/sys-include/sysfs

sysfsutils: sysfsutils/Makefile
	$(MAKE) -C $@

sysfsutils-install:
	install -D sysfsutils/lib/.libs/libsysfs.so $(INSTALLDIR)/sysfsutils/usr/lib/libsysfs.so
	$(STRIP) $(INSTALLDIR)/sysfsutils/usr/lib/*.so

USBIPDIR=$(LINUXDIR)/drivers/usb/usbip/userspace

$(USBIPDIR)/Makefile: $(USBIPDIR)/Makefile.in
	cd $(USBIPDIR) && \
	CFLAGS="-g -O2 -I$(TOP)/sysfsutils/sys-include $(EXTRACFLAGS)" \
	CPPFLAGS="-I$(TOP)/sysfsutils/sys-include" \
	LDFLAGS="-L$(TOP)/sysfsutils/lib/.libs/" \
	$(CONFIGURE) --prefix=/usr --with-usbids-dir=/opt/share \
	 --without-tcp-wrappers

usbip: sysfsutils $(USBIPDIR)/Makefile
	$(MAKE) -C $(USBIPDIR)

usbip-install: sysfsutils-install
	install -D $(USBIPDIR)/libsrc/.libs/libusbip.so.0 $(INSTALLDIR)/usbip/usr/lib/libusbip.so.0
	$(MAKE) -C $(USBIPDIR)/src install DESTDIR=$(INSTALLDIR)/usbip
	$(STRIP) $(INSTALLDIR)/usbip/usr/lib/libusbip.so.0 $(INSTALLDIR)/usbip/usr/sbin/*

e2fsprogs/Makefile: e2fsprogs/Makefile.in
	cd e2fsprogs && CFLAGS="-Os $(EXTRACFLAGS)" \
	$(CONFIGURE) --prefix=/usr --sysconfdir=/etc --enable-elf-shlibs \
		--disable-rpath --disable-nls \
		--disable-debugfs --disable-imager --disable-resizer --disable-uuidd

e2fsprogs: e2fsprogs/Makefile
	$(MAKE) -C $@

e2fsprogs-install:
	install -D e2fsprogs/lib/libblkid.so.1.0 $(INSTALLDIR)/e2fsprogs/usr/lib/libblkid.so.1.0
	install -D e2fsprogs/lib/libcom_err.so.2.1 $(INSTALLDIR)/e2fsprogs/usr/lib/libcom_err.so.2.1
	install -D e2fsprogs/lib/libe2p.so.2.3 $(INSTALLDIR)/e2fsprogs/usr/lib/libe2p.so.2.3
	install -D e2fsprogs/lib/libext2fs.so.2.4 $(INSTALLDIR)/e2fsprogs/usr/lib/libext2fs.so.2.4
	install -D e2fsprogs/lib/libuuid.so.1.2 $(INSTALLDIR)/e2fsprogs/usr/lib/libuuid.so.1.2
	$(STRIP) $(INSTALLDIR)/e2fsprogs/usr/lib/*.so.*
	ln -sf libblkid.so.1.0 $(INSTALLDIR)/e2fsprogs/usr/lib/libblkid.so.1
	ln -sf libcom_err.so.2.1 $(INSTALLDIR)/e2fsprogs/usr/lib/libcom_err.so.2
	ln -sf libe2p.so.2.3 $(INSTALLDIR)/e2fsprogs/usr/lib/libe2p.so.2
	ln -sf libext2fs.so.2.4 $(INSTALLDIR)/e2fsprogs/usr/lib/libext2fs.so.2
	ln -sf libuuid.so.1.2 $(INSTALLDIR)/e2fsprogs/usr/lib/libuuid.so.1
	install -D e2fsprogs/e2fsck/e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/e2fsck
	install -D e2fsprogs/misc/mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mke2fs
	install -D e2fsprogs/misc/tune2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/tune2fs
	$(STRIP) $(INSTALLDIR)/e2fsprogs/usr/sbin/*
	ln -sf e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/fsck.ext2
	ln -sf e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/fsck.ext3
	ln -sf e2fsck $(INSTALLDIR)/e2fsprogs/usr/sbin/fsck.ext4
	ln -sf mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mkfs.ext2
	ln -sf mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mkfs.ext3
	ln -sf mke2fs $(INSTALLDIR)/e2fsprogs/usr/sbin/mkfs.ext4
	install -D -m 0644 e2fsprogs/e2fsck/e2fsck.conf $(INSTALLDIR)/e2fsprogs/usr/etc/e2fsck.conf

image-%:
	$(MAKE) rc MODEL="$*"
	$(MAKE) package-$* MODEL="$*"

images-%:
	$(MAKE) image-$* LANGUAGE="EN"
#	$(MAKE) image-$* LANGUAGE="KR"
#	$(MAKE) image-$* LANGUAGE="TW"
#	$(MAKE) image-$* LANGUAGE="CN"
#	$(MAKE) image-$* LANGUAGE="JP"

$(img-y) $(img-n): dummy
	$(MAKE) images-$@

images: $(img-y)

#
# Generic rules
#

%:
	[ ! -d $* ] || $(MAKE) -C $* GLOBAL_OPTIONS="$(GLOBAL_OPTIONS)" EXTRACFLAGS="$(EXTRACFLAGS)"

%-clean:
	[ ! -d $* ] || $(MAKE) -C $* clean

%-install:
	[ ! -d $* ] || $(MAKE) -C $* install INSTALLDIR=$(INSTALLDIR)/$*

$(obj-y) $(obj-n) $(obj-clean) $(obj-install): dummy

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy
