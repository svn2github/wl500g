Backport of nf_copy, NF_HOOK_TRESH functions.

diff '-x.*' -urBp linux-2.4.37.9/include/linux/netfilter.h linux-2.4.37.9-ct6/include/linux/netfilter.h
--- linux-2.4.37.9/include/linux/netfilter.h	2010-09-04 18:43:11.000000000 +0400
+++ linux-2.4.37.9-ct6/include/linux/netfilter.h	2010-08-08 11:36:20.000000000 +0400
@@ -118,17 +118,23 @@ extern struct list_head nf_hooks[NPROTO]
 /* This is gross, but inline doesn't cut it for avoiding the function
    call in fast path: gcc doesn't inline (needs value tracking?). --RR */
 #ifdef CONFIG_NETFILTER_DEBUG
-#define NF_HOOK nf_hook_slow
+#define NF_HOOK(pf, hook, skb, indev, outdev, okfn)			\
+(nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN))
+#define NF_HOOK_TRESH nf_hook_slow
 #else
 #define NF_HOOK(pf, hook, skb, indev, outdev, okfn)			\
 (list_empty(&nf_hooks[(pf)][(hook)])					\
  ? (okfn)(skb)								\
- : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn)))
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN))
+#define NF_HOOK_TRESH(pf, hook, skb, indev, outdev, okfn, tresh)			\
+(list_empty(&nf_hooks[(pf)][(hook)])					\
+ ? (okfn)(skb)								\
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), tresh))
 #endif
 
 int nf_hook_slow(int pf, unsigned int hook, struct sk_buff *skb,
 		 struct net_device *indev, struct net_device *outdev,
-		 int (*okfn)(struct sk_buff *));
+		 int (*okfn)(struct sk_buff *), int thresh);
 
 /* Call setsockopt() */
 int nf_setsockopt(struct sock *sk, int pf, int optval, char *opt, 
diff '-x.*' -urBp linux-2.4.37.9/include/linux/skbuff.h linux-2.4.37.9-ct6/include/linux/skbuff.h
--- linux-2.4.37.9/include/linux/skbuff.h	2010-09-04 18:42:59.000000000 +0400
+++ linux-2.4.37.9-ct6/include/linux/skbuff.h	2010-08-08 11:35:54.000000000 +0400
@@ -1220,8 +1220,31 @@ nf_reset(struct sk_buff *skb)
 	skb->nf_debug = 0;
 #endif
 }
+
+/* Note: This doesn't put any conntrack and bridge info in dst. */
+static inline void __nf_copy(struct sk_buff *dst, const struct sk_buff *src)
+{
+	dst->nfmark = src->nfmark;
+	dst->nfcache = src->nfcache;
+	dst->nfct = src->nfct;
+	nf_conntrack_get(src->nfct);
+#ifdef CONFIG_NETFILTER_DEBUG
+	dst->nf_debug = src->nf_debug;
+#endif
+#if defined(CONFIG_IMQ) || defined(CONFIG_IMQ_MODULE)
+	dst->imq_flags = src->imq_flags;
+	dst->nf_info = src->nf_info;
+#endif
+}
+
+static inline void nf_copy(struct sk_buff *dst, const struct sk_buff *src)
+{
+	nf_conntrack_put(dst->nfct);
+	__nf_copy(dst, src);
+}
 #else /* CONFIG_NETFILTER */
 static inline void nf_reset(struct sk_buff *skb) {}
+static inline void __nf_copy(struct sk_buff *dst, const struct sk_buff *src) {}
 #endif /* CONFIG_NETFILTER */
 
 #endif	/* __KERNEL__ */
diff '-x.*' -urBp linux-2.4.37.9/net/core/netfilter.c linux-2.4.37.9-ct6/net/core/netfilter.c
--- linux-2.4.37.9/net/core/netfilter.c	2010-02-14 12:39:16.000000000 +0300
+++ linux-2.4.37.9-ct6/net/core/netfilter.c	2010-08-07 18:20:49.000000000 +0400
@@ -342,10 +342,15 @@ static unsigned int nf_iterate(struct li
 			       const struct net_device *indev,
 			       const struct net_device *outdev,
 			       struct list_head **i,
-			       int (*okfn)(struct sk_buff *))
+			       int (*okfn)(struct sk_buff *),
+			       int hook_thresh)
 {
 	for (*i = (*i)->next; *i != head; *i = (*i)->next) {
 		struct nf_hook_ops *elem = (struct nf_hook_ops *)*i;
+
+		if (hook_thresh > elem->priority)
+			continue;
+
 		switch (elem->hook(hook, skb, indev, outdev, okfn)) {
 		case NF_QUEUE:
 			return NF_QUEUE;
@@ -449,7 +454,8 @@ static void nf_queue(struct sk_buff *skb
 int nf_hook_slow(int pf, unsigned int hook, struct sk_buff *skb,
 		 struct net_device *indev,
 		 struct net_device *outdev,
-		 int (*okfn)(struct sk_buff *))
+		 int (*okfn)(struct sk_buff *),
+		 int hook_thresh)
 {
 	struct list_head *elem;
 	unsigned int verdict;
@@ -481,7 +487,7 @@ int nf_hook_slow(int pf, unsigned int ho
 
 	elem = &nf_hooks[pf][hook];
 	verdict = nf_iterate(&nf_hooks[pf][hook], &skb, hook, indev,
-			     outdev, &elem, okfn);
+			     outdev, &elem, okfn, hook_thresh);
 	if (verdict == NF_QUEUE) {
 		NFDEBUG("nf_hook: Verdict = QUEUE.\n");
 		nf_queue(skb, elem, pf, hook, indev, outdev, okfn);
@@ -530,7 +536,7 @@ void nf_reinject(struct sk_buff *skb, st
 		verdict = nf_iterate(&nf_hooks[info->pf][info->hook],
 				     &skb, info->hook, 
 				     info->indev, info->outdev, &elem,
-				     info->okfn);
+				     info->okfn, INT_MIN);
 	}
 
 	switch (verdict) {
diff '-x.*' -urBp linux-2.4.37.9/net/core/skbuff.c linux-2.4.37.9-ct6/net/core/skbuff.c
--- linux-2.4.37.9/net/core/skbuff.c	2004-10-08 22:56:45.000000000 +0400
+++ linux-2.4.37.9-ct6/net/core/skbuff.c	2010-08-08 11:10:32.000000000 +0400
@@ -395,30 +404,17 @@ struct sk_buff *skb_clone(struct sk_buff
 	C(tail);
 	C(end);
 	n->destructor = NULL;
-#ifdef CONFIG_NETFILTER
-	C(nfmark);
-	C(nfcache);
-	C(nfct);
-#ifdef CONFIG_NETFILTER_DEBUG
-	C(nf_debug);
-#endif
-#endif /*CONFIG_NETFILTER*/
+	__nf_copy(n, skb);
 #if defined(CONFIG_HIPPI)
 	C(private);
 #endif
 #ifdef CONFIG_NET_SCHED
 	C(tc_index);
 #endif
-#if defined(CONFIG_IMQ) || defined(CONFIG_IMQ_MODULE)
-	C(imq_flags);
-	C(nf_info);
-#endif
 
 	atomic_inc(&(skb_shinfo(skb)->dataref));
 	skb->cloned = 1;
-#ifdef CONFIG_NETFILTER
-	nf_conntrack_get(skb->nfct);
-#endif
+
 	return n;
 }
 
@@ -445,22 +441,10 @@ static void copy_skb_header(struct sk_bu
 	new->stamp=old->stamp;
 	new->destructor = NULL;
 	new->security=old->security;
-#ifdef CONFIG_NETFILTER
-	new->nfmark=old->nfmark;
-	new->nfcache=old->nfcache;
-	new->nfct=old->nfct;
-	nf_conntrack_get(new->nfct);
-#ifdef CONFIG_NETFILTER_DEBUG
-	new->nf_debug=old->nf_debug;
-#endif
-#endif
+	__nf_copy(new, old);
 #ifdef CONFIG_NET_SCHED
 	new->tc_index = old->tc_index;
 #endif
-#if defined(CONFIG_IMQ) || defined(CONFIG_IMQ_MODULE)
-	new->imq_flags=old->imq_flags;
-	new->nf_info=old->nf_info;
-#endif
 }
 
 /**
diff '-x.*' -urBp linux-2.4.37.9/net/ipv4/ip_output.c linux-2.4.37.9-ct6/net/ipv4/ip_output.c
--- linux-2.4.37.9/net/ipv4/ip_output.c	2010-02-02 00:04:46.000000000 +0300
+++ linux-2.4.37.9-ct6/net/ipv4/ip_output.c	2010-08-08 11:34:44.000000000 +0400
@@ -838,6 +838,7 @@ int ip_fragment(struct sk_buff *skb, int
 
 		if (skb->sk)
 			skb_set_owner_w(skb2, skb->sk);
+		dst_release(skb2->dst);
 		skb2->dst = dst_clone(skb->dst);
 		skb2->dev = skb->dev;
 
@@ -885,14 +886,7 @@ int ip_fragment(struct sk_buff *skb, int
 		skb2->tc_index = skb->tc_index;
 #endif
 #ifdef CONFIG_NETFILTER
-		skb2->nfmark = skb->nfmark;
-		skb2->nfcache = skb->nfcache;
-		/* Connection association is same as pre-frag packet */
-		skb2->nfct = skb->nfct;
-		nf_conntrack_get(skb2->nfct);
-#ifdef CONFIG_NETFILTER_DEBUG
-		skb2->nf_debug = skb->nf_debug;
-#endif
+		nf_copy(skb2, skb);
 #endif
 
 		/*
diff '-x.*' -urBp linux-2.4.37.9/net/ipv6/ip6_input.c linux-2.4.37.9-ct6/net/ipv6/ip6_input.c
--- linux-2.4.37.9/net/ipv6/ip6_input.c	2010-03-12 20:53:28.000000000 +0300
+++ linux-2.4.37.9-ct6/net/ipv6/ip6_input.c	2010-08-07 20:09:39.000000000 +0400
@@ -165,6 +165,10 @@ static inline int ip6_input_finish(struc
 	if (!pskb_pull(skb, skb->h.raw - skb->data))
 		goto discard;
 
+	/* Free reference early: we don't need it any more, and it may
+	   hold ip_conntrack module loaded indefinitely. */
+	nf_reset(skb);
+
 	if (skb->ip_summed == CHECKSUM_HW)
 		skb->csum = csum_sub(skb->csum,
 				     csum_partial(skb->nh.raw, skb->h.raw-skb->nh.raw, 0));
diff '-x.*' -urBp linux-2.4.37.9/net/ipv6/raw.c linux-2.4.37.9-ct6/net/ipv6/raw.c
--- linux-2.4.37.9/net/ipv6/raw.c	2010-02-02 00:04:46.000000000 +0300
+++ linux-2.4.37.9-ct6/net/ipv6/raw.c	2010-08-07 20:20:37.000000000 +0400
@@ -163,15 +163,17 @@ struct sock * ipv6_raw_deliver(struct sk
 		sk2 = sk;
 
 		while ((sk2 = __raw_v6_lookup(sk2->next, nexthdr, daddr, saddr))) {
-			struct sk_buff *buff;
+			struct sk_buff *clone;
 
 			if (nexthdr == IPPROTO_ICMPV6 &&
 			    icmpv6_filter(sk2, skb))
 				continue;
 
-			buff = skb_clone(skb, GFP_ATOMIC);
-			if (buff)
-				rawv6_rcv(sk2, buff);
+			clone = skb_clone(skb, GFP_ATOMIC);
+			if (clone) {
+				nf_reset(clone);
+				rawv6_rcv(sk2, clone);
+			}
 		}
 	}
 
