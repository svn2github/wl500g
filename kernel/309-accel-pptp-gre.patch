diff -BurpN linux.orig/include/net/gre.h linux/include/net/gre.h
--- linux.orig/include/net/gre.h	1970-01-01 00:00:00.000000000 +0000
+++ linux/include/net/gre.h	2010-08-21 14:27:23.000000000 +0000
@@ -0,0 +1,18 @@
+#ifndef __LINUX_GRE_H
+#define __LINUX_GRE_H
+
+#include <linux/skbuff.h>
+
+#define GREPROTO_CISCO		0
+#define GREPROTO_PPTP		1
+#define GREPROTO_MAX		2
+
+struct gre_protocol {
+	int	(*handler)(struct sk_buff *skb);
+	void	(*err_handler)(struct sk_buff *skb, u32 info);
+};
+
+int gre_add_protocol(struct gre_protocol *proto, u8 version);
+int gre_del_protocol(struct gre_protocol *proto, u8 version);
+
+#endif
diff -BurpN linux.orig/net/ipv4/Config.in linux/net/ipv4/Config.in
--- linux.orig/net/ipv4/Config.in	2005-05-07 12:54:59.000000000 +0000
+++ linux/net/ipv4/Config.in	2010-08-21 14:35:28.000000000 +0000
@@ -24,6 +24,7 @@ if [ "$CONFIG_IP_PNP" = "y" ]; then
 #   bool '    IP: ARP support' CONFIG_IP_PNP_ARP		
 fi
 tristate '  IP: tunneling' CONFIG_NET_IPIP
+tristate '  IP: GRE demultiplexer' CONFIG_NET_IPGRE_DEMUX
 tristate '  IP: GRE tunnels over IP' CONFIG_NET_IPGRE
 if [ "$CONFIG_IP_MULTICAST" = "y" ]; then
    if [ "$CONFIG_NET_IPGRE" != "n" ]; then
diff -BurpN linux.orig/net/ipv4/Makefile linux/net/ipv4/Makefile
--- linux.orig/net/ipv4/Makefile	2010-02-01 21:04:46.000000000 +0000
+++ linux/net/ipv4/Makefile	2010-08-21 14:33:53.000000000 +0000
@@ -9,7 +9,7 @@
 
 O_TARGET := ipv4.o
 
-export-objs = ipip.o ip_gre.o
+export-objs = ipip.o gre.o ip_gre.o
 
 obj-y     := utils.o route.o inetpeer.o proc.o protocol.o \
 	     ip_input.o ip_fragment.o ip_forward.o ip_options.o \
@@ -22,6 +22,7 @@ obj-$(CONFIG_IP_MULTIPLE_TABLES) += fib_
 obj-$(CONFIG_IP_ROUTE_NAT) += ip_nat_dumb.o
 obj-$(CONFIG_IP_MROUTE) += ipmr.o
 obj-$(CONFIG_NET_IPIP) += ipip.o
+obj-$(CONFIG_NET_IPGRE_DEMUX) += gre.o
 obj-$(CONFIG_NET_IPGRE) += ip_gre.o
 obj-$(CONFIG_SYN_COOKIES) += syncookies.o
 obj-$(CONFIG_IP_PNP) += ipconfig.o
diff -BurpN linux.orig/net/ipv4/gre.c linux/net/ipv4/gre.c
--- linux.orig/net/ipv4/gre.c	1970-01-01 00:00:00.000000000 +0000
+++ linux/net/ipv4/gre.c	2010-08-21 14:27:23.000000000 +0000
@@ -0,0 +1,220 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/skbuff.h>
+#include <linux/in.h>
+#include <linux/netdevice.h>
+#include <linux/version.h>
+#include <linux/spinlock.h>
+#include <net/protocol.h>
+
+#include "gre.h"
+
+struct gre_protocol *gre_proto[GREPROTO_MAX] ____cacheline_aligned_in_smp;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+static rwlock_t gre_proto_lock=RW_LOCK_UNLOCKED;
+#else
+static DEFINE_SPINLOCK(gre_proto_lock);
+#endif
+
+int gre_add_protocol(struct gre_protocol *proto, u8 version)
+{
+	int ret;
+
+	if (version >= GREPROTO_MAX)
+		return -EINVAL;
+	
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	write_lock_bh(&gre_proto_lock);
+#else
+	spin_lock(&gre_proto_lock);
+#endif
+	if (gre_proto[version]) {
+		ret = -EAGAIN;
+	} else {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+		gre_proto[version] = proto;
+#else
+		rcu_assign_pointer(gre_proto[version], proto);
+#endif
+		ret = 0;
+	}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	write_unlock_bh(&gre_proto_lock);
+#else
+	spin_unlock(&gre_proto_lock);
+#endif
+
+	return ret;
+}
+
+int gre_del_protocol(struct gre_protocol *proto, u8 version)
+{
+	if (version >= GREPROTO_MAX)
+		goto out_err;
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	write_lock_bh(&gre_proto_lock);
+#else
+	spin_lock(&gre_proto_lock);
+#endif
+	if (gre_proto[version] == proto)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+		gre_proto[version] = NULL;
+#else
+		rcu_assign_pointer(gre_proto[version], NULL);
+#endif
+	else
+		goto out_err_unlock;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	write_unlock_bh(&gre_proto_lock);
+#else
+	spin_unlock(&gre_proto_lock);
+	synchronize_rcu();
+#endif
+	return 0;
+
+out_err_unlock:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	write_unlock_bh(&gre_proto_lock);
+#else
+	spin_unlock(&gre_proto_lock);
+#endif
+out_err:
+	return -EINVAL;
+}
+
+static int gre_rcv(struct sk_buff *skb)
+{
+	u8 ver;
+	int ret;
+	struct gre_protocol *proto;
+
+	if (!pskb_may_pull(skb, 12))
+		goto drop_nolock;
+
+	ver = skb->data[1]&0x7f;
+	if (ver >= GREPROTO_MAX)
+		goto drop_nolock;
+	
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	read_lock(&gre_proto_lock);
+	proto = gre_proto[ver];
+#else
+	rcu_read_lock();
+	proto = rcu_dereference(gre_proto[ver]);
+#endif
+	if (!proto || !proto->handler)
+		goto drop;
+
+	ret = proto->handler(skb);
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	read_unlock(&gre_proto_lock);
+#else
+	rcu_read_unlock();
+#endif
+
+	return ret;
+
+drop:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	read_unlock(&gre_proto_lock);
+#else
+	rcu_read_unlock();
+#endif
+drop_nolock:
+	kfree_skb(skb);
+	return NET_RX_DROP;
+}
+
+static void gre_err(struct sk_buff *skb, u32 info)
+{
+	u8 ver;
+	struct gre_protocol *proto;
+
+	if (!pskb_may_pull(skb, 12))
+		goto drop_nolock;
+
+	ver=skb->data[1]&0x7f;
+	if (ver>=GREPROTO_MAX)
+		goto drop_nolock;
+		
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	read_lock(&gre_proto_lock);
+	proto = gre_proto[ver];
+#else
+	rcu_read_lock();
+	proto = rcu_dereference(gre_proto[ver]);
+#endif
+	if (!proto || !proto->err_handler)
+		goto drop;
+
+	proto->err_handler(skb, info);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	read_unlock(&gre_proto_lock);
+#else
+	rcu_read_unlock();
+#endif
+
+	return;
+
+drop:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	read_unlock(&gre_proto_lock);
+#else
+	rcu_read_unlock();
+#endif
+drop_nolock:
+	kfree_skb(skb);
+}
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+static struct inet_protocol net_gre_protocol = {
+	.handler	= gre_rcv,
+	.err_handler	= gre_err,
+	.protocol	= IPPROTO_GRE,
+	.name		= "GRE",
+};
+#else
+static struct net_protocol net_gre_protocol = {
+	.handler	= gre_rcv,
+	.err_handler	= gre_err,
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,24)
+	.netns_ok=1,
+#endif
+};
+#endif
+
+static int __init gre_init(void)
+{
+	printk(KERN_INFO "GRE over IPv4 demultiplexor driver");
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	inet_add_protocol(&net_gre_protocol);
+#else
+	if (inet_add_protocol(&net_gre_protocol, IPPROTO_GRE) < 0) {
+		printk(KERN_INFO "gre: can't add protocol\n");
+		return -EAGAIN;
+	}
+#endif
+	return 0;
+}
+
+static void __exit gre_exit(void)
+{
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	inet_del_protocol(&net_gre_protocol);
+#else
+	inet_del_protocol(&net_gre_protocol, IPPROTO_GRE);
+#endif
+}
+
+module_init(gre_init);
+module_exit(gre_exit);
+
+MODULE_DESCRIPTION("GRE over IPv4 demultiplexor driver");
+MODULE_AUTHOR("Kozlov D. (xeb@mail.ru)");
+MODULE_LICENSE("GPL");
+EXPORT_SYMBOL_GPL(gre_add_protocol);
+EXPORT_SYMBOL_GPL(gre_del_protocol);
--- linux.orig/net/ipv4/ip_gre.c	2010-02-01 21:04:46.000000000 +0000
+++ linux/net/ipv4/ip_gre.c	2010-08-21 15:01:12.000000000 +0000
@@ -38,6 +38,10 @@
 #include <net/checksum.h>
 #include <net/inet_ecn.h>
 
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+#include <net/gre.h>
+#endif
+
 #ifdef CONFIG_IPV6
 #include <net/ipv6.h>
 #include <net/ip6_fib.h>
@@ -1243,7 +1247,12 @@ int __init ipgre_fb_tunnel_init(struct n
 	return 0;
 }
 
-
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+static struct gre_protocol ipgre_protocol = {
+	.handler	= ipgre_rcv,
+	.err_handler	= ipgre_err,
+};
+#else
 static struct inet_protocol ipgre_protocol = {
   ipgre_rcv,             /* GRE handler          */
   ipgre_err,             /* TUNNEL error control */
@@ -1253,7 +1262,7 @@ static struct inet_protocol ipgre_protoc
   NULL,                 /* data                 */
   "GRE"                 /* name                 */
 };
-
+#endif
 
 /*
  *	And now the modules code and kernel interface.
@@ -1269,7 +1278,12 @@ int __init ipgre_init(void)
 
 	ipgre_fb_tunnel_dev.priv = (void*)&ipgre_fb_tunnel;
 	register_netdev(&ipgre_fb_tunnel_dev);
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+	if (gre_add_protocol(&ipgre_protocol, GREPROTO_CISCO) < 0)
+		printk(KERN_INFO "ipgre close: can't add protocol\n");
+#else
 	inet_add_protocol(&ipgre_protocol);
+#endif
 	return 0;
 }
 
@@ -1277,7 +1291,11 @@ int __init ipgre_init(void)
 
 void cleanup_module(void)
 {
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+	if (gre_del_protocol(&ipgre_protocol, GREPROTO_CISCO) < 0)
+#else
 	if ( inet_del_protocol(&ipgre_protocol) < 0 )
+#endif
 		printk(KERN_INFO "ipgre close: can't remove protocol\n");
 
 	unregister_netdev(&ipgre_fb_tunnel_dev);
