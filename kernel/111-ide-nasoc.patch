diff -uBp linuz/drivers/ide/ide.c linux/drivers/ide/ide.c
--- linuz/drivers/ide/ide.c	2004-12-03 05:56:49.000000000 +0300
+++ linux/drivers/ide/ide.c	2007-04-22 15:35:47.409102272 +0400
@@ -2008,7 +2062,11 @@
 	minor = drive->select.b.unit << PARTN_BITS;
 	hwgroup = HWGROUP(drive);
 	spin_lock_irqsave(&io_request_lock, flags);
+#if 0 /* NASoC */
 	if (drive->busy || (drive->usage > 1)) {
+#else
+	if (drive->busy) {
+#endif
 		spin_unlock_irqrestore(&io_request_lock, flags);
 		return -EBUSY;
 	};
@@ -2712,6 +2774,14 @@
 {
 #ifndef CONFIG_BLK_DEV_IDECS
 	mdelay(50);
+#ifdef CONFIG_BCM4780
+{
+	int i;
+	for (i = 0; i < 10; i++) {
+	    mdelay(50);
+	}
+}
+#endif
 #else
 	__set_current_state(TASK_UNINTERRUPTIBLE);
 	schedule_timeout(HZ/20);
diff -uBp linuz/drivers/ide/ide-disk.c linux/drivers/ide/ide-disk.c
--- linuz/drivers/ide/ide-disk.c
+++ linux/drivers/ide/ide-disk.c
@@ -463,7 +463,7 @@ ide_startstop_t __ide_do_rw_disk (ide_dr
 			   ((lba48) ? WIN_MULTREAD_EXT : WIN_MULTREAD) :
 			   ((lba48) ? WIN_READ_EXT : WIN_READ));
 	
-		ide_execute_command(drive, command, &read_intr, WAIT_CMD, NULL);
+		ide_execute_command(drive, command, &read_intr, WAIT_WORSTCASE, NULL);
 		return ide_started;
 	} else if (rq_data_dir(rq) == WRITE) {
 		ide_startstop_t startstop;
@@ -476,6 +476,7 @@ ide_startstop_t __ide_do_rw_disk (ide_dr
 			   ((lba48) ? WIN_MULTWRITE_EXT : WIN_MULTWRITE) :
 			   ((lba48) ? WIN_WRITE_EXT : WIN_WRITE));
 		hwif->OUTB(command, IDE_COMMAND_REG);
+		ndelay(400);
 
 		if (ide_wait_stat(&startstop, drive, DATA_READY,
 				drive->bad_wstat, WAIT_DRQ)) {
diff -uBp linuz/drivers/ide/ide-probe.c linux/drivers/ide/ide-probe.c
--- linuz/drivers/ide/ide-probe.c	2007-04-07 22:58:01.000000000 +0400
+++ linux/drivers/ide/ide-probe.c	2007-04-22 15:35:46.371260048 +0400
@@ -454,10 +454,26 @@
 		(cmd == WIN_IDENTIFY) ? "ATA" : "ATAPI");
 #endif
 
-	/* needed for some systems
-	 * (e.g. crw9624 as drive0 with disk as slave)
-	 */
-	ide_delay_50ms();
+	if ((hwif->INB(IDE_STATUS_REG)) & BUSY_STAT) {
+		unsigned long timeout;
+		timeout = jiffies;
+		printk("IDE: While probing, found an IDE channel that is "
+			"busy (%s).\n", drive->name);
+		printk("IDE: Probably, this means the drive hasn't spun up "
+			"yet.\n");
+		printk("IDE: We'll wait for it to spin up (but no more than 30"
+			" seconds).\n");
+		do {
+			ide_delay_50ms();
+		} while (((hwif->INB(IDE_STATUS_REG)) & BUSY_STAT) &&
+			 time_before(jiffies, timeout + WAIT_WORSTCASE));
+		if (!time_before(jiffies, timeout + WAIT_WORSTCASE)) {
+		    printk("IDE: Timed out waiting for drive %s to spin up.\n", drive->name);
+		} else {
+		    printk("IDE: The IDE channel is not busy any more, so we can "
+			    "continue probing.\n");
+		}
+	}
 	SELECT_DRIVE(drive);
 	ide_delay_50ms();
 	if (hwif->INB(IDE_SELECT_REG) != drive->select.all && !drive->present) {
@@ -1224,7 +1224,7 @@ static void init_gendisk (ide_hwif_t *hw
 		 * IDE can do up to 128K per request == 256
 		 */
 		*max_sect++ = ((hwif->rqsize) ? hwif->rqsize : 128);
-		*max_ra++ = vm_max_readahead;
+		*max_ra++ = ((128*4) >> (PAGE_SHIFT - 10)) - 1; /* sequential read with 4 requests 128k large DMA */
 	}
 
 	for (unit = 0; unit < units; ++unit)
diff -uB a/include/asm-mips/ide.h b/include/asm-mips/ide.h
--- a/include/asm-mips/ide.h
+++ b/include/asm-mips/ide.h
@@ -16,11 +16,7 @@
 #include <asm/io.h>
 
 #ifndef MAX_HWIFS
-# ifdef CONFIG_BLK_DEV_IDEPCI
-#define MAX_HWIFS	10
-# else
-#define MAX_HWIFS	6
-# endif
+#define MAX_HWIFS	2
 #endif
 
 struct ide_ops {
