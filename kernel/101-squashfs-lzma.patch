This patch adds LZMA support to the squashfs code, you should also
change mksquashfs appropriately.

Oleg I. Vdovikin <oleg@cs.msu.su>

--- linuz/fs/squashfs/inode.c	2004-12-15 22:56:47.000000000 +0300
+++ linux/fs/squashfs/inode.c	2005-01-20 20:27:27.490010968 +0300
@@ -3,6 +3,9 @@
  *
  * Copyright (c) 2002, 2003, 2004 Phillip Lougher <plougher@users.sourceforge.net>
  *
+ * LZMA decompressor support added by Oleg I. Vdovikin
+ * Copyright (c) 2005 Oleg I.Vdovikin <oleg@cs.msu.su>
+ *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
  * as published by the Free Software Foundation; either version 2,
@@ -21,7 +24,11 @@
  * inode.c
  */
 
+#define SQUASHFS_LZMA
+
+#ifndef SQUASHFS_LZMA
 #define SQUASHFS_1_0_COMPATIBILITY
+#endif
 
 #include <linux/types.h>
 #include <linux/squashfs_fs.h>
@@ -39,6 +46,20 @@
 #include <linux/blkdev.h>
 #include <linux/vmalloc.h>
 
+#ifdef SQUASHFS_LZMA
+#define _7ZIP_BYTE_DEFINED
+#include "LzmaDecode.h"
+
+/* default LZMA settings, should be in sync with mksquashfs */
+#define LZMA_LC 3
+#define LZMA_LP 0
+#define LZMA_PB 2
+
+#define LZMA_WORKSPACE_SIZE ((LZMA_BASE_SIZE + \
+	(LZMA_LIT_SIZE << (LZMA_LC + LZMA_LP))) * sizeof(CProb))
+
+#endif
+
 #ifdef SQUASHFS_TRACE
 #define TRACE(s, args...)				printk(KERN_NOTICE "SQUASHFS: "s, ## args)
 #else
@@ -77,7 +97,11 @@
 
 DECLARE_MUTEX(read_data_mutex);
 
+#ifdef SQUASHFS_LZMA
+static unsigned char lzma_workspace[LZMA_WORKSPACE_SIZE];
+#else
 static z_stream stream;
+#endif
 
 static DECLARE_FSTYPE_DEV(squashfs_fs_type, "squashfs", squashfs_read_super);
 
@@ -232,6 +256,15 @@
 	if(compressed) {
 		int zlib_err;
 
+#ifdef SQUASHFS_LZMA
+		CLzmaDecoderState vs;
+		vs.Properties.lc = LZMA_LC; vs.Properties.lp = LZMA_LP; vs.Properties.pb = LZMA_PB;
+		vs.Probs = (CProb *)lzma_workspace;
+		if ((zlib_err = LzmaDecode(&vs, 
+			c_buffer, c_byte, &avail_bytes, 
+			buffer, msBlk->read_size, &bytes)) != LZMA_RESULT_OK)
+		{
+			ERROR("lzma returned unexpected result 0x%x\n", zlib_err);
+			bytes = 0;
+		}
+#else
 		stream.next_in = c_buffer;
 		stream.avail_in = c_byte;
 		stream.next_out = buffer;
@@ -243,6 +276,7 @@
 			bytes = 0;
 		} else
 			bytes = stream.total_out;
+#endif
 		up(&read_data_mutex);
 	}
 
@@ -1491,17 +1525,21 @@
 static int __init init_squashfs_fs(void)
 {
 
+#ifndef SQUASHFS_LZMA
 	if(!(stream.workspace = (char *) vmalloc(zlib_inflate_workspacesize()))) {
 		ERROR("Failed to allocate zlib workspace\n");
 		return -ENOMEM;
 	}
+#endif
 	return register_filesystem(&squashfs_fs_type);
 }
 
 
 static void __exit exit_squashfs_fs(void)
 {
+#ifndef SQUASHFS_LZMA
 	vfree(stream.workspace);
+#endif
 	unregister_filesystem(&squashfs_fs_type);
 }
 
--- linuz/fs/squashfs/Makefile	2004-12-15 22:56:47.000000000 +0300
+++ linux/fs/squashfs/Makefile	2009-10-05 20:26:23.000000000 +0400
@@ -4,8 +4,12 @@
 
 O_TARGET := squashfs.o
 
-obj-y  := inode.o
+obj-y  := inode.o LzmaDecode.o
 
 obj-m := $(O_TARGET)
 
+LZMADIR = $(SRCBASE)/lzma/C/Compress/Lzma
+EXTRA_CFLAGS += -I$(LZMADIR)
+vpath %.c $(LZMADIR)
+
 include $(TOPDIR)/Rules.make
