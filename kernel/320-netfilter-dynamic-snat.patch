--- linux-2.4.37/net/ipv4/netfilter/ip_nat_rule.c	2008-12-02 13:01:34.000000000 +0500
+++ linux/net/ipv4/netfilter/ip_nat_rule.c	2009-02-23 16:52:33.000000000 +0500
@@ -28,6 +28,13 @@
 
 #define NAT_VALID_HOOKS ((1<<NF_IP_PRE_ROUTING) | (1<<NF_IP_POST_ROUTING) | (1<<NF_IP_LOCAL_OUT))
 
+#if defined(CONFIG_IP_NF_TARGET_MASQUERADE) || \
+	defined(CONFIG_IP_NF_TARGET_MASQUERADE_MODULE)
+#define CONFIG_IP_NF_TARGET_TRACKSNAT
+/* Lock protects snat region inside conntrack */
+static DECLARE_RWLOCK(snat_lock);
+#endif
+
 /* Standard entry. */
 struct ipt_standard
 {
@@ -125,6 +132,12 @@ static unsigned int ipt_snat_target(stru
 	                    || ctinfo == IP_CT_RELATED + IP_CT_IS_REPLY));
 	IP_NF_ASSERT(out);
 
+#ifdef CONFIG_IP_NF_TARGET_TRACKSNAT
+	WRITE_LOCK(&snat_lock);
+	ct->nat.masq_index = out->ifindex;
+	WRITE_UNLOCK(&snat_lock);
+#endif
+
 	return ip_nat_setup_info(ct, targinfo, hooknum);
 }
 
@@ -281,6 +294,58 @@ int ip_nat_rule_find(struct sk_buff **ps
 	return ret;
 }
 
+#ifdef CONFIG_IP_NF_TARGET_TRACKSNAT
+static inline int
+device_cmp(struct ip_conntrack *i, void *ifindex)
+{
+	int ret;
+
+	READ_LOCK(&snat_lock);
+	ret = (i->nat.masq_index == (int)(long)ifindex);
+	READ_UNLOCK(&snat_lock);
+
+	return ret;
+}
+
+static int snat_device_event(struct notifier_block *this,
+			     unsigned long event,
+			     void *ptr)
+{
+	struct net_device *dev = ptr;
+
+	if (event == NETDEV_DOWN) {
+		/* Device was downed.  Search entire table for
+		   conntracks which were associated with that device,
+		   and forget them. */
+		/* IP address was deleted.  Search entire table for
+		   conntracks which were associated with that device,
+		   and forget them. */
+		IP_NF_ASSERT(dev->ifindex != 0);
+ 
+		ip_ct_iterate_cleanup(device_cmp, (void *)(long)dev->ifindex);
+	}
+
+	return NOTIFY_DONE;
+}
+
+
+static int snat_inet_event(struct notifier_block *this,
+			   unsigned long event,
+			   void *ptr)
+{
+	struct net_device *dev = ((struct in_ifaddr *)ptr)->ifa_dev->dev;
+	return snat_device_event(this, event, dev);
+}
+
+static struct notifier_block snat_dev_notifier = {
+	.notifier_call  = snat_device_event,
+};
+
+static struct notifier_block snat_inet_notifier = {
+	.notifier_call = snat_inet_event
+};
+#endif
+
 static struct ipt_target ipt_snat_reg
 = { { NULL, NULL }, "SNAT", ipt_snat_target, ipt_snat_checkentry, NULL };
 static struct ipt_target ipt_dnat_reg
@@ -301,6 +366,13 @@ int __init ip_nat_rule_init(void)
 	if (ret != 0)
 		goto unregister_snat;
 
+#ifdef CONFIG_IP_NF_TARGET_TRACKSNAT
+	/* Register for device down reports */
+	register_netdevice_notifier(&snat_dev_notifier);
+	/* Register IP address change reports */
+	register_inetaddr_notifier(&snat_inet_notifier);
+#endif
+
 	return ret;
 
  unregister_snat:
@@ -316,4 +388,9 @@ void ip_nat_rule_cleanup(void)
 	ipt_unregister_target(&ipt_dnat_reg);
 	ipt_unregister_target(&ipt_snat_reg);
 	ipt_unregister_table(&nat_table);
+
+#ifdef CONFIG_IP_NF_TARGET_TRACKSNAT
+	unregister_netdevice_notifier(&snat_dev_notifier);
+	unregister_inetaddr_notifier(&snat_inet_notifier);
+#endif
 }
