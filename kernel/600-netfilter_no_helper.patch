Restore ability to add expectation to connections without helper.
Needed by autofw.

--- linuz/net/ipv4/netfilter/ip_conntrack_core.c	2009-12-11 21:52:22.000000000 +0300
+++ linux/net/ipv4/netfilter/ip_conntrack_core.c	2009-12-11 21:50:57.000000000 +0300
@@ -252,11 +252,11 @@ static void __unexpect_related(struct ip
 static void unexpect_related(struct ip_conntrack_expect *expect)
 {
 	IP_NF_ASSERT(expect->expectant);
-	IP_NF_ASSERT(expect->expectant->helper);
 	/* if we are supposed to have a timer, but we can't delete
 	 * it: race condition.  __unexpect_related will
 	 * be calledd by timeout function */
-	if (expect->expectant->helper->timeout
+	if (expect->expectant->helper
+	    && expect->expectant->helper->timeout
 	    && !del_timer(&expect->timeout))
 		return;
 
@@ -746,6 +746,7 @@ init_conntrack(const struct ip_conntrack
 
 	/* If the expectation is dying, then this is a looser. */
 	if (expected
+	    && expected->expectant->helper
 	    && expected->expectant->helper->timeout
 	    && ! del_timer(&expected->timeout))
 		expected = NULL;
@@ -996,7 +997,7 @@ int ip_conntrack_expect_related(struct i
 		   the data filled out by the helper over the old one */
 		DEBUGP("expect_related: resent packet\n");
 		if (old->expectant == related_to &&
-		    related_to->helper->timeout) {
+		    related_to->helper && related_to->helper->timeout) {
 			if (!del_timer(&old->timeout)) {
 				/* expectation is dying. Fall through */
 				old = NULL;
@@ -1011,7 +1012,7 @@ int ip_conntrack_expect_related(struct i
 			WRITE_UNLOCK(&ip_conntrack_lock);
 			return -EEXIST;
 		}
-	} else if (related_to->helper->max_expected && 
+	} else if (related_to->helper && related_to->helper->max_expected && 
 		   related_to->expecting >= related_to->helper->max_expected) {
 DEBUGP("expect_related: new packet\n");
 		/* old == NULL */
@@ -1081,7 +1082,8 @@ DEBUGP("expect_related: new packet\n");
 	/* add to global list of expectations */
 	list_prepend(&ip_conntrack_expect_list, &new->list);
 	/* add and start timer if required */
-	if (related_to->helper->timeout) {
+	if (related_to->helper &&
+	    related_to->helper->timeout) {
 		init_timer(&new->timeout);
 		new->timeout.data = (unsigned long)new;
 		new->timeout.function = expectation_timed_out;
--- linuz/net/ipv4/netfilter/ip_conntrack_standalone.c	2009-12-11 21:49:58.000000000 +0300
+++ linux/net/ipv4/netfilter/ip_conntrack_standalone.c	2009-12-11 21:50:26.000000000 +0300
@@ -65,7 +65,7 @@ print_expect(char *buffer, const struct
 {
 	unsigned int len;
 
-	if (expect->expectant->helper->timeout)
+	if (expect->expectant->helper && expect->expectant->helper->timeout)
 		len = sprintf(buffer, "EXPECTING: %lu ",
 			      timer_pending(&expect->timeout)
 			      ? (expect->timeout.expires - jiffies)/HZ : 0);
