diff -BurpN linux-2.4.37.7/drivers/net/pptp.c linux/drivers/net/pptp.c
--- linux-2.4.37.7/drivers/net/pptp.c	2009-12-05 12:07:43.000000000 +0000
+++ linux/drivers/net/pptp.c	2009-12-05 12:07:53.000000000 +0000
@@ -31,13 +31,13 @@
 #include <linux/netfilter_ipv4.h>
 #include <linux/version.h>
 #include <linux/spinlock.h>
-#include <linux/kthread.h>
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 #include <linux/tqueue.h>
 #include <linux/timer.h>
 #include <asm/bitops.h>
 #else
+#include <linux/kthread.h>
 #include <linux/workqueue.h>
 #endif
 
@@ -59,13 +59,16 @@ MODULE_LICENSE("GPL");
 
 static int log_level=0;
 static int log_packets=10;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 static int smp_affinity=0xffffffff;
+#endif
 
 #define MAX_CALLID 65535
 
 static unsigned long *callid_bitmap=NULL;
 static struct pppox_sock **callid_sock=NULL;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 struct task_struct **thread_list=NULL;
 static struct sk_buff_head rxq;
 static struct sk_buff_head txq;
@@ -73,7 +76,7 @@ static DEFINE_SPINLOCK(rxq_lock);
 static DEFINE_SPINLOCK(txq_lock);
 static DECLARE_WAIT_QUEUE_HEAD(rxq_wait);
 static DECLARE_WAIT_QUEUE_HEAD(txq_wait);
-
+#endif
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 MODULE_PARM(log_level,"i");
@@ -491,11 +494,15 @@ static int pptp_xmit(struct ppp_channel 
 	skb->ip_summed = CHECKSUM_NONE;
 	ip_select_ident(iph, &rt->u.dst, NULL);
 	ip_send_check(iph);
-	
+
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	err = NF_HOOK(PF_INET, NF_IP_LOCAL_OUT, skb, NULL, rt->u.dst.dev, ip_send);
+	#else
 	spin_lock_bh(&txq_lock);
 	skb_queue_tail(&txq,skb);
 	spin_unlock_bh(&txq_lock);
 	wake_up(&txq_wait);
+	#endif
 
 tx_error:
 	return 1;
@@ -690,6 +697,7 @@ drop:
 	return NET_RX_DROP;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 static int __pptp_rcv(struct sk_buff *skb)
 {
 	spin_lock_bh(&rxq_lock);
@@ -698,6 +706,7 @@ static int __pptp_rcv(struct sk_buff *sk
 	wake_up(&rxq_wait);
 	return NET_RX_SUCCESS;
 }
+#endif
 
 static int pptp_bind(struct socket *sock,struct sockaddr *uservaddr,int sockaddr_len)
 {
@@ -1079,7 +1088,7 @@ static struct pppox_proto pppox_pptp_pro
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 static struct inet_protocol net_pptp_protocol = {
-	.handler	= __pptp_rcv,
+	.handler	= pptp_rcv,
 	//.err_handler	=	pptp_err,
 	.protocol = IPPROTO_GRE,
 	.name     = "PPTP",
@@ -1091,6 +1100,7 @@ static struct net_protocol net_pptp_prot
 };
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 static int worker_thread_rx(void*p)
 {
 	struct sk_buff *skb;
@@ -1135,20 +1145,25 @@ static int worker_thread_tx(void*p)
 		finish_wait(&txq_wait,&wait);
 	}
 }
+#endif
 
 static int pptp_init_module(void)
 {
 	int err=0;
+	#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 	int i;
 	struct task_struct *t;
+	#endif
 
 	printk(KERN_INFO "PPTP driver version " PPTP_DRIVER_VERSION "\n");
 
+	#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 	skb_queue_head_init(&rxq);
 	skb_queue_head_init(&txq);
 
 	thread_list=kzalloc(num_present_cpus()*sizeof(*thread_list)*2,GFP_KERNEL);
 	if (!thread_list) return -ENOMEM;
+	#endif
 
 	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 	inet_add_protocol(&net_pptp_protocol);
@@ -1201,6 +1216,7 @@ static int pptp_init_module(void)
   #error unknown size of LONG
   #endif
 
+	#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 	for(i=0; i<num_present_cpus(); i++){
 		if (smp_affinity&(1<<i)) {
 			t=kthread_create(worker_thread_rx,NULL,"%s-%d","pptp-rx",i);
@@ -1222,15 +1238,18 @@ static int pptp_init_module(void)
 			thread_list[i*2+1]=t;
 		}
 	}
+	#endif
 
 out:
 	return err;
+	#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 out_threads:
 	for(i=0; i<num_present_cpus()*2; i++)
 		if (thread_list[i]){
 			kthread_stop(thread_list[i]);
 			kfree(thread_list[i]);
 		}
+	#endif
 out_unregister_pppox_proto:
 	unregister_pppox_proto(PX_PROTO_PPTP);
 out_unregister_sk_proto:
@@ -1252,6 +1271,7 @@ out_inet_del_protocol:
 
 static void pptp_exit_module(void)
 {	
+	#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 	int i;
 
 	spin_lock_bh(&rxq_lock);
@@ -1267,6 +1287,7 @@ static void pptp_exit_module(void)
 			kthread_stop(thread_list[i]);
 			kfree(thread_list[i]);
 		}
+	#endif
 
 	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
 	flush_scheduled_tasks();
