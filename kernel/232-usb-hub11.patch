 Workaround for USB 1.1 device connected via high-speed USB 2.0 hub
 on Broadcom 4704 platform. Symptoms of bug in syslog.log:
    "usb.c: unable to get device descriptor (error=-32)"
 
 Signed-off-by: Leonid Lisovskiy <lly@sf.net>

diff -urbB linux/drivers/usb.old/hub.c linux/drivers/usb/hub.c
--- linux/drivers/usb/hub.c	2008-12-02 11:01:34.000000000 +0300
+++ linuz/drivers/usb/hub.c	2008-12-05 22:13:02.000000000 +0300
@@ -716,7 +716,7 @@ static void usb_hub_port_connect_change(
 		return;
 	}
 
-	if (usb_hub_port_debounce(hub, port)) {
+	if (usb_hub_port_debounce(hub, port)<0) {
 		err("connect-debounce failed, port %d disabled", port+1);
 		usb_hub_port_disable(hub, port);
 		return;
@@ -758,6 +756,13 @@
 		info("new USB device %s-%s, assigned address %d",
 			dev->bus->bus_name, dev->devpath, dev->devnum);
 
+                /* check for devices running slower than they could */
+                if (dev->speed == USB_SPEED_FULL || dev->speed == USB_SPEED_LOW)
+		{
+		    dbg("USB 1.1 device - waiting 20ms");
+		    wait_ms(20);
+		}
+
 		/* Run it through the hoops (find a driver, etc) */
 		if (!usb_new_device(dev)) {
 			hub->children[port] = dev;
diff -urbB linux/drivers/usb.old/usb.c linux/drivers/usb/usb.c
--- linux/drivers/usb/usb.c	2008-12-02 11:01:34.000000000 +0300
+++ linuz/drivers/usb/usb.c	2008-12-06 23:47:49.000000000 +0300
@@ -2264,6 +2264,49 @@
 	dev->epmaxpacketin [0] = dev->descriptor.bMaxPacketSize0;
 	dev->epmaxpacketout[0] = dev->descriptor.bMaxPacketSize0;
 
+	if (dev->ttport) {
+
+	    dbg("device via USB hub");
+
+	// lly: This piece of code stolen from 2.6 tree
+	//	hub.c: hub_port_init()
+	    struct usb_device_descriptor *buf;
+	    int j, r = 0;
+
+#define GET_DESCRIPTOR_BUFSIZE  64
+	    buf = kmalloc(GET_DESCRIPTOR_BUFSIZE, GFP_NOIO);
+	    if (!buf) {
+		return 1;
+	    }
+
+	    for (j = 0; j < 3; ++j) {
+		buf->bMaxPacketSize0 = 0;
+		r = usb_control_msg(dev, usb_rcvctrlpipe(dev, 0),
+		    USB_REQ_GET_DESCRIPTOR, USB_DIR_IN,
+		    USB_DT_DEVICE << 8, 0,
+		    buf, GET_DESCRIPTOR_BUFSIZE,
+		    HZ * GET_TIMEOUT);
+		switch (buf->bMaxPacketSize0) {
+		    case 8: case 16: case 32: case 64: case 255:
+			if (buf->bDescriptorType == USB_DT_DEVICE) {
+			    r = 0;
+			    break;
+			}
+			/* FALL THROUGH */
+		    default:
+			if (r == 0)
+			    r = -EPROTO;
+			break;
+		}
+		if (r == 0)
+		    break;
+	    }
+	    dev->descriptor.bMaxPacketSize0 = buf->bMaxPacketSize0;
+	    kfree(buf);
+#undef GET_DESCRIPTOR_BUFSIZE
+	// lly: End 2.6 code
+	}
+
 	err = usb_get_device_descriptor(dev);
 	if (err < (signed)sizeof(dev->descriptor)) {
 		if (err < 0)
