Cleanup a lot of copy'n'paste code.
Also backport procfs handling from 2.6 rtn branch

--- a/drivers/usb/printer.c
+++ b/drivers/usb/printer.c
@@ -60,7 +60,9 @@
 
 
 /* Added by PaN */
+#ifdef CONFIG_PROC_FS
 #include <linux/proc_fs.h>
+#endif
 #include <asm/uaccess.h>
 // End PaN
 
@@ -77,7 +79,9 @@ struct print_buffer
 #define MAX_DESCRIPT    64
 #define MAX_STATUS_TYPE 6
 
-static struct proc_dir_entry *usblp_dir, *usblpid_file;
+#ifdef CONFIG_PROC_FS
+static struct proc_dir_entry *usblp_dir = NULL;
+#endif
 struct parport_splink_device_info {
 	char class_name[MAX_CLASS_NAME];
 	char mfr[MAX_MFR];
@@ -85,10 +89,10 @@ struct parport_splink_device_info {
 	char description[MAX_DESCRIPT];
 };
 			       	       	       
-static struct parport_splink_device_info usblpid_info;
-struct parport_splink_device_info prn_info_tmp, *prn_info; // Added by JYWeng 20031212:
-char *strunknown="unknown"; // Added by JYWeng 20031212:
-void parseKeywords(char *str_dev_id, char *keyword1, char *keyword2, char *prn_info_data, char *usblpid_info_data);// Added by JYWeng 20031212:
+#define USBLP_SPLINK_ID_SIZE	sizeof(struct parport_splink_device_info)
+
+static char *strunknown="unknown"; // Added by JYWeng 20031212:
+static void parseKeywords(char *str_dev_id, char *keyword1, char *keyword2, char *usblpid_info_data);// Added by JYWeng 20031212:
 
 static ssize_t usblp_write(struct file *file, const char *buffer, size_t count, loff_t *ppos);
 static ssize_t usblp_read(struct file *file, char *buffer, size_t count, loff_t *ppos);
@@ -198,6 +202,10 @@ struct usblp {
 	unsigned char		bidir;			/* interface is bidirectional */
 	unsigned char		*device_id_string;	/* IEEE 1284 DEVICE ID string (ptr) */
 							/* first 2 bytes are (big-endian) length */
+#ifdef CONFIG_PROC_FS
+	struct proc_dir_entry	*usblpid_file;		/* proc directory entry */
+#endif
+	struct parport_splink_device_info *usblpid_info;
 };
 
 #ifdef DEBUG
@@ -357,144 +365,36 @@ static char *usblp_messages[] = { "ok", 
 /* Added by PaN */
 static int proc_read_usblpid(char *page, char **start, off_t off, int count, int *eof, void *data)
 {
-	int len=0;
+	struct parport_splink_device_info *usblpid_info = ((struct usblp *)data)->usblpid_info;
 	
-	len=sprintf(page, "Manufacturer=%s\nModel=%s\nClass=%s\nDescription=%s\n\n", 
-	usblpid_info.mfr, usblpid_info.model, usblpid_info.class_name, usblpid_info.description);
-	
-	return len;
+	return (sprintf(page, "Manufacturer=%s\nModel=%s\nClass=%s\nDescription=%s\n\n",
+		usblpid_info->mfr,
+		usblpid_info->model,
+		usblpid_info->class_name,
+		usblpid_info->description));
 }
 
 static int proc_get_usblpid(struct usblp *usblp)
 {
-//JYWeng 20031212: set this as global	char *strtmp, *strunknown="unknown"; // Added by PaN
-	char *str_dev_id; // Added by PaN: JYWeng 20031212: modified from the above
-	//int i, unk = 0; // Added by PaN
-	int length, err;
-	int retval = 0;
-
-	prn_info= &prn_info_tmp; // Added by JYWeng 20031212:
+	char *str_dev_id; // Added by PaN
+	int length;
 
-	usblp->device_id_string[0] = usblp->device_id_string[1] = '\0';
-	err = usblp_get_id(usblp, 0, usblp->device_id_string, DEVICE_ID_SIZE - 1);
-	
-	if (err < 0) {
-		dbg ("usblp%d: error = %d reading IEEE-1284 Device ID string",
-			usblp->minor, err);
-			usblp->device_id_string[0] = usblp->device_id_string[1] = '\0';
-		retval = -EIO;
-		goto done;
-	}
+	length = usblp_cache_device_id_string(usblp);
+	if (length < 0)
+		return length;
 
-	length = (usblp->device_id_string[0] << 8) + usblp->device_id_string[1]; /* big-endian */
-	if (length < DEVICE_ID_SIZE)
-		usblp->device_id_string[length] = '\0';
-	else
-		usblp->device_id_string[DEVICE_ID_SIZE - 1] = '\0';
-
-	dbg ("usblp%d Device ID string [%d]='%s'",
-		usblp->minor, length, &usblp->device_id_string[2]);
 	info ("usblp%d Device ID string [%d]='%s'",
 		usblp->minor, length, &usblp->device_id_string[2]);
 
 	str_dev_id = &usblp->device_id_string[2];	
-#if 1//JYWeng 20031212: modified from below
-				parseKeywords(str_dev_id, "MFG:", "MANUFACTURE:", prn_info->mfr, usblpid_info.mfr);	
-				parseKeywords(str_dev_id, "MDL:", "MODEL:", prn_info->model, usblpid_info.model);	
-				parseKeywords(str_dev_id, "CLS:", "CLASS:", prn_info->class_name, usblpid_info.class_name);	
-				parseKeywords(str_dev_id, "DES:", "DESCRIPTION:", prn_info->description, usblpid_info.description);	
-#else
-	if ( (strtmp = strstr(str_dev_id, "MFG:")) == NULL) {
-		if ( (strtmp = strstr(str_dev_id, "MANUFACTURE:")) == NULL) {
-			for (i=0; i<7; i++) {
-				usblpid_info.mfr[i] = strunknown[i];
-			}
-			usblpid_info.mfr[i]='\0';
-			unk=1;
-		}
-		else 
-			strtmp+=12;
-	}
-	else
-		strtmp+=4;
-					
-	i=0;
-	while (unk==0 && strtmp[i] != ';') {
-		usblpid_info.mfr[i] = strtmp[i];
-		i++;
-	}
-	usblpid_info.mfr[i]='\0';
-	unk=0;
+//JYWeng 20031212: modified from below
+	parseKeywords(str_dev_id, "MFG:", "MANUFACTURE:", usblp->usblpid_info->mfr);
+	parseKeywords(str_dev_id, "MDL:", "MODEL:", usblp->usblpid_info->model);
+	parseKeywords(str_dev_id, "CLS:", "CLASS:", usblp->usblpid_info->class_name);
+	parseKeywords(str_dev_id, "DES:", "DESCRIPTION:", usblp->usblpid_info->description);
+//JYWeng 20031212: end
 
-	if ( (strtmp = strstr(str_dev_id, "MDL:")) == NULL) {
-		if ( (strtmp = strstr(str_dev_id, "MODEL:")) == NULL) {
-			for (i=0; i<7; i++) {
-				usblpid_info.model[i] = strunknown[i];
-			}
-			usblpid_info.model[i]='\0';
-			unk=1;
-		}
-		else
-			strtmp+=6;
-		}
-	else 
-		strtmp+=4;
-				
-	i=0;
-	while (unk==0 && strtmp[i] != ';') {
-		usblpid_info.model[i] = strtmp[i];
-		i++;
-	}		
-	usblpid_info.model[i]='\0';
-	unk=0;
-	
-	if ( (strtmp = strstr(str_dev_id, "CLS:")) == NULL) {
-		if ( (strtmp = strstr(str_dev_id, "CLASS:")) == NULL) {
-			for (i=0; i<7; i++) {
-				usblpid_info.class_name[i] = strunknown[i];
-			}
-			usblpid_info.class_name[i]='\0';
-			unk=1;
-		}
-		else
-			strtmp+=6;
-	}
-	else 
-		strtmp+=4;
-	
-	i=0;
-	while (unk==0 && strtmp[i] != ';') {
-		usblpid_info.class_name[i]= strtmp[i];
-		i++;
-	}		
-	usblpid_info.class_name[i]='\0';
-	unk=0;
-	
-	if ( (strtmp = strstr(str_dev_id, "DES:")) == NULL) {
-		if ( (strtmp = strstr(str_dev_id, "DESCRIPTION:")) == NULL) {
-			for (i=0; i<7; i++) {
-				usblpid_info.description[i] = strunknown[i];
-			}
-			usblpid_info.description[i]='\0';
-			unk=1;
-		}
-		else
-			strtmp+=12;
-	}
-	else
-		strtmp+=4;
-		
-	i=0;
-	while (unk==0 && strtmp[i] != ';') {
-			usblpid_info.description[i]= strtmp[i];
-			i++;
-	}		
-	usblpid_info.description[i]='\0';
-#endif//JYWeng 20031212: end
-
-done:
-	return retval;
-	
+	return 0;
 }
 // End PaN
 
@@ -629,6 +529,15 @@ static void usblp_cleanup (struct usblp 
 	usb_deregister_devpath(usblp->dev);
 #endif
 	info("usblp%d: removed", usblp->minor);
+#ifdef CONFIG_PROC_FS
+        char name[6];
+        sprintf(name, "lp%d", usblp->minor);
+        if (usblp->usblpid_file) {
+                remove_proc_entry(name, usblp_dir);
+                usblp->usblpid_file = NULL;
+        }
+	kfree(usblp->usblpid_info);
+#endif
 
 	kfree (usblp->writebuf);
 	kfree (usblp->readbuf);
@@ -674,11 +583,7 @@ static unsigned int usblp_poll(struct fi
 static int usblp_ioctl(struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg)
 {
 	struct usblp *usblp = file->private_data;
-//JYWeng 20031212: set this as global	struct parport_splink_device_info prn_info_tmp, *prn_info; // Added by PaN
 	struct print_buffer *user_buf; // Added by PaN
-//JYWeng 20031212: set this as global	char *strtmp, *strunknown="unknown"; // Added by PaN
-	char *str_dev_id; // Added by PaN: JYWeng 20031212: modified from the above
-	//int i, unk=0; // Added by PaN
 	int length, err, i;
 	unsigned char newChannel;
 	int status;
@@ -832,141 +737,9 @@ static int usblp_ioctl(struct inode *ino
 		switch (cmd) {
 			/*=================================================================================== PaN */
 			case LPGETID: /* get the DEVICE_ID string */
-				usblp->device_id_string[0] = usblp->device_id_string[1] = '\0';
-				err = usblp_get_id(usblp, 0, usblp->device_id_string, DEVICE_ID_SIZE - 1);
-				if (err < 0) {
-					dbg ("usblp%d: error = %d reading IEEE-1284 Device ID string",
-						usblp->minor, err);
-					usblp->device_id_string[0] = usblp->device_id_string[1] = '\0';
-					retval = -EIO;
-					goto done;
-				}
-
-				length = (usblp->device_id_string[0] << 8) + usblp->device_id_string[1]; /* big-endian */
-				if (length < DEVICE_ID_SIZE)
-					usblp->device_id_string[length] = '\0';
-				else
-					usblp->device_id_string[DEVICE_ID_SIZE - 1] = '\0';
-
-				dbg ("usblp%d Device ID string [%d/max %d]='%s'",
-					usblp->minor, length, cmd, &usblp->device_id_string[2]);
-				info ("usblp%d Device ID string [%d/max %d]='%s'",
-					usblp->minor, length, cmd, &usblp->device_id_string[2]);
-
-				str_dev_id = &usblp->device_id_string[2];	
-#if 1//JYWeng 20031212: modified from below
-				parseKeywords(str_dev_id, "MFG:", "MANUFACTURE:", prn_info->mfr, usblpid_info.mfr);	
-				parseKeywords(str_dev_id, "MDL:", "MODEL:", prn_info->model, usblpid_info.model);	
-				parseKeywords(str_dev_id, "CLS:", "CLASS:", prn_info->class_name, usblpid_info.class_name);	
-				parseKeywords(str_dev_id, "DES:", "DESCRIPTION:", prn_info->description, usblpid_info.description);	
-#else
-				if ( (strtmp = strstr(str_dev_id, "MFG:")) == NULL) {
-					if ( (strtmp = strstr(str_dev_id, "MANUFACTURE:")) == NULL) {
-						for (i=0; i<7; i++) {
-							prn_info->mfr[i]= strunknown[i];
-							usblpid_info.mfr[i] = strunknown[i];
-						}
-						prn_info->mfr[i]= '\0';
-						usblpid_info.mfr[i]='\0';
-						unk=1;
-					}
-					else 
-						strtmp+=12;
-				}
-				else
-					strtmp+=4;
-					
-				i=0;
-				while (unk==0 && strtmp[i] != ';') {
-					prn_info->mfr[i]= strtmp[i];
-					usblpid_info.mfr[i] = strtmp[i];
-					i++;
-				}
-				prn_info->mfr[i]= '\0';
-				usblpid_info.mfr[i]='\0';
-				unk=0;
-
-				if ( (strtmp = strstr(str_dev_id, "MDL:")) == NULL) {
-					if ( (strtmp = strstr(str_dev_id, "MODEL:")) == NULL) {
-						for (i=0; i<7; i++) {
-							prn_info->model[i]= strunknown[i];
-							usblpid_info.model[i] = strunknown[i];
-						}
-						prn_info->model[i]= '\0';
-						usblpid_info.model[i]='\0';
-						unk=1;
-					}
-					else
-						strtmp+=6;
-				}
-				else 
-					strtmp+=4;
-				
-				i=0;
-				while (unk==0 && strtmp[i] != ';') {
-					prn_info->model[i]= strtmp[i];
-					usblpid_info.model[i] = strtmp[i];
-					i++;
-				}		
-				prn_info->model[i]= '\0';
-				usblpid_info.model[i]='\0';
-				unk=0;
-				
-				if ( (strtmp = strstr(str_dev_id, "CLS:")) == NULL) {
-					if ( (strtmp = strstr(str_dev_id, "CLASS:")) == NULL) {
-						for (i=0; i<7; i++) {
-							prn_info->class_name[i]= strunknown[i];
-							usblpid_info.class_name[i] = strunknown[i];
-						}
-						prn_info->class_name[i]= '\0';
-						usblpid_info.class_name[i]='\0';
-						unk=1;
-					}
-					else
-						strtmp+=6;
-				}
-				else 
-					strtmp+=4;
-				
-				i=0;
-				while (unk==0 && strtmp[i] != ';') {
-					prn_info->class_name[i]= strtmp[i];
-					usblpid_info.class_name[i]= strtmp[i];
-					i++;
-				}		
-				prn_info->class_name[i]= '\0';
-				usblpid_info.class_name[i]='\0';
-				unk=0;
-				
-				if ( (strtmp = strstr(str_dev_id, "DES:")) == NULL) {
-					if ( (strtmp = strstr(str_dev_id, "DESCRIPTION:")) == NULL) {
-						for (i=0; i<7; i++) {
-							prn_info->description[i]= strunknown[i];
-							usblpid_info.description[i] = strunknown[i];
-						}
-						prn_info->description[i]= '\0';
-						usblpid_info.description[i]='\0';
-						unk=1;
-					}
-					else
-						strtmp+=12;
-				}
-				else
-					strtmp+=4;
-				
-				i=0;
-				while (unk==0 && strtmp[i] != ';') {
-						prn_info->description[i]= strtmp[i];
-						usblpid_info.description[i]= strtmp[i];
-						i++;
-				}	
-				prn_info->description[i]= '\0';
-				usblpid_info.description[i]='\0';
-#endif//JYWeng 20031212: end
-				
-				info("Parsing USBLPID...");
-				if (copy_to_user((unsigned char *) arg,
-						prn_info, (unsigned long) length)) {
+				if (usblp->usblpid_info == NULL ||
+				    copy_to_user((unsigned char *) arg,
+						usblp->usblpid_info, (unsigned long) USBLP_SPLINK_ID_SIZE)) {
 					retval = -EFAULT;
 					goto done;
 				}
@@ -1014,7 +787,7 @@ done:
 /*********************************************************
 ** JYWeng 20031212: parsing the information of printers **
 *********************************************************/
-void parseKeywords(char *str_dev_id, char *keyword1, char *keyword2, char *prn_info_data, char *usblpid_info_data)
+static void parseKeywords(char *str_dev_id, char *keyword1, char *keyword2, char *usblpid_info_data)
 {
 	char *strtmp;
 	int i, unk = 0;
@@ -1022,10 +795,8 @@ void parseKeywords(char *str_dev_id, cha
 	if ( (strtmp = strstr(str_dev_id, keyword1)) == NULL) {
 		if ( (strtmp = strstr(str_dev_id, keyword2)) == NULL) {
 			for (i=0; i<7; i++) {
-				prn_info_data[i]= strunknown[i];
 				usblpid_info_data[i] = strunknown[i];
 			}
-			prn_info_data[i]= '\0';
 			usblpid_info_data[i]='\0';
 			unk=1;
 			
@@ -1039,11 +810,9 @@ void parseKeywords(char *str_dev_id, cha
 					
 	i=0;
 	while (unk==0 && strtmp[i] && strtmp[i] != ';') {
-		prn_info_data[i]= strtmp[i];
 		usblpid_info_data[i] = strtmp[i];
 		i++;
 	}
-	prn_info_data[i]= '\0';
 	usblpid_info_data[i]='\0';
 
 	return;
@@ -1387,25 +1156,38 @@ static void *usblp_probe(struct usb_devi
 	usblp->present = 1;
 
 	/* Added by PaN */
+	/* get device id */
+	if (!(usblp->usblpid_info = kmalloc(USBLP_SPLINK_ID_SIZE, GFP_KERNEL))) {
+		err("out of memory for usblpid info");
+		goto abort;
+	}
+	if (proc_get_usblpid(usblp) < 0)
+		info("usblp: get usblpid error!");
+
+#ifdef CONFIG_PROC_FS
 	/* create directory */
-	usblp_dir = proc_mkdir(MODULE_NAME, NULL);
-	if(usblp_dir == NULL) {
-	        goto outpan;
+	if (usblp_dir == NULL) {
+		usblp_dir = proc_mkdir(MODULE_NAME, NULL);
+		if (usblp_dir)
+			usblp_dir->owner = THIS_MODULE;
+		else
+		        goto outpan;
 	}
-        usblp_dir->owner = THIS_MODULE;
 				
-	usblpid_file = create_proc_read_entry("usblpid", 0444, usblp_dir, proc_read_usblpid, NULL);
-	if(usblpid_file == NULL) {
-		remove_proc_entry(MODULE_NAME, NULL);
-
+	usblp->usblpid_file = create_proc_read_entry(name, 0444, usblp_dir, proc_read_usblpid, usblp);
+	if (usblp->usblpid_file == NULL)
 		goto outpan;
-	}
-        usblpid_file->owner = THIS_MODULE;
+        usblp->usblpid_file->owner = THIS_MODULE;
 	/* get device id */
+	if (!(usblp->usblpid_info = kmalloc(USBLP_SPLINK_ID_SIZE, GFP_KERNEL))) {
+		err("out of memory for usblpid info");
+		goto abort;
+	}
 	if (proc_get_usblpid(usblp) < 0) 
 		info("proc:get usblpid error!!");
 
 outpan:
+#endif
 	// End PaN 
 
 
@@ -1419,6 +1201,7 @@ abort:
 			kfree (usblp->readbuf);
 		kfree(usblp->statusbuf);
 		kfree(usblp->device_id_string);
+		kfree(usblp->usblpid_info);
 		usb_free_urb(usblp->writeurb);
 		usb_free_urb(usblp->readurb);
 		kfree(usblp);
@@ -1635,12 +1418,26 @@ static int __init usblp_init(void)
 	if (usb_register(&usblp_driver))
 		return -1;
 	info(DRIVER_VERSION ": " DRIVER_DESC);
+#ifdef CONFIG_PROC_FS
+	if (usblp_dir == NULL) {
+		/* create directory */
+		usblp_dir = proc_mkdir(MODULE_NAME, NULL);
+		if (usblp_dir)
+			usblp_dir->owner = THIS_MODULE;
+	}
+#endif
 	return 0;
 }
 
 static void __exit usblp_exit(void)
 {
 	usb_deregister(&usblp_driver);
+#ifdef CONFIG_PROC_FS
+	if (usblp_dir) {
+		remove_proc_entry(MODULE_NAME, NULL);
+		usblp_dir = NULL;
+	}
+#endif
 }
 
 module_init(usblp_init);
