[NET]: schedule_timeout() negative timeout message backports

 kernel.org 2.6 commits
 9261c9b042547d01eeb206cf0e21ce72832245ec [NET]: Make sure l_linger is unsigned to avoid negative timeouts
 ba78073e6f70cd9c64a478a9bd901d7c8736cfbc [NET]: "wrong timeout value" in sk_wait_data()

---
 net/core/sock.c |   16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff -uBp a/kernel/sched.c b/kernel/sched.c
--- a/kernel/sched.c	2008-11-25 13:20:40.000000000 +0300
+++ b/kernel/sched.c	2010-10-21 16:13:50.000000000 +0400
@@ -433,8 +433,8 @@ signed long fastcall schedule_timeout(si
 		if (timeout < 0)
 		{
 			printk(KERN_ERR "schedule_timeout: wrong timeout "
-			       "value %lx from %p\n", timeout,
-			       __builtin_return_address(0));
+			       "value %lx\n", timeout);
+			dump_stack();
 			current->state = TASK_RUNNING;
 			goto out;
 		}
diff --git a/net/core/sock.c b/net/core/sock.c
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -155,7 +155,19 @@ static int sock_set_timeout(long *timeo_
 		return -EINVAL;
 	if (copy_from_user(&tv, optval, sizeof(tv)))
 		return -EFAULT;
+	if (tv.tv_usec < 0 || tv.tv_usec >= 1000000L)
+		return -EDOM;
 
+	if (tv.tv_sec < 0) {
+		static int warned = 0;
+		*timeo_p = 0;
+		if (warned < 10 && net_ratelimit())
+			warned++;
+			printk(KERN_DEBUG "sock_set_timeout: `%s' (pid %d) "
+			       "tries to set negative timeout\n",
+			        current->comm, current->pid);
+		return 0;
+	}
 	*timeo_p = MAX_SCHEDULE_TIMEOUT;
 	if (tv.tv_sec == 0 && tv.tv_usec == 0)
 		return 0;
@@ -304,11 +316,11 @@ int sock_setsockopt(struct socket *sock,
 				sk->linger=0;
 			} else {
 #if (BITS_PER_LONG == 32)
-				if (ling.l_linger >= MAX_SCHEDULE_TIMEOUT/HZ)
+				if ((unsigned int)ling.l_linger >= MAX_SCHEDULE_TIMEOUT/HZ)
 					sk->lingertime=MAX_SCHEDULE_TIMEOUT;
 				else
 #endif
-					sk->lingertime=ling.l_linger*HZ;
+					sk->lingertime=(unsigned int)ling.l_linger*HZ;
 				sk->linger=1;
 			}
 			break;
-- 
