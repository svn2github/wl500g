From: Erik Andersen
Date: Sun, 20 Sep 2009 19:51:16 -0400
Subject: [PATCH] Large files support

---
 fs/buffer.c                |    2 +-
 fs/fat/dir.c               |    5 ++---
 fs/hfsplus/hfsplus_fs.h    |    4 +---
 include/linux/adfs_fs_i.h  |    2 +-
 include/linux/affs_fs_i.h  |    2 +-
 include/linux/fs.h         |    2 +-
 include/linux/hfs_fs_i.h   |    2 +-
 include/linux/hpfs_fs_i.h  |    2 +-
 include/linux/msdos_fs_i.h |    2 +-
 include/linux/qnx4_fs_i.h  |    2 +-
 10 files changed, 11 insertions(+), 14 deletions(-)

diff --git a/fs/buffer.c b/fs/buffer.c
index 3cbce2b..0284b00 100644
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@ -1904,7 +1904,7 @@ out:
  * We may have to extend the file.
  */
 
-int cont_prepare_write(struct page *page, unsigned offset, unsigned to, get_block_t *get_block, unsigned long *bytes)
+int cont_prepare_write(struct page *page, unsigned offset, unsigned to, get_block_t *get_block, loff_t *bytes)
 {
 	struct address_space *mapping = page->mapping;
 	struct inode *inode = mapping->host;
diff --git a/fs/fat/dir.c b/fs/fat/dir.c
index 08422f5..84ab776 100644
--- a/fs/fat/dir.c
+++ b/fs/fat/dir.c
@@ -362,15 +362,14 @@ static int fat_readdirx(struct inode *inode, struct file *filp, void *dirent,
 	unsigned char long_slots;
 	wchar_t *unicode = NULL;
 	char c, work[8], bufname[56], *ptname = bufname;
-	unsigned long lpos, dummy, *furrfu = &lpos;
+	loff_t lpos, dummy, *furrfu = &lpos;
 	int uni_xlate = MSDOS_SB(sb)->options.unicode_xlate;
 	int isvfat = MSDOS_SB(sb)->options.isvfat;
 	int utf8 = MSDOS_SB(sb)->options.utf8;
 	int nocase = MSDOS_SB(sb)->options.nocase;
 	unsigned short opt_shortname = MSDOS_SB(sb)->options.shortname;
-	unsigned long inum;
 	int chi, chl, i, i2, j, last, last_u, dotoffset = 0;
-	loff_t i_pos, cpos;
+	loff_t i_pos, inum, cpos;
 
 	cpos = filp->f_pos;
 /* Fake . and .. for the root directory. */
diff --git a/fs/hfsplus/hfsplus_fs.h b/fs/hfsplus/hfsplus_fs.h
index 2254419..235043c 100644
--- a/fs/hfsplus/hfsplus_fs.h
+++ b/fs/hfsplus/hfsplus_fs.h
@@ -178,10 +178,8 @@ struct hfsplus_inode_info {
 	unsigned long flags;
 
 	struct list_head open_dir_list;
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2,5,0)
-	unsigned long mmu_private;
-#else
 	loff_t mmu_private;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,5,0)
 	struct inode vfs_inode;
 #endif
 };
diff --git a/include/linux/adfs_fs_i.h b/include/linux/adfs_fs_i.h
index 7da1ced..3a0eb36 100644
--- a/include/linux/adfs_fs_i.h
+++ b/include/linux/adfs_fs_i.h
@@ -11,7 +11,7 @@
  * adfs file system inode data in memory
  */
 struct adfs_inode_info {
-	unsigned long	mmu_private;
+	loff_t		mmu_private;
 	unsigned long	parent_id;	/* object id of parent		*/
 	__u32		loadaddr;	/* RISC OS load address		*/
 	__u32		execaddr;	/* RISC OS exec address		*/
diff --git a/include/linux/affs_fs_i.h b/include/linux/affs_fs_i.h
index 430ff68..2859dbd 100644
--- a/include/linux/affs_fs_i.h
+++ b/include/linux/affs_fs_i.h
@@ -36,7 +36,7 @@ struct affs_inode_info {
 	struct affs_ext_key *i_ac;		/* associative cache of extended blocks */
 	u32	 i_ext_last;			/* last accessed extended block */
 	struct buffer_head *i_ext_bh;		/* bh of last extended block */
-	unsigned long mmu_private;
+	loff_t	 mmu_private;
 	u32	 i_protect;			/* unused attribute bits */
 	u32	 i_lastalloc;			/* last allocated block */
 	int	 i_pa_cnt;			/* number of preallocated blocks */
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 3ad3f24..8441aac 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1506,7 +1506,7 @@ extern int block_write_full_page(struct page*, get_block_t*);
 extern int block_read_full_page(struct page*, get_block_t*);
 extern int block_prepare_write(struct page*, unsigned, unsigned, get_block_t*);
 extern int cont_prepare_write(struct page*, unsigned, unsigned, get_block_t*,
-				unsigned long *);
+				loff_t *);
 extern int generic_cont_expand(struct inode *inode, loff_t size) ;
 extern int block_commit_write(struct page *page, unsigned from, unsigned to);
 extern int block_sync_page(struct page *);
diff --git a/include/linux/hfs_fs_i.h b/include/linux/hfs_fs_i.h
index 8ae2ef9..9716697 100644
--- a/include/linux/hfs_fs_i.h
+++ b/include/linux/hfs_fs_i.h
@@ -19,7 +19,7 @@
 struct hfs_inode_info {
 	int				magic;     /* A magic number */
 
-	unsigned long			mmu_private;
+	loff_t				mmu_private;
 	struct hfs_cat_entry		*entry;
 
 	/* For a regular or header file */
diff --git a/include/linux/hpfs_fs_i.h b/include/linux/hpfs_fs_i.h
index 56a758b..3ca5860 100644
--- a/include/linux/hpfs_fs_i.h
+++ b/include/linux/hpfs_fs_i.h
@@ -2,7 +2,7 @@
 #define _HPFS_FS_I
 
 struct hpfs_inode_info {
-	unsigned long mmu_private;
+	loff_t mmu_private;
 	ino_t i_parent_dir;	/* (directories) gives fnode of parent dir */
 	unsigned i_dno;		/* (directories) root dnode */
 	unsigned i_dpos;	/* (directories) temp for readdir */
diff --git a/include/linux/msdos_fs_i.h b/include/linux/msdos_fs_i.h
index 5399f55..31158f5 100644
--- a/include/linux/msdos_fs_i.h
+++ b/include/linux/msdos_fs_i.h
@@ -6,7 +6,7 @@
  */
 
 struct msdos_inode_info {
-	unsigned long mmu_private;
+	loff_t mmu_private;
 	int i_start;	/* first cluster or 0 */
 	int i_logstart;	/* logical first cluster */
 	int i_attrs;	/* unused attribute bits */
diff --git a/include/linux/qnx4_fs_i.h b/include/linux/qnx4_fs_i.h
index b0fe846..784b185 100644
--- a/include/linux/qnx4_fs_i.h
+++ b/include/linux/qnx4_fs_i.h
@@ -33,7 +33,7 @@ struct qnx4_inode_info {
 	__u8		i_zero[4];	/*  4 */
 	qnx4_ftype_t	i_type;		/*  1 */
 	__u8		i_status;	/*  1 */
-	unsigned long	mmu_private;
+	loff_t		mmu_private;
 };
 
 #endif
-- 
1.6.5.GIT

