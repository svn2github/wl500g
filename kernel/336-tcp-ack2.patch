Subject: [PATCH] [TCP]: Send ACKs each 2nd received segment.
From 1ef9696c909060ccdae3ade245ca88692b49285b
From: Alexey Kuznetsov
Date: Tue, 19 Sep 2006 12:52:50 -0700

It does not affect either mss-sized connections (obviously) or
connections controlled by Nagle (because there is only one small
segment in flight).

The idea is to record the fact that a small segment arrives on a
connection, where one small segment has already been received and
still not-ACKed. In this case ACK is forced after tcp_recvmsg() drains
receive buffer.

In other words, it is a "soft" each-2nd-segment ACK, which is enough
to preserve ACK clock even when ABC is enabled.

Signed-off-by: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
Signed-off-by: David S. Miller <davem@davemloft.net>
---
 include/net/tcp.h    |    7 ++++---
 net/ipv4/tcp.c       |    5 +++--
 net/ipv4/tcp_input.c |    2 ++
 3 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/include/net/tcp.h b/include/net/tcp.h
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -147,9 +147,10 @@
 
 enum tcp_ack_state_t
 {
-	TCP_ACK_SCHED = 1,
-	TCP_ACK_TIMER = 2,
-	TCP_ACK_PUSHED= 4
+	TCP_ACK_SCHED   = 1,
+	TCP_ACK_TIMER   = 2,
+	TCP_ACK_PUSHED  = 4,
+	TCP_ACK_PUSHED2 = 8
 };
 
 static inline void tcp_schedule_ack(struct tcp_opt *tp)
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 29e3d60..66e9a72 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -955,8 +955,9 @@ void cleanup_rbuf(struct sock *sk, int copied)
 		     * in queue.
 		     */
 		    || (copied > 0 &&
-			(tp->ack.pending&TCP_ACK_PUSHED) &&
-			!tp->ack.pingpong &&
+			((tp->ack.pending & TCP_ACK_PUSHED2) ||
+			((tp->ack.pending & TCP_ACK_PUSHED) &&
+			!tp->ack.pingpong)) &&
 			atomic_read(&sk->rmem_alloc) == 0)) {
 			time_to_ack = 1;
 		}
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index 511b738..b3def0d 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -156,6 +156,8 @@ static void tcp_measure_rcv_mss(struct sock *sk,
 				return;
 			}
 		}
+		if (tp->ack.pending & TCP_ACK_PUSHED)
+			tp->ack.pending |= TCP_ACK_PUSHED2;
 		tp->ack.pending |= TCP_ACK_PUSHED;
 	}
 }
-- 
1.7.1
