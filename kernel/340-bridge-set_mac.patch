Bridge backports from 2.6 upstream:

4505a3ef720845b5db3ddb440de13cd4800fd508 [BRIDGE]: allow setting hardware address of bridge pseudo-dev
92c0574f11598c8036f81e27d2e8bdd6eed7d76d bridge: make bridge address settings sticky
7ce54e3f428b33af714271140601c87b8bf2c544 [BRIDGE]: receive path optimization
3ae412544cde6d987e0e48778bd87bc96a5749df [BRIDGE]: Assign random address.

 net/bridge/br.c         |    2 ++
 net/bridge/br_device.c  |   23 +++++++++++++++++++++--
 net/bridge/br_fdb.c     |   27 +++++++++++++++------------
 net/bridge/br_input.c   |    2 +-
 net/bridge/br_private.h |    4 ++++
 net/bridge/br_stp_if.c  |    8 +++++---
 6 files changed, 48 insertions(+), 18 deletions(-)

diff -urBp linux.orig/net/bridge/br.c linux/net/bridge/br.c
--- linux.orig/net/bridge/br.c	2010-02-02 00:04:46.000000000 +0300
+++ linux/net/bridge/br.c	2010-06-28 15:04:33.000000000 +0400
@@ -44,6 +44,8 @@ static int __init br_init(void)
 {
 	printk(KERN_INFO "NET4: Ethernet Bridge 008 for NET4.0\n");
 
+	br_fdb_init();
+
 	br_handle_frame_hook = br_handle_frame;
 	br_ioctl_hook = br_ioctl_deviceless_stub;
 #if defined(CONFIG_ATM_LANE) || defined(CONFIG_ATM_LANE_MODULE)
diff -urBp linux.orig/net/bridge/br_device.c linux/net/bridge/br_device.c
--- linux.orig/net/bridge/br_device.c	2010-02-02 00:04:46.000000000 +0300
+++ linux/net/bridge/br_device.c	2010-06-28 14:59:59.000000000 +0400
@@ -15,6 +15,7 @@
 
 #include <linux/kernel.h>
 #include <linux/netdevice.h>
+#include <linux/etherdevice.h>
 #include <linux/if_bridge.h>
 #include <asm/uaccess.h>
 #include "br_private.h"
@@ -116,6 +117,24 @@ static int br_dev_stop(struct net_device
 	return 0;
 }
 
+/* Allow setting mac address to any valid ethernet address. */
+static int br_set_mac_address(struct net_device *dev, void *p)
+{
+	struct net_bridge *br = dev->priv;
+	struct sockaddr *addr = p;
+
+	if (!is_valid_ether_addr(addr->sa_data))
+		return -EINVAL;
+
+	read_lock(&br->lock);
+	memcpy(dev->dev_addr, addr->sa_data, ETH_ALEN);
+	br_stp_change_bridge_id(br, addr->sa_data);
+	br->flags |= BR_SET_MAC_ADDR;
+	read_unlock(&br->lock);
+
+	return 0;
+}
+
 static int br_dev_accept_fastpath(struct net_device *dev, struct dst_entry *dst)
 {
 	return -1;
@@ -123,7 +142,7 @@ static int br_dev_accept_fastpath(struct
 
 void br_dev_setup(struct net_device *dev)
 {
-	memset(dev->dev_addr, 0, ETH_ALEN);
+	random_ether_addr(dev->dev_addr);
 
 	dev->do_ioctl = br_dev_do_ioctl;
 	dev->get_stats = br_dev_get_stats;
@@ -133,5 +152,5 @@ void br_dev_setup(struct net_device *dev
 	dev->stop = br_dev_stop;
 	dev->accept_fastpath = br_dev_accept_fastpath;
 	dev->tx_queue_len = 0;
-	dev->set_mac_address = NULL;
+	dev->set_mac_address = br_set_mac_address;
 }
diff -urBp linux.orig/net/bridge/br_fdb.c linux/net/bridge/br_fdb.c
--- linux.orig/net/bridge/br_fdb.c	2010-02-02 00:04:46.000000000 +0300
+++ linux/net/bridge/br_fdb.c	2010-06-28 15:09:23.000000000 +0400
@@ -15,11 +15,23 @@
 
 #include <linux/kernel.h>
 #include <linux/spinlock.h>
+#include <linux/init.h>
 #include <linux/if_bridge.h>
+#include <linux/jhash.h>
+#include <linux/random.h>
 #include <asm/atomic.h>
 #include <asm/uaccess.h>
+#include <asm/unaligned.h>
 #include "br_private.h"
 
+static u32 fdb_salt;
+
+int __init br_fdb_init(void)
+{
+        get_random_bytes(&fdb_salt, sizeof(fdb_salt));
+        return 0;
+}
+
 static __inline__ unsigned long __timeout(struct net_bridge *br)
 {
 	unsigned long timeout;
@@ -54,18 +66,9 @@ static __inline__ void copy_fdb(struct _
 
 static __inline__ int br_mac_hash(unsigned char *mac)
 {
-	unsigned long x;
-
-	x = mac[0];
-	x = (x << 2) ^ mac[1];
-	x = (x << 2) ^ mac[2];
-	x = (x << 2) ^ mac[3];
-	x = (x << 2) ^ mac[4];
-	x = (x << 2) ^ mac[5];
-
-	x ^= x >> 8;
-
-	return x & (BR_HASH_SIZE - 1);
+	/* use 1 byte of OUI cnd 3 bytes of NIC */
+	u32 key = get_unaligned((u32 *)(mac + 2));
+	return jhash_1word(key, fdb_salt) & (BR_HASH_SIZE - 1);
 }
 
 static __inline__ void __hash_link(struct net_bridge *br,
diff -urBp linux.orig/net/bridge/br_input.c linux/net/bridge/br_input.c
--- linux.orig/net/bridge/br_input.c	2010-02-02 00:04:46.000000000 +0300
+++ linux/net/bridge/br_input.c	2010-06-28 14:57:17.000000000 +0400
@@ -24,7 +24,7 @@ unsigned char bridge_ula[6] = { 0x01, 0x
 
 static int br_pass_frame_up_finish(struct sk_buff *skb)
 {
-	netif_rx(skb);
+	netif_receive_skb(skb);
 
 	return 0;
 }
diff -urBp linux.orig/net/bridge/br_private.h linux/net/bridge/br_private.h
--- linux.orig/net/bridge/br_private.h	2010-05-06 15:27:39.000000000 +0400
+++ linux/net/bridge/br_private.h	2010-06-28 15:05:02.000000000 +0400
@@ -86,6 +86,8 @@ struct net_bridge
 	rwlock_t			hash_lock;
 	struct net_bridge_fdb_entry	*hash[BR_HASH_SIZE];
 	struct timer_list		tick;
+	unsigned int			flags;
+#define	BR_SET_MAC_ADDR			0x00000001
 
 	/* STP */
 	bridge_id			designated_root;
@@ -123,6 +125,7 @@ extern void br_dev_setup(struct net_devi
 extern int br_dev_xmit(struct sk_buff *skb, struct net_device *dev);
 
 /* br_fdb.c */
+extern int br_fdb_init(void);
 extern void br_fdb_changeaddr(struct net_bridge_port *p,
 		       unsigned char *newaddr);
 extern void br_fdb_cleanup(struct net_bridge *br);
@@ -188,6 +191,7 @@ extern void br_stp_enable_bridge(struct 
 extern void br_stp_disable_bridge(struct net_bridge *br);
 extern void br_stp_enable_port(struct net_bridge_port *p);
 extern void br_stp_disable_port(struct net_bridge_port *p);
+extern void br_stp_change_bridge_id(struct net_bridge *br, unsigned char *addr);
 extern void br_stp_recalculate_bridge_id(struct net_bridge *br);
 extern void br_stp_set_bridge_priority(struct net_bridge *br,
 				int newprio);
diff -urBp linux.orig/net/bridge/br_stp_if.c linux/net/bridge/br_stp_if.c
--- linux.orig/net/bridge/br_stp_if.c	2010-02-02 00:04:46.000000000 +0300
+++ linux/net/bridge/br_stp_if.c	2010-06-28 12:13:47.000000000 +0400
@@ -121,7 +121,7 @@ void br_stp_disable_port(struct net_brid
 }
 
 /* called under bridge lock */
-static void br_stp_change_bridge_id(struct net_bridge *br, unsigned char *addr)
+void br_stp_change_bridge_id(struct net_bridge *br, unsigned char *addr)
 {
 	unsigned char oldaddr[6];
 	struct net_bridge_port *p;
@@ -155,10 +155,12 @@ static unsigned char br_mac_zero[6] = {0
 /* called under bridge lock */
 void br_stp_recalculate_bridge_id(struct net_bridge *br)
 {
-	unsigned char *addr;
+	unsigned char *addr = br_mac_zero;
 	struct net_bridge_port *p;
 
-	addr = br_mac_zero;
+	/* user has chosen a value so keep it */
+	if (br->flags & BR_SET_MAC_ADDR)
+		return;
 
 	p = br->port_list;
 	while (p != NULL) {
--
