#!/bin/sh

#  Modem Status script for CDMA modem AnyDATA
#  ver. 1.007 beta 27.02.2011
#  by dlukanidin

source /usr/share/modem/bin/state_3g_common

getModemInfo() {
	port=$1
	getDMStatus $port
	ret=$?
	if [ $ret == 0 ]; then
		res="Modem mode: $mode, Unreaded SMS: $uread"
	else
		res="Error: $ret - $state"
	fi
}

getSignalInfo() {
	port=$1
	getDMStatus $port
	ret=$?
	if [ $ret == 0 ]; then
		if [ $sigmode = "EVDO" ]; then
			scaleRSSI $rssiEVDO
			res="Signal: $sigmode $res"
		else
			scaleRSSI $rssi1X
			res="Signal: $sigmode $res"
		fi
	else
		res="Error: $ret - $state"
	fi
}

getRequestInfo() {
	port=$1
	req=$2
	if [ -z $req ]; then
		res="Error: no request"
		return 1
	fi
	if [ "${req:0:2}" == "AT" ] || [ "${req:0:2}" == "at" ]; then
		skipFlow $port
		doDMcommand $port "$req" 30
		res="Answer from $req : $answer"
	else
		res="USSD not supported for this modem"
	fi
}

# AnyDATA specific functions

readDMbyte(){
	addval=0
	subval=0

	char=${str:0:2}
	if [ "$char" = "M-" ];then
		addval=128
		str=${str:2}
	fi
	char=${str:0:1}
	if [ "$char" = "^" ];then
		subval=64
		str=${str:1}
	fi
	char=${str:0:1}
	if [ 1 -gt ${#str} ]; then
		str=""
	else
		str=${str:1}
	fi

	value=$(echo -n $char | od -i | awk '{ print $2 }')
	let "value = value + $addval"
	let "value = value - $subval"
	res=$value
}

readDMword(){
	readDMbyte
	lsb=$res
	readDMbyte
	let "res = res * 256"
	let "res = res + $lsb"
}

skipDMbyte(){
	n=0
	count=${1:-1}
	while [ $n -lt $count ]; do
		let "n = n + 1"
		char=${str:0:2}
		if [ "$char" = "M-" ];then
			str=${str:2}
		fi
		char=${str:0:1}
		if [ "$char" = "^" ];then
			str=${str:1}
		fi

		if [ 1 -gt ${#str} ]; then
			str=""
			break
		else
			str=${str:1}
		fi
	done
}

convert_to_o(){
	o_str=""
	for i ; do
		o_str=${o_str}"\\"`printf "%03o" 0x$i`
	done
	o_str=${o_str}"~\\c"
}

doDMcommand(){
	answer="no answer"
	if [ ! -e $1 ] ; then   
		return 10
	fi
	convert_to_o $2
	chat -t 2 -e '' $o_str '~' '\c' <$1 >$1 2>/tmp/chat.tmp
	code=$?
	if [ "$code" == "0" ] ; then
		answer=`cat /tmp/chat.tmp`
	fi
	return $code
}

getDMStatus(){
	status_cmd="CF 01 00 49 9F 7E"
	doDMcommand $1 "$status_cmd"
	status=$?
	state="no answer"
	if [ "$answer" = "$state" ]; then return $status; fi
	str=$answer
	state="bad command"
	readDMbyte
	if [ $res == 19 ]; then return $res; fi
	state="OK"
	skipDMbyte 2

	u1="-"
	for count in $(seq  1 2); do
		readDMbyte
		u1="$u1$res-"
	done

	readDMbyte
	if [ $res == 4 ]; then
		mode="EVDO only"
		readDMbyte
		if [ $res == 1 ]; then
			mode="EVDO 1x"
		fi
	else
		mode="1x only"
		readDMbyte
		if [ $res == 1 ]; then
			mode="1x EVDO"
		fi
	fi

	u2="-"
	for count in $(seq  1 2); do
		readDMbyte
		u2="$u2$res-"
	done

	readDMbyte
	case $res in
	  129) idleMode="No Idle" ;;
	  130) idleMode="Idle" ;;
	  131) idleMode="Busy" ;;
	  *) idleMode="Unknown" ;;
	esac

	for count in $(seq  1 4); do
		readDMbyte
		u2="$u2$res-"
	done

	readDMbyte
	rssi1X=$res
	readDMbyte
	rssiEVDO=$res
	readDMbyte
	if [ $res == 4 ]; then
		sigmode="EVDO"
	else
		sigmode="1x"
	fi

	readDMbyte
	u3="-$res-"

	readDMbyte
	uread=$res

	u4="-"
	for count in $(seq  1 3); do
		readDMbyte
		u4="$u4$res-"
	done

	return 0
}

# main()

case $2 in
	i) getModemInfo $1
	   echo "$res"
	   ;;
	s) getSignalInfo $1 
	   echo "$res"
	   ;;
	t) getTraffic $1 "Point-to-Point"
	   echo "$res"
	   ;;
	r) getRequestInfo $1 $3
	   ret=$?
	   if [ $ret != 0 ]; then
		   echo "$res"
		   exit 3
	   fi
	   echo "$res"
	   ;;
	*) echo "Error: bad command $2"
	   exit 4
	   ;;
esac

