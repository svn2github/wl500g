diff -uBp iptables.orig/extensions/libxt_MARK.c iptables/extensions/libxt_MARK.c
--- iptables.orig/extensions/libxt_MARK.c
+++ iptables/extensions/libxt_MARK.c
@@ -13,15 +13,6 @@ enum {
 	F_MARK = 1 << 0,
 };
 
-static void MARK_help(void)
-{
-	printf(
-"MARK target options:\n"
-"  --set-mark value                   Set nfmark value\n"
-"  --and-mark value                   Binary AND the nfmark with value\n"
-"  --or-mark  value                   Binary OR  the nfmark with value\n");
-}
-
 static const struct option MARK_opts[] = {
 	{ "set-mark", 1, NULL, '1' },
 	{ "and-mark", 1, NULL, '2' },
@@ -52,78 +43,6 @@ static void mark_tg_help(void)
 
 /* Function which parses command options; returns true if it
    ate an option */
-static int
-MARK_parse_v0(int c, char **argv, int invert, unsigned int *flags,
-              const void *entry, struct xt_entry_target **target)
-{
-	struct xt_mark_target_info *markinfo
-		= (struct xt_mark_target_info *)(*target)->data;
-	unsigned int mark = 0;
-
-	switch (c) {
-	case '1':
-		if (!xtables_strtoui(optarg, NULL, &mark, 0, UINT32_MAX))
-			xtables_error(PARAMETER_PROBLEM, "Bad MARK value \"%s\"", optarg);
-		markinfo->mark = mark;
-		if (*flags)
-			xtables_error(PARAMETER_PROBLEM,
-			           "MARK target: Can't specify --set-mark twice");
-		*flags = 1;
-		break;
-	case '2':
-		xtables_error(PARAMETER_PROBLEM,
-			   "MARK target: kernel too old for --and-mark");
-	case '3':
-		xtables_error(PARAMETER_PROBLEM,
-			   "MARK target: kernel too old for --or-mark");
-	default:
-		return 0;
-	}
-
-	return 1;
-}
-
-static void MARK_check(unsigned int flags)
-{
-	if (!flags)
-		xtables_error(PARAMETER_PROBLEM,
-		           "MARK target: Parameter --set/and/or-mark"
-			   " is required");
-}
-
-static int
-MARK_parse_v1(int c, char **argv, int invert, unsigned int *flags,
-              const void *entry, struct xt_entry_target **target)
-{
-	struct xt_mark_target_info_v1 *markinfo
-		= (struct xt_mark_target_info_v1 *)(*target)->data;
-	unsigned int mark = 0;
-
-	switch (c) {
-	case '1':
-	        markinfo->mode = XT_MARK_SET;
-		break;
-	case '2':
-	        markinfo->mode = XT_MARK_AND;
-		break;
-	case '3':
-	        markinfo->mode = XT_MARK_OR;
-		break;
-	default:
-		return 0;
-	}
-
-	if (!xtables_strtoui(optarg, NULL, &mark, 0, UINT32_MAX))
-		xtables_error(PARAMETER_PROBLEM, "Bad MARK value \"%s\"", optarg);
-	markinfo->mark = mark;
-	if (*flags)
-		xtables_error(PARAMETER_PROBLEM,
-			   "MARK target: Can't specify --set-mark twice");
-
-	*flags = 1;
-	return 1;
-}
-
 static int mark_tg_parse(int c, char **argv, int invert, unsigned int *flags,
                          const void *entry, struct xt_entry_target **target)
 {
@@ -192,50 +111,6 @@ static void mark_tg_check(unsigned int f
 		           "--{and,or,xor,set}-mark options is required");
 }
 
-static void
-print_mark(unsigned long mark)
-{
-	printf("0x%lx ", mark);
-}
-
-static void MARK_print_v0(const void *ip,
-                          const struct xt_entry_target *target, int numeric)
-{
-	const struct xt_mark_target_info *markinfo =
-		(const struct xt_mark_target_info *)target->data;
-	printf("MARK set ");
-	print_mark(markinfo->mark);
-}
-
-static void MARK_save_v0(const void *ip, const struct xt_entry_target *target)
-{
-	const struct xt_mark_target_info *markinfo =
-		(const struct xt_mark_target_info *)target->data;
-
-	printf("--set-mark ");
-	print_mark(markinfo->mark);
-}
-
-static void MARK_print_v1(const void *ip, const struct xt_entry_target *target,
-                          int numeric)
-{
-	const struct xt_mark_target_info_v1 *markinfo =
-		(const struct xt_mark_target_info_v1 *)target->data;
-
-	switch (markinfo->mode) {
-	case XT_MARK_SET:
-		printf("MARK set ");
-		break;
-	case XT_MARK_AND:
-		printf("MARK and ");
-		break;
-	case XT_MARK_OR: 
-		printf("MARK or ");
-		break;
-	}
-	print_mark(markinfo->mark);
-}
-
 static void mark_tg_print(const void *ip, const struct xt_entry_target *target,
                           int numeric)
 {
@@ -251,25 +126,6 @@ static void mark_tg_print(const void *ip
 		printf("MARK xset 0x%x/0x%x ", info->mark, info->mask);
 }
 
-static void MARK_save_v1(const void *ip, const struct xt_entry_target *target)
-{
-	const struct xt_mark_target_info_v1 *markinfo =
-		(const struct xt_mark_target_info_v1 *)target->data;
-
-	switch (markinfo->mode) {
-	case XT_MARK_SET:
-		printf("--set-mark ");
-		break;
-	case XT_MARK_AND:
-		printf("--and-mark ");
-		break;
-	case XT_MARK_OR: 
-		printf("--or-mark ");
-		break;
-	}
-	print_mark(markinfo->mark);
-}
-
 static void mark_tg_save(const void *ip, const struct xt_entry_target *target)
 {
 	const struct xt_mark_tginfo2 *info = (const void *)target->data;
@@ -277,36 +133,6 @@ static void mark_tg_save(const void *ip,
 	printf("--set-xmark 0x%x/0x%x ", info->mark, info->mask);
 }
 
-static struct xtables_target mark_target_v0 = {
-	.family		= NFPROTO_UNSPEC,
-	.name		= "MARK",
-	.version	= XTABLES_VERSION,
-	.revision	= 0,
-	.size		= XT_ALIGN(sizeof(struct xt_mark_target_info)),
-	.userspacesize	= XT_ALIGN(sizeof(struct xt_mark_target_info)),
-	.help		= MARK_help,
-	.parse		= MARK_parse_v0,
-	.final_check	= MARK_check,
-	.print		= MARK_print_v0,
-	.save		= MARK_save_v0,
-	.extra_opts	= MARK_opts,
-};
-
-static struct xtables_target mark_target_v1 = {
-	.family		= NFPROTO_IPV4,
-	.name		= "MARK",
-	.version	= XTABLES_VERSION,
-	.revision	= 1,
-	.size		= XT_ALIGN(sizeof(struct xt_mark_target_info_v1)),
-	.userspacesize	= XT_ALIGN(sizeof(struct xt_mark_target_info_v1)),
-	.help		= MARK_help,
-	.parse		= MARK_parse_v1,
-	.final_check	= MARK_check,
-	.print		= MARK_print_v1,
-	.save		= MARK_save_v1,
-	.extra_opts	= MARK_opts,
-};
-
 static struct xtables_target mark_tg_reg_v2 = {
 	.version       = XTABLES_VERSION,
 	.name          = "MARK",
@@ -324,7 +150,5 @@ static struct xtables_target mark_tg_reg
 
 void _init(void)
 {
-	xtables_register_target(&mark_target_v0);
-	xtables_register_target(&mark_target_v1);
 	xtables_register_target(&mark_tg_reg_v2);
 }
