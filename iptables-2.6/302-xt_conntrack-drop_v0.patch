diff -BurpN iptables.orig/extensions/libxt_conntrack.c iptables/extensions/libxt_conntrack.c
--- iptables.orig/extensions/libxt_conntrack.c	2011-03-13 19:29:49.000000000 +0000
+++ iptables/extensions/libxt_conntrack.c	2011-04-05 18:02:09.000000000 +0400
@@ -46,18 +46,6 @@ static void conntrack_mt_help(void)
 "    --ctdir {ORIGINAL|REPLY}   Flow direction of packet\n");
 }
 
-static const struct option conntrack_mt_opts_v0[] = {
-	{.name = "ctstate",   .has_arg = true, .val = '1'},
-	{.name = "ctproto",   .has_arg = true, .val = '2'},
-	{.name = "ctorigsrc", .has_arg = true, .val = '3'},
-	{.name = "ctorigdst", .has_arg = true, .val = '4'},
-	{.name = "ctreplsrc", .has_arg = true, .val = '5'},
-	{.name = "ctrepldst", .has_arg = true, .val = '6'},
-	{.name = "ctstatus",  .has_arg = true, .val = '7'},
-	{.name = "ctexpire",  .has_arg = true, .val = '8'},
-	{ .name = NULL }
-};
-
 static const struct option conntrack_mt_opts[] = {
 	{.name = "ctstate",       .has_arg = true, .val = '1'},
 	{.name = "ctproto",       .has_arg = true, .val = '2'},
@@ -75,46 +63,6 @@ static const struct option conntrack_mt_
 	{.name = NULL},
 };
 
-static int
-parse_state(const char *state, size_t len, struct xt_conntrack_info *sinfo)
-{
-	if (strncasecmp(state, "INVALID", len) == 0)
-		sinfo->statemask |= XT_CONNTRACK_STATE_INVALID;
-	else if (strncasecmp(state, "NEW", len) == 0)
-		sinfo->statemask |= XT_CONNTRACK_STATE_BIT(IP_CT_NEW);
-	else if (strncasecmp(state, "ESTABLISHED", len) == 0)
-		sinfo->statemask |= XT_CONNTRACK_STATE_BIT(IP_CT_ESTABLISHED);
-	else if (strncasecmp(state, "RELATED", len) == 0)
-		sinfo->statemask |= XT_CONNTRACK_STATE_BIT(IP_CT_RELATED);
-	else if (strncasecmp(state, "UNTRACKED", len) == 0)
-		sinfo->statemask |= XT_CONNTRACK_STATE_UNTRACKED;
-	else if (strncasecmp(state, "SNAT", len) == 0)
-		sinfo->statemask |= XT_CONNTRACK_STATE_SNAT;
-	else if (strncasecmp(state, "DNAT", len) == 0)
-		sinfo->statemask |= XT_CONNTRACK_STATE_DNAT;
-	else
-		return 0;
-	return 1;
-}
-
-static void
-parse_states(const char *arg, struct xt_conntrack_info *sinfo)
-{
-	const char *comma;
-
-	while ((comma = strchr(arg, ',')) != NULL) {
-		if (comma == arg || !parse_state(arg, comma-arg, sinfo))
-			xtables_error(PARAMETER_PROBLEM, "Bad ctstate \"%s\"", arg);
-		arg = comma+1;
-	}
-	if (!*arg)
-		xtables_error(PARAMETER_PROBLEM, "\"--ctstate\" requires a list of "
-					      "states with no spaces, e.g. "
-					      "ESTABLISHED,RELATED");
-	if (strlen(arg) == 0 || !parse_state(arg, strlen(arg), sinfo))
-		xtables_error(PARAMETER_PROBLEM, "Bad ctstate \"%s\"", arg);
-}
-
 static bool
 conntrack_ps_state(struct xt_conntrack_mtinfo2 *info, const char *state,
                    size_t z)
@@ -154,41 +102,6 @@ conntrack_ps_states(struct xt_conntrack_
 		xtables_error(PARAMETER_PROBLEM, "Bad ctstate \"%s\"", arg);
 }
 
-static int
-parse_status(const char *status, size_t len, struct xt_conntrack_info *sinfo)
-{
-	if (strncasecmp(status, "NONE", len) == 0)
-		sinfo->statusmask |= 0;
-	else if (strncasecmp(status, "EXPECTED", len) == 0)
-		sinfo->statusmask |= IPS_EXPECTED;
-	else if (strncasecmp(status, "SEEN_REPLY", len) == 0)
-		sinfo->statusmask |= IPS_SEEN_REPLY;
-	else if (strncasecmp(status, "ASSURED", len) == 0)
-		sinfo->statusmask |= IPS_ASSURED;
-#ifdef IPS_CONFIRMED
-	else if (strncasecmp(status, "CONFIRMED", len) == 0)
-		sinfo->statusmask |= IPS_CONFIRMED;
-#endif
-	else
-		return 0;
-	return 1;
-}
-
-static void
-parse_statuses(const char *arg, struct xt_conntrack_info *sinfo)
-{
-	const char *comma;
-
-	while ((comma = strchr(arg, ',')) != NULL) {
-		if (comma == arg || !parse_status(arg, comma-arg, sinfo))
-			xtables_error(PARAMETER_PROBLEM, "Bad ctstatus \"%s\"", arg);
-		arg = comma+1;
-	}
-
-	if (strlen(arg) == 0 || !parse_status(arg, strlen(arg), sinfo))
-		xtables_error(PARAMETER_PROBLEM, "Bad ctstatus \"%s\"", arg);
-}
-
 static bool
 conntrack_ps_status(struct xt_conntrack_mtinfo2 *info, const char *status,
                     size_t z)
@@ -224,45 +137,6 @@ conntrack_ps_statuses(struct xt_conntrac
 		xtables_error(PARAMETER_PROBLEM, "Bad ctstatus \"%s\"", arg);
 }
 
-static unsigned long
-parse_expire(const char *s)
-{
-	unsigned int len;
-
-	if (!xtables_strtoui(s, NULL, &len, 0, UINT32_MAX))
-		xtables_error(PARAMETER_PROBLEM, "expire value invalid: \"%s\"\n", s);
-	else
-		return len;
-}
-
-/* If a single value is provided, min and max are both set to the value */
-static void
-parse_expires(const char *s, struct xt_conntrack_info *sinfo)
-{
-	char *buffer;
-	char *cp;
-
-	buffer = strdup(s);
-	if ((cp = strchr(buffer, ':')) == NULL)
-		sinfo->expires_min = sinfo->expires_max =
-			parse_expire(buffer);
-	else {
-		*cp = '\0';
-		cp++;
-
-		sinfo->expires_min = buffer[0] ? parse_expire(buffer) : 0;
-		sinfo->expires_max = cp[0]
-			? parse_expire(cp)
-			: (unsigned long)-1;
-	}
-	free(buffer);
-
-	if (sinfo->expires_min > sinfo->expires_max)
-		xtables_error(PARAMETER_PROBLEM,
-		           "expire min. range value `%lu' greater than max. "
-		           "range value `%lu'", sinfo->expires_min, sinfo->expires_max);
-}
-
 static void
 conntrack_ps_expires(struct xt_conntrack_mtinfo2 *info, const char *s)
 {
@@ -287,156 +161,6 @@ conntrack_ps_expires(struct xt_conntrack
 	info->expires_max = max;
 }
 
-static int conntrack_parse(int c, char **argv, int invert, unsigned int *flags,
-                           const void *entry, struct xt_entry_match **match)
-{
-	struct xt_conntrack_info *sinfo = (void *)(*match)->data;
-	char *protocol = NULL;
-	unsigned int naddrs = 0;
-	struct in_addr *addrs = NULL;
-
-
-	switch (c) {
-	case '1':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		parse_states(argv[optind-1], sinfo);
-		if (invert) {
-			sinfo->invflags |= XT_CONNTRACK_STATE;
-		}
-		sinfo->flags |= XT_CONNTRACK_STATE;
-		break;
-
-	case '2':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		if(invert)
-			sinfo->invflags |= XT_CONNTRACK_PROTO;
-
-		/* Canonicalize into lower case */
-		for (protocol = argv[optind-1]; *protocol; protocol++)
-			*protocol = tolower(*protocol);
-
-		protocol = argv[optind-1];
-		sinfo->tuple[IP_CT_DIR_ORIGINAL].dst.protonum =
-			xtables_parse_protocol(protocol);
-
-		if (sinfo->tuple[IP_CT_DIR_ORIGINAL].dst.protonum == 0
-		    && (sinfo->invflags & XT_INV_PROTO))
-			xtables_error(PARAMETER_PROBLEM,
-				   "rule would never match protocol");
-
-		sinfo->flags |= XT_CONNTRACK_PROTO;
-		break;
-
-	case '3':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		if (invert)
-			sinfo->invflags |= XT_CONNTRACK_ORIGSRC;
-
-		xtables_ipparse_any(argv[optind-1], &addrs,
-					&sinfo->sipmsk[IP_CT_DIR_ORIGINAL],
-					&naddrs);
-		if(naddrs > 1)
-			xtables_error(PARAMETER_PROBLEM,
-				"multiple IP addresses not allowed");
-
-		if(naddrs == 1) {
-			sinfo->tuple[IP_CT_DIR_ORIGINAL].src.ip = addrs[0].s_addr;
-		}
-
-		sinfo->flags |= XT_CONNTRACK_ORIGSRC;
-		break;
-
-	case '4':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		if (invert)
-			sinfo->invflags |= XT_CONNTRACK_ORIGDST;
-
-		xtables_ipparse_any(argv[optind-1], &addrs,
-					&sinfo->dipmsk[IP_CT_DIR_ORIGINAL],
-					&naddrs);
-		if(naddrs > 1)
-			xtables_error(PARAMETER_PROBLEM,
-				"multiple IP addresses not allowed");
-
-		if(naddrs == 1) {
-			sinfo->tuple[IP_CT_DIR_ORIGINAL].dst.ip = addrs[0].s_addr;
-		}
-
-		sinfo->flags |= XT_CONNTRACK_ORIGDST;
-		break;
-
-	case '5':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		if (invert)
-			sinfo->invflags |= XT_CONNTRACK_REPLSRC;
-
-		xtables_ipparse_any(argv[optind-1], &addrs,
-					&sinfo->sipmsk[IP_CT_DIR_REPLY],
-					&naddrs);
-		if(naddrs > 1)
-			xtables_error(PARAMETER_PROBLEM,
-				"multiple IP addresses not allowed");
-
-		if(naddrs == 1) {
-			sinfo->tuple[IP_CT_DIR_REPLY].src.ip = addrs[0].s_addr;
-		}
-
-		sinfo->flags |= XT_CONNTRACK_REPLSRC;
-		break;
-
-	case '6':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		if (invert)
-			sinfo->invflags |= XT_CONNTRACK_REPLDST;
-
-		xtables_ipparse_any(argv[optind-1], &addrs,
-					&sinfo->dipmsk[IP_CT_DIR_REPLY],
-					&naddrs);
-		if(naddrs > 1)
-			xtables_error(PARAMETER_PROBLEM,
-				"multiple IP addresses not allowed");
-
-		if(naddrs == 1) {
-			sinfo->tuple[IP_CT_DIR_REPLY].dst.ip = addrs[0].s_addr;
-		}
-
-		sinfo->flags |= XT_CONNTRACK_REPLDST;
-		break;
-
-	case '7':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		parse_statuses(argv[optind-1], sinfo);
-		if (invert) {
-			sinfo->invflags |= XT_CONNTRACK_STATUS;
-		}
-		sinfo->flags |= XT_CONNTRACK_STATUS;
-		break;
-
-	case '8':
-		xtables_check_inverse(optarg, &invert, &optind, 0);
-
-		parse_expires(argv[optind-1], sinfo);
-		if (invert) {
-			sinfo->invflags |= XT_CONNTRACK_EXPIRES;
-		}
-		sinfo->flags |= XT_CONNTRACK_EXPIRES;
-		break;
-
-	default:
-		return 0;
-	}
-
-	*flags = sinfo->flags;
-	return 1;
-}
-
 static int
 conntrack_mt_parse(int c, bool invert, unsigned int *flags,
                    struct xt_conntrack_mtinfo2 *info)
@@ -834,121 +558,6 @@ conntrack_dump_addr(const union nf_inet_
 }
 
 static void
-print_addr(const struct in_addr *addr, const struct in_addr *mask,
-           int inv, int numeric)
-{
-	char buf[BUFSIZ];
-
-	if (inv)
-	       	printf("! ");
-
-	if (mask->s_addr == 0L && !numeric)
-		printf("%s ", "anywhere");
-	else {
-		if (numeric)
-			strcpy(buf, xtables_ipaddr_to_numeric(addr));
-		else
-			strcpy(buf, xtables_ipaddr_to_anyname(addr));
-		strcat(buf, xtables_ipmask_to_numeric(mask));
-		printf("%s ", buf);
-	}
-}
-
-static void
-matchinfo_print(const void *ip, const struct xt_entry_match *match, int numeric, const char *optpfx)
-{
-	const struct xt_conntrack_info *sinfo = (const void *)match->data;
-
-	if(sinfo->flags & XT_CONNTRACK_STATE) {
-        	if (sinfo->invflags & XT_CONNTRACK_STATE)
-                	printf("! ");
-		printf("%sctstate ", optpfx);
-		print_state(sinfo->statemask);
-	}
-
-	if(sinfo->flags & XT_CONNTRACK_PROTO) {
-        	if (sinfo->invflags & XT_CONNTRACK_PROTO)
-                	printf("! ");
-		printf("%sctproto ", optpfx);
-		printf("%u ", sinfo->tuple[IP_CT_DIR_ORIGINAL].dst.protonum);
-	}
-
-	if(sinfo->flags & XT_CONNTRACK_ORIGSRC) {
-		if (sinfo->invflags & XT_CONNTRACK_ORIGSRC)
-			printf("! ");
-		printf("%sctorigsrc ", optpfx);
-
-		print_addr(
-		    (struct in_addr *)&sinfo->tuple[IP_CT_DIR_ORIGINAL].src.ip,
-		    &sinfo->sipmsk[IP_CT_DIR_ORIGINAL],
-		    false,
-		    numeric);
-	}
-
-	if(sinfo->flags & XT_CONNTRACK_ORIGDST) {
-		if (sinfo->invflags & XT_CONNTRACK_ORIGDST)
-			printf("! ");
-		printf("%sctorigdst ", optpfx);
-
-		print_addr(
-		    (struct in_addr *)&sinfo->tuple[IP_CT_DIR_ORIGINAL].dst.ip,
-		    &sinfo->dipmsk[IP_CT_DIR_ORIGINAL],
-		    false,
-		    numeric);
-	}
-
-	if(sinfo->flags & XT_CONNTRACK_REPLSRC) {
-		if (sinfo->invflags & XT_CONNTRACK_REPLSRC)
-			printf("! ");
-		printf("%sctreplsrc ", optpfx);
-
-		print_addr(
-		    (struct in_addr *)&sinfo->tuple[IP_CT_DIR_REPLY].src.ip,
-		    &sinfo->sipmsk[IP_CT_DIR_REPLY],
-		    false,
-		    numeric);
-	}
-
-	if(sinfo->flags & XT_CONNTRACK_REPLDST) {
-		if (sinfo->invflags & XT_CONNTRACK_REPLDST)
-			printf("! ");
-		printf("%sctrepldst ", optpfx);
-
-		print_addr(
-		    (struct in_addr *)&sinfo->tuple[IP_CT_DIR_REPLY].dst.ip,
-		    &sinfo->dipmsk[IP_CT_DIR_REPLY],
-		    false,
-		    numeric);
-	}
-
-	if(sinfo->flags & XT_CONNTRACK_STATUS) {
-        	if (sinfo->invflags & XT_CONNTRACK_STATUS)
-                	printf("! ");
-		printf("%sctstatus ", optpfx);
-		print_status(sinfo->statusmask);
-	}
-
-	if(sinfo->flags & XT_CONNTRACK_EXPIRES) {
-        	if (sinfo->invflags & XT_CONNTRACK_EXPIRES)
-                	printf("! ");
-		printf("%sctexpire ", optpfx);
-
-        	if (sinfo->expires_max == sinfo->expires_min)
-                	printf("%lu ", sinfo->expires_min);
-        	else
-                	printf("%lu:%lu ", sinfo->expires_min, sinfo->expires_max);
-	}
-
-	if (sinfo->flags & XT_CONNTRACK_DIRECTION) {
-		if (sinfo->invflags & XT_CONNTRACK_DIRECTION)
-			printf("%sctdir REPLY ", optpfx);
-		else
-			printf("%sctdir ORIGINAL ", optpfx);
-	}
-
-}
-
-static void
 conntrack_dump(const struct xt_conntrack_mtinfo2 *info, const char *prefix,
                unsigned int family, bool numeric)
 {
@@ -1052,12 +661,6 @@ conntrack_dump(const struct xt_conntrack
 	}
 }
 
-static void conntrack_print(const void *ip, const struct xt_entry_match *match,
-                            int numeric)
-{
-	matchinfo_print(ip, match, numeric, "");
-}
-
 static void
 conntrack1_mt4_print(const void *ip, const struct xt_entry_match *match,
                      int numeric)
@@ -1094,11 +697,6 @@ conntrack_mt6_print(const void *ip, cons
 	conntrack_dump((const void *)match->data, "", NFPROTO_IPV6, numeric);
 }
 
-static void conntrack_save(const void *ip, const struct xt_entry_match *match)
-{
-	matchinfo_print(ip, match, 1, "--");
-}
-
 static void conntrack_mt_save(const void *ip,
                               const struct xt_entry_match *match)
 {
@@ -1131,21 +729,6 @@ conntrack1_mt6_save(const void *ip, cons
 	conntrack_dump(&up, "--", NFPROTO_IPV6, true);
 }
 
-static struct xtables_match conntrack_mt_v0_reg = {
-	.version       = XTABLES_VERSION,
-	.name          = "conntrack",
-	.revision      = 0,
-	.family        = NFPROTO_IPV4,
-	.size          = XT_ALIGN(sizeof(struct xt_conntrack_info)),
-	.userspacesize = XT_ALIGN(sizeof(struct xt_conntrack_info)),
-	.help          = conntrack_mt_help,
-	.parse         = conntrack_parse,
-	.final_check   = conntrack_mt_check,
-	.print         = conntrack_print,
-	.save          = conntrack_save,
-	.extra_opts    = conntrack_mt_opts_v0,
-};
-
 static struct xtables_match conntrack_mt_v1_reg = {
 	.version       = XTABLES_VERSION,
 	.name          = "conntrack",
@@ -1208,7 +791,6 @@ static struct xtables_match conntrack_mt
 
 void _init(void)
 {
-	xtables_register_match(&conntrack_mt_v0_reg);
 	xtables_register_match(&conntrack_mt_v1_reg);
 	xtables_register_match(&conntrack_mt6_v1_reg);
 	xtables_register_match(&conntrack_mt_v2_reg);
