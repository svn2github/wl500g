extensions: policy: Patches from upstream
 policy: use direct xt_policy_info instead of ipt/ip6t
 policy: merge ipv6 and ipv4 variant
 policy: fix error message showing wrong option

---
 extensions/libip6t_policy.c |  464 --------------------------------------------
 extensions/libxt_policy.c   |  209 +++++++++++++------
 2 files changed, 146 insertions(+), 527 deletions(-)

diff --git iptables-1.4.3/extensions/libip6t_policy.c iptables/extensions/libip6t_policy.c
--- iptables-1.4.3/extensions/libip6t_policy.c	2009-04-06 15:09:17.000000000 +0400
+++ iptables/extensions/libip6t_policy.c	1970-01-01 03:00:00.000000000 +0300
@@ -1,464 +0,0 @@
-/* Shared library add-on to ip6tables to add policy support. */
-#include <stdio.h>
-#include <netdb.h>
-#include <string.h>
-#include <stdlib.h>
-#include <syslog.h>
-#include <getopt.h>
-#include <netdb.h>
-#include <errno.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <arpa/inet.h>
-#include <xtables.h>
-#include <libiptc/libip6tc.h>
-#include <linux/netfilter_ipv6/ip6t_policy.h>
-
-/*
- * HACK: global pointer to current matchinfo for making
- * final checks and adjustments in final_check.
- */
-static struct ip6t_policy_info *policy_info;
-
-static void policy_help(void)
-{
-	printf(
-"policy match options:\n"
-"  --dir in|out			match policy applied during decapsulation/\n"
-"				policy to be applied during encapsulation\n"
-"  --pol none|ipsec		match policy\n"
-"  --strict 			match entire policy instead of single element\n"
-"				at any position\n"
-"[!] --reqid reqid		match reqid\n"
-"[!] --spi spi			match SPI\n"
-"[!] --proto proto		match protocol (ah/esp/ipcomp)\n"
-"[!] --mode mode 		match mode (transport/tunnel)\n"
-"[!] --tunnel-src addr/masklen	match tunnel source\n"
-"[!] --tunnel-dst addr/masklen	match tunnel destination\n"
-"  --next 			begin next element in policy\n");
-}
-
-static const struct option policy_opts[] =
-{
-	{
-		.name		= "dir",
-		.has_arg	= 1,
-		.val		= '1',
-	},
-	{
-		.name		= "pol",
-		.has_arg	= 1,
-		.val		= '2',
-	},
-	{
-		.name		= "strict",
-		.val		= '3'
-	},
-	{
-		.name		= "reqid",
-		.has_arg	= 1,
-		.val		= '4',
-	},
-	{
-		.name		= "spi",
-		.has_arg	= 1,
-		.val		= '5'
-	},
-	{
-		.name		= "tunnel-src",
-		.has_arg	= 1,
-		.val		= '6'
-	},
-	{
-		.name		= "tunnel-dst",
-		.has_arg	= 1,
-		.val		= '7'
-	},
-	{
-		.name		= "proto",
-		.has_arg	= 1,
-		.val		= '8'
-	},
-	{
-		.name		= "mode",
-		.has_arg	= 1,
-		.val		= '9'
-	},
-	{
-		.name		= "next",
-		.val		= 'a'
-	},
-	{ .name = NULL }
-};
-
-/* FIXME - Duplicated code from ip6tables.c */
-/* Duplicated to stop too many changes in other files .... */
-static void
-in6addrcpy(struct in6_addr *dst, struct in6_addr *src)
-{
-        memcpy(dst, src, sizeof(struct in6_addr));
-        /* dst->s6_addr = src->s6_addr; */
-}
-
-static char *
-addr_to_numeric(const struct in6_addr *addrp)
-{
-        /* 0000:0000:0000:0000:0000:000.000.000.000
-	 * 0000:0000:0000:0000:0000:0000:0000:0000 */
-        static char buf[50+1];
-        return (char *)inet_ntop(AF_INET6, addrp, buf, sizeof(buf));
-}
-
-static char *
-mask_to_numeric(const struct in6_addr *addrp)
-{
-        static char buf[50+2];
-        int l = ipv6_prefix_length(addrp);
-        if (l == -1) {
-		strcpy(buf, "/");
-		strcat(buf, addr_to_numeric(addrp));
-		return buf;
-	}
-	sprintf(buf, "/%d", l);
-	return buf;
-}
-
-static int parse_direction(char *s)
-{
-	if (strcmp(s, "in") == 0)
-		return IP6T_POLICY_MATCH_IN;
-	if (strcmp(s, "out") == 0)
-		return IP6T_POLICY_MATCH_OUT;
-	xtables_error(PARAMETER_PROBLEM, "policy_match: invalid dir \"%s\"", s);
-}
-
-static int parse_policy(char *s)
-{
-	if (strcmp(s, "none") == 0)
-		return IP6T_POLICY_MATCH_NONE;
-	if (strcmp(s, "ipsec") == 0)
-		return 0;
-	xtables_error(PARAMETER_PROBLEM, "policy match: invalid policy \"%s\"", s);
-}
-
-static int parse_mode(char *s)
-{
-	if (strcmp(s, "transport") == 0)
-		return IP6T_POLICY_MODE_TRANSPORT;
-	if (strcmp(s, "tunnel") == 0)
-		return IP6T_POLICY_MODE_TUNNEL;
-	xtables_error(PARAMETER_PROBLEM, "policy match: invalid mode \"%s\"", s);
-}
-
-static int policy_parse(int c, char **argv, int invert, unsigned int *flags,
-                        const void *entry, struct xt_entry_match **match)
-{
-	struct ip6t_policy_info *info = (void *)(*match)->data;
-	struct ip6t_policy_elem *e = &info->pol[info->len];
-	struct in6_addr *addr = NULL, mask;
-	unsigned int naddr = 0, num;
-	int mode;
-
-	xtables_check_inverse(optarg, &invert, &optind, 0);
-
-	switch (c) {
-	case '1':
-		if (info->flags & (IP6T_POLICY_MATCH_IN|IP6T_POLICY_MATCH_OUT))
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --dir option");
-		if (invert)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: can't invert --dir option");
-
-		info->flags |= parse_direction(argv[optind-1]);
-		break;
-	case '2':
-		if (invert)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: can't invert --policy option");
-
-		info->flags |= parse_policy(argv[optind-1]);
-		break;
-	case '3':
-		if (info->flags & IP6T_POLICY_MATCH_STRICT)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --strict option");
-
-		if (invert)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: can't invert --strict option");
-
-		info->flags |= IP6T_POLICY_MATCH_STRICT;
-		break;
-	case '4':
-		if (e->match.reqid)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --reqid option");
-
-		e->match.reqid = 1;
-		e->invert.reqid = invert;
-		if (!xtables_strtoui(optarg, NULL, &num, 0, UINT32_MAX))
-			xtables_param_act(XTF_BAD_VALUE, "policy", "--reqid", optarg);
-		e->reqid = num;
-		break;
-	case '5':
-		if (e->match.spi)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --spi option");
-
-		e->match.spi = 1;
-		e->invert.spi = invert;
-		if (!xtables_strtoui(optarg, NULL, &num, 0, UINT32_MAX))
-			xtables_param_act(XTF_BAD_VALUE, "policy", "--spi", optarg);
-		e->spi = num;
-		break;
-	case '6':
-		if (e->match.saddr)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --tunnel-src option");
-
-		xtables_ip6parse_any(argv[optind-1], &addr, &mask, &naddr);
-		if (naddr > 1)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: name resolves to multiple IPs");
-
-		e->match.saddr = 1;
-		e->invert.saddr = invert;
-		in6addrcpy(&e->saddr.a6, addr);
-		in6addrcpy(&e->smask.a6, &mask);
-                break;
-	case '7':
-		if (e->match.daddr)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --tunnel-dst option");
-
-		xtables_ip6parse_any(argv[optind-1], &addr, &mask, &naddr);
-		if (naddr > 1)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: name resolves to multiple IPs");
-
-		e->match.daddr = 1;
-		e->invert.daddr = invert;
-		in6addrcpy(&e->daddr.a6, addr);
-		in6addrcpy(&e->dmask.a6, &mask);
-		break;
-	case '8':
-		if (e->match.proto)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --proto option");
-
-		e->proto = xtables_parse_protocol(argv[optind-1]);
-		if (e->proto != IPPROTO_AH && e->proto != IPPROTO_ESP &&
-		    e->proto != IPPROTO_COMP)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: protocol must ah/esp/ipcomp");
-		e->match.proto = 1;
-		e->invert.proto = invert;
-		break;
-	case '9':
-		if (e->match.mode)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: double --mode option");
-
-		mode = parse_mode(argv[optind-1]);
-		e->match.mode = 1;
-		e->invert.mode = invert;
-		e->mode = mode;
-		break;
-	case 'a':
-		if (invert)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: can't invert --next option");
-
-		if (++info->len == IP6T_POLICY_MAX_ELEM)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: maximum policy depth reached");
-		break;
-	default:
-		return 0;
-	}
-
-	policy_info = info;
-	return 1;
-}
-
-static void policy_check(unsigned int flags)
-{
-	struct ip6t_policy_info *info = policy_info;
-	struct ip6t_policy_elem *e;
-	int i;
-
-	if (info == NULL)
-		xtables_error(PARAMETER_PROBLEM,
-		           "policy match: no parameters given");
-
-	if (!(info->flags & (IP6T_POLICY_MATCH_IN|IP6T_POLICY_MATCH_OUT)))
-		xtables_error(PARAMETER_PROBLEM,
-		           "policy match: neither --in nor --out specified");
-
-	if (info->flags & IP6T_POLICY_MATCH_NONE) {
-		if (info->flags & IP6T_POLICY_MATCH_STRICT)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: policy none but --strict given");
-
-		if (info->len != 0)
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: policy none but policy given");
-	} else
-		info->len++;	/* increase len by 1, no --next after last element */
-
-	if (!(info->flags & IP6T_POLICY_MATCH_STRICT) && info->len > 1)
-		xtables_error(PARAMETER_PROBLEM,
-		           "policy match: multiple elements but no --strict");
-
-	for (i = 0; i < info->len; i++) {
-		e = &info->pol[i];
-
-                if (info->flags & IP6T_POLICY_MATCH_STRICT &&
-		    !(e->match.reqid || e->match.spi || e->match.saddr ||
-                      e->match.daddr || e->match.proto || e->match.mode))
-			xtables_error(PARAMETER_PROBLEM,
-                                   "policy match: empty policy element");
-
-		if ((e->match.saddr || e->match.daddr)
-		    && ((e->mode == IP6T_POLICY_MODE_TUNNEL && e->invert.mode) ||
-		        (e->mode == IP6T_POLICY_MODE_TRANSPORT && !e->invert.mode)))
-			xtables_error(PARAMETER_PROBLEM,
-			           "policy match: --tunnel-src/--tunnel-dst "
-			           "is only valid in tunnel mode");
-	}
-}
-
-static void print_mode(char *prefix, u_int8_t mode, int numeric)
-{
-	printf("%smode ", prefix);
-
-	switch (mode) {
-	case IP6T_POLICY_MODE_TRANSPORT:
-		printf("transport ");
-		break;
-	case IP6T_POLICY_MODE_TUNNEL:
-		printf("tunnel ");
-		break;
-	default:
-		printf("??? ");
-		break;
-	}
-}
-
-static void print_proto(char *prefix, u_int8_t proto, int numeric)
-{
-	struct protoent *p = NULL;
-
-	printf("%sproto ", prefix);
-	if (!numeric)
-		p = getprotobynumber(proto);
-	if (p != NULL)
-		printf("%s ", p->p_name);
-	else
-		printf("%u ", proto);
-}
-
-#define PRINT_INVERT(x)		\
-do {				\
-	if (x)			\
-		printf("! ");	\
-} while(0)
-
-static void print_entry(char *prefix, const struct ip6t_policy_elem *e,
-                        int numeric)
-{
-	if (e->match.reqid) {
-		PRINT_INVERT(e->invert.reqid);
-		printf("%sreqid %u ", prefix, e->reqid);
-	}
-	if (e->match.spi) {
-		PRINT_INVERT(e->invert.spi);
-		printf("%sspi 0x%x ", prefix, e->spi);
-	}
-	if (e->match.proto) {
-		PRINT_INVERT(e->invert.proto);
-		print_proto(prefix, e->proto, numeric);
-	}
-	if (e->match.mode) {
-		PRINT_INVERT(e->invert.mode);
-		print_mode(prefix, e->mode, numeric);
-	}
-	if (e->match.daddr) {
-		PRINT_INVERT(e->invert.daddr);
-		printf("%stunnel-dst %s%s ", prefix,
-		       addr_to_numeric((struct in6_addr *)&e->daddr),
-		       mask_to_numeric((struct in6_addr *)&e->dmask));
-	}
-	if (e->match.saddr) {
-		PRINT_INVERT(e->invert.saddr);
-		printf("%stunnel-src %s%s ", prefix,
-		       addr_to_numeric((struct in6_addr *)&e->saddr),
-		       mask_to_numeric((struct in6_addr *)&e->smask));
-	}
-}
-
-static void print_flags(char *prefix, const struct ip6t_policy_info *info)
-{
-	if (info->flags & IP6T_POLICY_MATCH_IN)
-		printf("%sdir in ", prefix);
-	else
-		printf("%sdir out ", prefix);
-
-	if (info->flags & IP6T_POLICY_MATCH_NONE)
-		printf("%spol none ", prefix);
-	else
-		printf("%spol ipsec ", prefix);
-
-	if (info->flags & IP6T_POLICY_MATCH_STRICT)
-		printf("%sstrict ", prefix);
-}
-
-static void policy_print(const void *ip, const struct xt_entry_match *match,
-                         int numeric)
-{
-	const struct ip6t_policy_info *info = (void *)match->data;
-	unsigned int i;
-
-	printf("policy match ");
-	print_flags("", info);
-	for (i = 0; i < info->len; i++) {
-		if (info->len > 1)
-			printf("[%u] ", i);
-		print_entry("", &info->pol[i], numeric);
-	}
-
-	printf("\n");
-}
-
-static void policy_save(const void *ip, const struct xt_entry_match *match)
-{
-	const struct ip6t_policy_info *info = (void *)match->data;
-	unsigned int i;
-
-	print_flags("--", info);
-	for (i = 0; i < info->len; i++) {
-		print_entry("--", &info->pol[i], 0);
-		if (i + 1 < info->len)
-			printf("--next ");
-	}
-}
-
-static struct xtables_match policy_mt6_reg = {
-	.name		= "policy",
-	.version	= XTABLES_VERSION,
-	.family		= NFPROTO_IPV6,
-	.size		= XT_ALIGN(sizeof(struct ip6t_policy_info)),
-	.userspacesize	= XT_ALIGN(sizeof(struct ip6t_policy_info)),
-	.help		= policy_help,
-	.parse		= policy_parse,
-	.final_check	= policy_check,
-	.print		= policy_print,
-	.save		= policy_save,
-	.extra_opts	= policy_opts,
-};
-
-void _init(void)
-{
-	xtables_register_match(&policy_mt6_reg);
-}
diff --git iptables-1.4.3/extensions/libipt_policy.c iptables/extensions/libxt_policy.c
--- iptables-1.4.3/extensions/libipt_policy.c	2009-04-06 15:09:17.000000000 +0400
+++ iptables/extensions/libxt_policy.c	2011-03-02 21:52:42.000000000 +0300
similarity index 70%
rename from extensions/libipt_policy.c
rename to extensions/libxt_policy.c
index d6bad00..d17b1bb 100644
@@ -12,13 +12,13 @@
 #include <arpa/inet.h>
 #include <xtables.h>
 
-#include <linux/netfilter_ipv4/ipt_policy.h>
+#include <linux/netfilter/xt_policy.h>
 
 /*
  * HACK: global pointer to current matchinfo for making
  * final checks and adjustments in final_check.
  */
-static struct ipt_policy_info *policy_info;
+static struct xt_policy_info *policy_info;
 
 static void policy_help(void)
 {
@@ -94,16 +94,16 @@ static const struct option policy_opts[]
 static int parse_direction(char *s)
 {
 	if (strcmp(s, "in") == 0)
-		return IPT_POLICY_MATCH_IN;
+		return XT_POLICY_MATCH_IN;
 	if (strcmp(s, "out") == 0)
-		return IPT_POLICY_MATCH_OUT;
+		return XT_POLICY_MATCH_OUT;
 	xtables_error(PARAMETER_PROBLEM, "policy_match: invalid dir \"%s\"", s);
 }
 
 static int parse_policy(char *s)
 {
 	if (strcmp(s, "none") == 0)
-		return IPT_POLICY_MATCH_NONE;
+		return XT_POLICY_MATCH_NONE;
 	if (strcmp(s, "ipsec") == 0)
 		return 0;
 	xtables_error(PARAMETER_PROBLEM, "policy match: invalid policy \"%s\"", s);
@@ -112,18 +112,18 @@ static int parse_policy(char *s)
 static int parse_mode(char *s)
 {
 	if (strcmp(s, "transport") == 0)
-		return IPT_POLICY_MODE_TRANSPORT;
+		return XT_POLICY_MODE_TRANSPORT;
 	if (strcmp(s, "tunnel") == 0)
-		return IPT_POLICY_MODE_TUNNEL;
+		return XT_POLICY_MODE_TUNNEL;
 	xtables_error(PARAMETER_PROBLEM, "policy match: invalid mode \"%s\"", s);
 }
 
-static int policy_parse(int c, char **argv, int invert, unsigned int *flags,
-                        const void *entry, struct xt_entry_match **match)
+static int policy_parse(int c, int invert, unsigned int *flags,
+                        struct xt_policy_info *info, uint8_t family)
 {
-	struct ipt_policy_info *info = (void *)(*match)->data;
-	struct ipt_policy_elem *e = &info->pol[info->len];
+	struct xt_policy_elem *e = &info->pol[info->len];
 	struct in_addr *addr = NULL, mask;
+	struct in6_addr *addr6 = NULL, mask6;
 	unsigned int naddr = 0, num;
 	int mode;
 
@@ -131,24 +131,24 @@ static int policy_parse(int c, char **ar
 
 	switch (c) {
 	case '1':
-		if (info->flags & (IPT_POLICY_MATCH_IN|IPT_POLICY_MATCH_OUT))
+		if (info->flags & (XT_POLICY_MATCH_IN | XT_POLICY_MATCH_OUT))
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: double --dir option");
 		if (invert)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: can't invert --dir option");
 
-		info->flags |= parse_direction(argv[optind-1]);
+		info->flags |= parse_direction(optarg);
 		break;
 	case '2':
 		if (invert)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: can't invert --policy option");
 
-		info->flags |= parse_policy(argv[optind-1]);
+		info->flags |= parse_policy(optarg);
 		break;
 	case '3':
-		if (info->flags & IPT_POLICY_MATCH_STRICT)
+		if (info->flags & XT_POLICY_MATCH_STRICT)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: double --strict option");
 
@@ -156,7 +156,7 @@ static int policy_parse(int c, char **ar
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: can't invert --strict option");
 
-		info->flags |= IPT_POLICY_MATCH_STRICT;
+		info->flags |= XT_POLICY_MATCH_STRICT;
 		break;
 	case '4':
 		if (e->match.reqid)
@@ -185,37 +185,53 @@ static int policy_parse(int c, char **ar
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: double --tunnel-src option");
 
-		xtables_ipparse_any(argv[optind-1], &addr, &mask, &naddr);
+		if (family == NFPROTO_IPV6)
+			xtables_ip6parse_any(optarg, &addr6, &mask6, &naddr);
+		else
+			xtables_ipparse_any(optarg, &addr, &mask, &naddr);
 		if (naddr > 1)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: name resolves to multiple IPs");
 
 		e->match.saddr = 1;
 		e->invert.saddr = invert;
-		e->saddr.a4 = addr[0];
-		e->smask.a4 = mask;
+		if (family == NFPROTO_IPV6) {
+			memcpy(&e->saddr.a6, addr6, sizeof(*addr6));
+			memcpy(&e->smask.a6, &mask6, sizeof(mask6));
+		} else {
+			e->saddr.a4 = addr[0];
+			e->smask.a4 = mask;
+		}
                 break;
 	case '7':
 		if (e->match.daddr)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: double --tunnel-dst option");
 
-		xtables_ipparse_any(argv[optind-1], &addr, &mask, &naddr);
+		if (family == NFPROTO_IPV6)
+			xtables_ip6parse_any(optarg, &addr6, &mask6, &naddr);
+		else
+			xtables_ipparse_any(optarg, &addr, &mask, &naddr);
 		if (naddr > 1)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: name resolves to multiple IPs");
 
 		e->match.daddr = 1;
 		e->invert.daddr = invert;
-		e->daddr.a4 = addr[0];
-		e->dmask.a4 = mask;
+		if (family == NFPROTO_IPV6) {
+			memcpy(&e->daddr.a6, addr6, sizeof(*addr6));
+			memcpy(&e->dmask.a6, &mask6, sizeof(mask6));
+		} else {
+			e->daddr.a4 = addr[0];
+			e->dmask.a4 = mask;
+		}
 		break;
 	case '8':
 		if (e->match.proto)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: double --proto option");
 
-		e->proto = xtables_parse_protocol(argv[optind-1]);
+		e->proto = xtables_parse_protocol(optarg);
 		if (e->proto != IPPROTO_AH && e->proto != IPPROTO_ESP &&
 		    e->proto != IPPROTO_COMP)
 			xtables_error(PARAMETER_PROBLEM,
@@ -228,7 +244,7 @@ static int policy_parse(int c, char **ar
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: double --mode option");
 
-		mode = parse_mode(argv[optind-1]);
+		mode = parse_mode(optarg);
 		e->match.mode = 1;
 		e->invert.mode = invert;
 		e->mode = mode;
@@ -238,7 +254,7 @@ static int policy_parse(int c, char **ar
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: can't invert --next option");
 
-		if (++info->len == IPT_POLICY_MAX_ELEM)
+		if (++info->len == XT_POLICY_MAX_ELEM)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: maximum policy depth reached");
 		break;
@@ -250,22 +266,36 @@ static int policy_parse(int c, char **ar
 	return 1;
 }
 
+static int policy4_parse(int c, char **argv, int invert, unsigned int *flags,
+                         const void *entry, struct xt_entry_match **match)
+{
+	return policy_parse(c, invert, flags, (void *)(*match)->data,
+	       NFPROTO_IPV4);
+}
+
+static int policy6_parse(int c, char **argv, int invert, unsigned int *flags,
+                        const void *entry, struct xt_entry_match **match)
+{
+	return policy_parse(c, invert, flags, (void *)(*match)->data,
+	       NFPROTO_IPV6);
+}
+
 static void policy_check(unsigned int flags)
 {
-	struct ipt_policy_info *info = policy_info;
-	struct ipt_policy_elem *e;
+	struct xt_policy_info *info = policy_info;
+	struct xt_policy_elem *e;
 	int i;
 
 	if (info == NULL)
 		xtables_error(PARAMETER_PROBLEM,
 		           "policy match: no parameters given");
 
-	if (!(info->flags & (IPT_POLICY_MATCH_IN|IPT_POLICY_MATCH_OUT)))
+	if (!(info->flags & (XT_POLICY_MATCH_IN | XT_POLICY_MATCH_OUT)))
 		xtables_error(PARAMETER_PROBLEM,
-		           "policy match: neither --in nor --out specified");
+		           "policy match: neither --dir in nor --dir out specified");
 
-	if (info->flags & IPT_POLICY_MATCH_NONE) {
-		if (info->flags & IPT_POLICY_MATCH_STRICT)
+	if (info->flags & XT_POLICY_MATCH_NONE) {
+		if (info->flags & XT_POLICY_MATCH_STRICT)
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: policy none but --strict given");
 
@@ -275,37 +305,37 @@ static void policy_check(unsigned int fl
 	} else
 		info->len++;	/* increase len by 1, no --next after last element */
 
-	if (!(info->flags & IPT_POLICY_MATCH_STRICT) && info->len > 1)
+	if (!(info->flags & XT_POLICY_MATCH_STRICT) && info->len > 1)
 		xtables_error(PARAMETER_PROBLEM,
 		           "policy match: multiple elements but no --strict");
 
 	for (i = 0; i < info->len; i++) {
 		e = &info->pol[i];
 
-		if (info->flags & IPT_POLICY_MATCH_STRICT &&
+		if (info->flags & XT_POLICY_MATCH_STRICT &&
 		    !(e->match.reqid || e->match.spi || e->match.saddr ||
 		      e->match.daddr || e->match.proto || e->match.mode))
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: empty policy element");
 
 		if ((e->match.saddr || e->match.daddr)
-		    && ((e->mode == IPT_POLICY_MODE_TUNNEL && e->invert.mode) ||
-		        (e->mode == IPT_POLICY_MODE_TRANSPORT && !e->invert.mode)))
+		    && ((e->mode == XT_POLICY_MODE_TUNNEL && e->invert.mode) ||
+		        (e->mode == XT_POLICY_MODE_TRANSPORT && !e->invert.mode)))
 			xtables_error(PARAMETER_PROBLEM,
 			           "policy match: --tunnel-src/--tunnel-dst "
 			           "is only valid in tunnel mode");
 	}
 }
 
-static void print_mode(char *prefix, u_int8_t mode, int numeric)
+static void print_mode(const char *prefix, u_int8_t mode, int numeric)
 {
 	printf("%smode ", prefix);
 
 	switch (mode) {
-	case IPT_POLICY_MODE_TRANSPORT:
+	case XT_POLICY_MODE_TRANSPORT:
 		printf("transport ");
 		break;
-	case IPT_POLICY_MODE_TUNNEL:
+	case XT_POLICY_MODE_TUNNEL:
 		printf("tunnel ");
 		break;
 	default:
@@ -314,7 +344,7 @@ static void print_mode(char *prefix, u_i
 	}
 }
 
-static void print_proto(char *prefix, u_int8_t proto, int numeric)
+static void print_proto(const char *prefix, u_int8_t proto, int numeric)
 {
 	struct protoent *p = NULL;
 
@@ -333,8 +363,8 @@ do {				\
 		printf("! ");	\
 } while(0)
 
-static void print_entry(char *prefix, const struct ipt_policy_elem *e,
-                        int numeric)
+static void print_entry(const char *prefix, const struct xt_policy_elem *e,
+                        bool numeric, uint8_t family)
 {
 	if (e->match.reqid) {
 		PRINT_INVERT(e->invert.reqid);
@@ -354,38 +384,63 @@ static void print_entry(char *prefix, co
 	}
 	if (e->match.daddr) {
 		PRINT_INVERT(e->invert.daddr);
-		printf("%stunnel-dst %s%s ", prefix,
-		       xtables_ipaddr_to_numeric((const void *)&e->daddr),
-		       xtables_ipmask_to_numeric((const void *)&e->dmask));
+		if (family == NFPROTO_IPV6)
+			printf("%stunnel-dst %s%s ", prefix,
+			       xtables_ip6addr_to_numeric(&e->daddr.a6),
+			       xtables_ip6mask_to_numeric(&e->dmask.a6));
+		else
+			printf("%stunnel-dst %s%s ", prefix,
+			       xtables_ipaddr_to_numeric(&e->daddr.a4),
+			       xtables_ipmask_to_numeric(&e->dmask.a4));
 	}
 	if (e->match.saddr) {
 		PRINT_INVERT(e->invert.saddr);
-		printf("%stunnel-src %s%s ", prefix,
-		       xtables_ipaddr_to_numeric((const void *)&e->saddr),
-		       xtables_ipmask_to_numeric((const void *)&e->smask));
+		if (family == NFPROTO_IPV6)
+			printf("%stunnel-src %s%s ", prefix,
+			       xtables_ip6addr_to_numeric(&e->saddr.a6),
+			       xtables_ip6mask_to_numeric(&e->smask.a6));
+		else
+			printf("%stunnel-src %s%s ", prefix,
+			       xtables_ipaddr_to_numeric(&e->saddr.a4),
+			       xtables_ipmask_to_numeric(&e->smask.a4));
 	}
 }
 
-static void print_flags(char *prefix, const struct ipt_policy_info *info)
+static void print_flags(char *prefix, const struct xt_policy_info *info)
 {
-	if (info->flags & IPT_POLICY_MATCH_IN)
+	if (info->flags & XT_POLICY_MATCH_IN)
 		printf("%sdir in ", prefix);
 	else
 		printf("%sdir out ", prefix);
 
-	if (info->flags & IPT_POLICY_MATCH_NONE)
+	if (info->flags & XT_POLICY_MATCH_NONE)
 		printf("%spol none ", prefix);
 	else
 		printf("%spol ipsec ", prefix);
 
-	if (info->flags & IPT_POLICY_MATCH_STRICT)
+	if (info->flags & XT_POLICY_MATCH_STRICT)
 		printf("%sstrict ", prefix);
 }
 
-static void policy_print(const void *ip, const struct xt_entry_match *match,
-                         int numeric)
+static void policy4_print(const void *ip, const struct xt_entry_match *match,
+                          int numeric)
+{
+	const struct xt_policy_info *info = (void *)match->data;
+	unsigned int i;
+
+	printf("policy match ");
+	print_flags("", info);
+	for (i = 0; i < info->len; i++) {
+		if (info->len > 1)
+			printf("[%u] ", i);
+		print_entry("", &info->pol[i], numeric, NFPROTO_IPV4);
+	}
+}
+
+static void policy6_print(const void *ip, const struct xt_entry_match *match,
+                          int numeric)
 {
-	const struct ipt_policy_info *info = (void *)match->data;
+	const struct xt_policy_info *info = (void *)match->data;
 	unsigned int i;
 
 	printf("policy match ");
@@ -393,18 +448,31 @@ static void policy_print(const void *ip,
 	for (i = 0; i < info->len; i++) {
 		if (info->len > 1)
 			printf("[%u] ", i);
-		print_entry("", &info->pol[i], numeric);
+		print_entry("", &info->pol[i], numeric, NFPROTO_IPV6);
+	}
+}
+
+static void policy4_save(const void *ip, const struct xt_entry_match *match)
+{
+	const struct xt_policy_info *info = (void *)match->data;
+	unsigned int i;
+
+	print_flags("--", info);
+	for (i = 0; i < info->len; i++) {
+		print_entry("--", &info->pol[i], false, NFPROTO_IPV4);
+		if (i + 1 < info->len)
+			printf("--next ");
 	}
 }
 
-static void policy_save(const void *ip, const struct xt_entry_match *match)
+static void policy6_save(const void *ip, const struct xt_entry_match *match)
 {
-	const struct ipt_policy_info *info = (void *)match->data;
+	const struct xt_policy_info *info = (void *)match->data;
 	unsigned int i;
 
 	print_flags("--", info);
 	for (i = 0; i < info->len; i++) {
-		print_entry("--", &info->pol[i], 0);
+		print_entry("--", &info->pol[i], false, NFPROTO_IPV6);
 		if (i + 1 < info->len)
 			printf("--next ");
 	}
@@ -414,17 +482,32 @@ static struct xtables_match policy_mt_re
 	.name		= "policy",
 	.version	= XTABLES_VERSION,
 	.family		= NFPROTO_IPV4,
-	.size		= XT_ALIGN(sizeof(struct ipt_policy_info)),
-	.userspacesize	= XT_ALIGN(sizeof(struct ipt_policy_info)),
+	.size		= XT_ALIGN(sizeof(struct xt_policy_info)),
+	.userspacesize	= XT_ALIGN(sizeof(struct xt_policy_info)),
+	.help		= policy_help,
+	.parse		= policy4_parse,
+	.final_check	= policy_check,
+	.print		= policy4_print,
+	.save		= policy4_save,
+	.extra_opts	= policy_opts,
+};
+
+static struct xtables_match policy_mt6_reg = {
+	.name		= "policy",
+	.version	= XTABLES_VERSION,
+	.family		= NFPROTO_IPV6,
+	.size		= XT_ALIGN(sizeof(struct xt_policy_info)),
+	.userspacesize	= XT_ALIGN(sizeof(struct xt_policy_info)),
 	.help		= policy_help,
-	.parse		= policy_parse,
+	.parse		= policy6_parse,
 	.final_check	= policy_check,
-	.print		= policy_print,
-	.save		= policy_save,
+	.print		= policy6_print,
+	.save		= policy6_save,
 	.extra_opts	= policy_opts,
 };
 
 void _init(void)
 {
 	xtables_register_match(&policy_mt_reg);
+	xtables_register_match(&policy_mt6_reg);
 }
-- 
