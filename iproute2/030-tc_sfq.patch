Add esfq scheduler functionality to sfq, like in 2.6 kernels

--- iproute2-orig/tc/q_sfq.c	2002-01-11 04:04:27.000000000 +0000
+++ iproute2/tc/q_sfq.c	2009-09-28 13:40:01.000000000 +0000
@@ -8,6 +8,10 @@
  *
  * Authors:	Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>
  *
+ * Changes:	Alexander Atanasov, <alex@ssi.bg>
+ *		Alexander Clouter, <alex@digriz.org.uk>
+ *		Corey Hickey, <bugfood-c@fatooh.org>
+ *
  */
 
 #include <stdio.h>
@@ -15,6 +19,7 @@
 #include <unistd.h>
 #include <syslog.h>
 #include <fcntl.h>
+#include <math.h>
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
@@ -25,7 +30,15 @@
 
 static void explain(void)
 {
-	fprintf(stderr, "Usage: ... sfq [ limit NUMBER ] [ perturb SECS ] [ quantum BYTES ]\n");
+	fprintf(stderr, "Usage: ... sfq [ perturb SECS ] [ quantum BYTES ] [ depth FLOWS ]\n\t[ divisor HASHBITS ] [ limit PKTS ] [ hash HASHTYPE]\n");
+	fprintf(stderr,"Where: \n");
+	fprintf(stderr,"HASHTYPE := { classic | src | dst | fwmark | ctorigdst | ctorigsrc | ctrepldst | ctreplsrc | ctnatchg }\n");
+}
+
+static void explain1(char *arg)
+{
+    fprintf(stderr, "Illegal \"%s\"\n", arg);
+    explain();
 }
 
 #define usage() return(-1)
@@ -37,30 +50,74 @@ static int sfq_parse_opt(struct qdisc_ut
 
 	memset(&opt, 0, sizeof(opt));
 
+	opt.hash_kind= TCA_SFQ_HASH_CLASSIC;
+
 	while (argc > 0) {
 		if (strcmp(*argv, "quantum") == 0) {
 			NEXT_ARG();
 			if (get_size(&opt.quantum, *argv)) {
-				fprintf(stderr, "Illegal \"limit\"\n");
-				return -1;
+				explain1("quantum"); return -1;
 			}
 			ok++;
 		} else if (strcmp(*argv, "perturb") == 0) {
 			NEXT_ARG();
 			if (get_integer(&opt.perturb_period, *argv, 0)) {
-				fprintf(stderr, "Illegal \"perturb\"\n");
+				explain1("perturb"); return -1;
+			}
+			ok++;
+		} else if (strcmp(*argv, "depth") == 0) {
+			NEXT_ARG();
+			if (get_integer((int *) &opt.flows, *argv, 0)) {
+				explain1("depth"); return -1;
+			}
+			ok++;
+		} else if (strcmp(*argv, "divisor") == 0) {
+			NEXT_ARG();
+			if (get_integer((int *) &opt.divisor, *argv, 0)) {
+				explain1("divisor"); return -1;
+			}
+			if(opt.divisor >= 14) {
+				fprintf(stderr, "Illegal \"divisor\": must be < 14\n");
 				return -1;
 			}
+			opt.divisor=pow(2,opt.divisor);
 			ok++;
 		} else if (strcmp(*argv, "limit") == 0) {
 			NEXT_ARG();
-			if (get_u32(&opt.limit, *argv, 0)) {
-				fprintf(stderr, "Illegal \"limit\"\n");
-				return -1;
+			if (get_integer((int *) &opt.limit, *argv, 0)) {
+				explain1("limit"); return -1;
 			}
-			if (opt.limit < 2) {
-				fprintf(stderr, "Illegal \"limit\", must be > 1\n");
-				return -1;
+			ok++;
+		} else if (strcmp(*argv, "hash") == 0) {
+			NEXT_ARG();
+			if(strcmp(*argv, "classic") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_CLASSIC;
+			} else
+			if(strcmp(*argv, "dst") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_DST;
+			} else
+			if(strcmp(*argv, "src") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_SRC;
+			} else
+			if(strcmp(*argv, "fwmark") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_FWMARK;
+			} else
+			if(strcmp(*argv, "ctorigsrc") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_CTORIGSRC;
+			} else
+			if(strcmp(*argv, "ctorigdst") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_CTORIGDST;
+			} else
+			if(strcmp(*argv, "ctreplsrc") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_CTREPLSRC;
+			} else
+			if(strcmp(*argv, "ctrepldst") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_CTREPLDST;
+			} else
+			if(strcmp(*argv, "ctnatchg") == 0) {
+				opt.hash_kind= TCA_SFQ_HASH_CTNATCHG;
+			} else {
+				explain1("hash"); return -1;
 			}
 			ok++;
 		} else if (strcmp(*argv, "help") == 0) {
@@ -90,13 +147,47 @@ static int sfq_print_opt(struct qdisc_ut
 	if (RTA_PAYLOAD(opt)  < sizeof(*qopt))
 		return -1;
 	qopt = RTA_DATA(opt);
-	fprintf(f, "limit %up ", qopt->limit);
 	fprintf(f, "quantum %s ", sprint_size(qopt->quantum, b1));
 	if (show_details) {
-		fprintf(f, "flows %u/%u ", qopt->flows, qopt->divisor);
+		fprintf(f, "limit %up flows %u/%u ",
+			qopt->limit, qopt->flows, qopt->divisor);
 	}
 	if (qopt->perturb_period)
 		fprintf(f, "perturb %dsec ", qopt->perturb_period);
+
+		fprintf(f,"hash: ");
+	switch(qopt->hash_kind)
+	{
+	case TCA_SFQ_HASH_CLASSIC:
+		fprintf(f,"classic");
+		break;
+	case TCA_SFQ_HASH_DST:
+		fprintf(f,"dst");
+		break;
+	case TCA_SFQ_HASH_SRC:
+		fprintf(f,"src");
+		break;
+	case TCA_SFQ_HASH_FWMARK:
+		fprintf(f,"fwmark");
+		break;
+	case TCA_SFQ_HASH_CTORIGSRC:
+		fprintf(f,"ctorigsrc");
+		break;
+	case TCA_SFQ_HASH_CTORIGDST:
+		fprintf(f,"ctorigdst");
+		break;
+	case TCA_SFQ_HASH_CTREPLSRC:
+		fprintf(f,"ctreplsrc");
+		break;
+	case TCA_SFQ_HASH_CTREPLDST:
+		fprintf(f,"ctrepldst");
+		break;
+	case TCA_SFQ_HASH_CTNATCHG:
+		fprintf(f,"ctnatchg");
+		break;
+	default:
+		fprintf(f,"Unknown");
+	}
 	return 0;
 }
 
