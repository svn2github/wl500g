--- router/Makefile	2004-12-10 04:00:51.000000000 +0300
+++ gateway/Makefile	2009-02-10 15:10:36.000000000 +0300
@@ -13,9 +13,21 @@
 #
 
 include .config
-include .config.asus
 
-export CONFIG_MULTICONFIG := y
+RELEASE=1.9.2.7-d
+
+
+MODEL=WL500gp
+# WL500gx, WL550gE, WL500gp, WL500gpv2, WL500W
+
+#
+# asus trx trailer
+#
+
+KERNEL_VER=1.9
+FS_VER=2.7
+HWL1=0.02
+HWH1=2.99
 
 #
 # Paths
@@ -33,6 +45,7 @@ export SRCBASE := $(shell (cd $(TOP)/.. 
 # Build platform
 export BUILD := i386-pc-linux-gnu
 export HOSTCC := gcc
+export HOSTCXX := g++
 
 # uClibc wrapper
 ifeq ($(CONFIG_UCLIBC),y)
@@ -41,18 +54,22 @@ endif
 
 ifeq ($(PLATFORM),mipsel)
 export CROSS_COMPILE := mipsel-linux-
-export CONFIGURE := ./configure mipsel-linux --build=$(BUILD)
+export CONFIGURE := ./configure --host=mipsel-linux --build=$(BUILD)
 export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../mipsel-linux && pwd -P)
 endif
 
 ifeq ($(PLATFORM),mipsel-uclibc)
 export CROSS_COMPILE := mipsel-uclibc-
-export CONFIGURE := ./configure mipsel-linux --build=$(BUILD)
+export CONFIGURE := ./configure --host=mipsel-linux --build=$(BUILD)
 export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
 endif
 
 ifeq ($(CONFIG_BCMWPA2),y)
-export CFLAGS += -DBCMWPA2 
+EXTRACFLAGS += -DBCMWPA2 
+endif
+
+ifeq ($(CONFIG_IPV6),y)
+export CONFIG_IPV6 := y
 endif
 
 export CC := $(CROSS_COMPILE)gcc
@@ -72,8 +89,13 @@ export PLATFORMDIR := $(TOP)/$(PLATFORM)
 export INSTALLDIR := $(PLATFORMDIR)/install
 export TARGETDIR := $(PLATFORMDIR)/target
 
-# always build libcrypto
-obj-y += libcrypto 
+# Determine kernel version
+LINUX_KERNEL=$(subst ",,$(word 3, $(shell grep "UTS_RELEASE" $(LINUXDIR)/include/linux/version.h)))
+export MODULESDIR := $(TARGETDIR)/lib/modules/$(LINUX_KERNEL)
+SRCMODULESDIR := $(PLATFORMDIR)/modules/lib/modules/*/kernel
+
+# always build libbcmcrypto, required by nas
+obj-y += libbcmcrypto 
 
 #
 # Configuration
@@ -84,18 +106,14 @@ obj-$(CONFIG_RC) += rc
 obj-$(CONFIG_LIBBCM) += libbcm
 obj-$(CONFIG_SHARED) += shared
 obj-$(CONFIG_WWW) += www
-ifeq ($(CONFIG_SENTRY5),y)
-include Makefiles5.cnf
-endif
 obj-$(CONFIG_GLIBC) += lib
 obj-$(CONFIG_UCLIBC) += lib
 obj-$(CONFIG_WLCONF) += wlconf
 obj-$(CONFIG_BRIDGE) += bridge
 obj-$(CONFIG_BUSYBOX) += busybox
-obj-$(CONFIG_DNSMASQ) += dproxy
+obj-$(CONFIG_DNSMASQ) += dnsmasq
 obj-$(CONFIG_IPTABLES) += iptables
 obj-$(CONFIG_LIBIPT) += iptables
-obj-$(CONFIG_NAS) += nas
 obj-$(CONFIG_NETCONF) += netconf
 obj-$(CONFIG_NTP) += ntpclient
 obj-$(CONFIG_NVRAM) += nvram
@@ -107,44 +125,54 @@ obj-$(CONFIG_ETC) += etc
 obj-$(CONFIG_VLAN) += vlan
 
 # Added by Joey for ASUS application
-obj-$(CONFIG_PPPD) += pppd
-obj-$(CONFIG_PPTP) += pptp-client
-obj-$(CONFIG_PPPOERELAY) += pppoe-relay
+obj-$(CONFIG_PPTP) += pptp
+obj-$(CONFIG_PPPOERELAY) += rp-pppoe
 obj-$(CONFIG_INFOSVR) += infosvr
 obj-$(CONFIG_EZIPUPDATE) += ez-ipupdate
-obj-$(CONFIG_STUPIDFTPD) += stupid-ftpdmips
 obj-$(CONFIG_JPEG6B) += jpeg-6b
 obj-$(CONFIG_RCAMD) += rcamdmips
 obj-$(CONFIG_SENDMAIL) += sendmail
 obj-$(CONFIG_LPRNG) += LPRng
 obj-$(CONFIG_OTHERS) += others
-obj-$(CONFIG_OV51X) += ov51x
 obj-$(CONFIG_TEST) += test
 obj-$(CONFIG_BPALOGIN) += bpalogin
+obj-$(CONFIG_WAVESERVER) += waveserver
+
+# custom firmware
+obj-$(CONFIG_SSHD) += dropbear
+obj-$(CONFIG_JETDIRECT) += p910nd
+obj-$(CONFIG_SAMBA) += samba
+obj-$(CONFIG_NFSD) += nfs-utils
+obj-$(CONFIG_NFSD) += portmap
 obj-$(CONFIG_IPROUTE2) += iproute2
-obj-$(CONFIG_BPLAY) += bplay
+obj-$(CONFIG_LOADER) += loader
+obj-$(CONFIG_IPV6) += radvd
+obj-$(CONFIG_SNMP) += ucdsnmp
+obj-$(CONFIG_L2TP) += rp-l2tp
+obj-$(CONFIG_IGMPPROXY) += igmpproxy
+obj-$(CONFIG_STUPIDFTPD) += vsftpd
+obj-y += udpxy
+
+obj-y += kernel
 
 obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
 obj-install := $(foreach obj,$(obj-y),$(obj)-install)
 
+# defaults
 export LANGUAGE := "EN"
+export GLOBAL_OPTIONS := -DUSB_SUPPORT -DQOS -DWPA2_WMM -DPRNINFO -DNO_PARALLEL -DUSBONLY
+
+ifeq ($(MODEL),WL500g)
+export GLOBAL_OPTIONS := -DUSB_SUPPORT -DPARPORT_SUPPORT -DPRNINFO -DQOS -DWPA2_WMM
+endif
+
+LZMADIR=$(SRCBASE)/lzma/SRC/7zip/Compress
 
 #
 # Basic rules
 #
 
-all: $(obj-y) $(LINUXDIR)/.config
-        # Also build kernel
-	#( . $(LINUXDIR)/.config ; \
-	#if [ "$${CONFIG_EMBEDDED_RAMDISK}" = "" ] ; then \
-	#    $(MAKE) -C $(LINUXDIR) zImage ; \
-	#fi ; \
-	#if [ "$${CONFIG_MODULES}" = "y" ] ; then \
-	#    $(MAKE) -C $(LINUXDIR) modules ; \
-	#fi )
-	. $(LINUXDIR)/.config ; \
-	$(MAKE) -C $(LINUXDIR) zImage ; \
-	$(MAKE) -C $(LINUXDIR) modules ; \
+all: $(obj-y) 
 
 clean: $(obj-clean) config-clean
 	rm -rf $(TARGETDIR)
@@ -155,39 +183,179 @@ clean: $(obj-clean) config-clean
 distclean mrproper: clean
 	rm -f .config $(LINUXDIR)/.config
 
-install package: $(filter-out lib-install,$(obj-install)) $(LINUXDIR)/.config
+lzma-lib:
+	$(MAKE) -C $(LZMADIR)/LZMA_Lib/
+
+lzma:
+	$(MAKE) -C $(LZMADIR)/LZMA_Alone/
+
+kernel-modules: $(LINUXDIR)/.config
+	( . $(LINUXDIR)/.config ; \
+	if [ "$${CONFIG_MODULES}" = "y" ] ; then \
+	    $(MAKE) -C $(LINUXDIR) modules CC=$(CROSS_COMPILE)gcc-3.4.6; \
+	fi )
+
+kernel-image: $(LINUXDIR)/.config
+	( . $(LINUXDIR)/.config ; \
+	if [ "$${CONFIG_EMBEDDED_RAMDISK}" = "" ] ; then \
+	    $(MAKE) -C $(LINUXDIR) zImage CC=$(CROSS_COMPILE)gcc-3.4.6; \
+	fi )
+
+kernel: kernel-image kernel-modules
+	@true
+
+kernel-clean:
+	$(MAKE) -C $(LINUXDIR) clean
+	
+kernel-install: lzma
+ifeq ($(CONFIG_LOADER),y)
+	cat $(LINUXDIR)/arch/mips/bcm947xx/compressed/piggy | \
+		$(LZMADIR)/LZMA_Alone/lzma e -si -so -lc1 -lp2 -pb2 > $(PLATFORMDIR)/vmlinuz
+else
+	cp $(LINUXDIR)/arch/mips/bcm947xx/compressed/vmlinuz $(PLATFORMDIR)/
+endif
+	( . $(LINUXDIR)/.config ; \
+	if [ "$${CONFIG_MODULES}" = "y" ] ; then \
+	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(PLATFORMDIR)/modules ; \
+	    $(TOP)/busybox/examples/depmod.pl -b $(PLATFORMDIR)/modules/lib/modules/* -F $(LINUXDIR)/System.map; \
+	fi )
+	rm -f $(PLATFORMDIR)/modules/lib/modules/*/build
+
+modules_install-WL500g modules_install-WL500b: modules_install
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o
+
+modules_install-WL500bv2: modules_install
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o
+	rm -f $(MODULESDIR)/wl.o
+	install -t $(MODULESDIR)/ rt2460/rt2400.o 
+
+modules_install-WL3%: modules_install
+	rm -rf $(MODULESDIR)/parport
+
+modules_install-WL500gx modules_install-WL500gp modules_install-WL500W: modules_install
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/host/usb-uhci.o \
+		$(SRCMODULESDIR)/drivers/usb/host/ehci-hcd.o 
+	rm -rf $(MODULESDIR)/parport
+
+modules_install-WL700g: modules_install
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/host/usb-uhci.o \
+		$(SRCMODULESDIR)/drivers/usb/host/ehci-hcd.o \
+		$(SRCMODULESDIR)/drivers/char/gpiortc.o \
+		$(SRCMODULESDIR)/drivers/ide/ide-mod.o \
+		$(SRCMODULESDIR)/drivers/ide/ide-disk.o \
+		$(SRCMODULESDIR)/drivers/ide/ide-probe-mod.o
+	rm -rf $(MODULESDIR)/parport
+
+modules_install-WLHDD: modules_install
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o \
+		$(SRCMODULESDIR)/drivers/char/gpiortc.o \
+		$(SRCMODULESDIR)/drivers/ide/ide-mod.o \
+		$(SRCMODULESDIR)/drivers/ide/ide-disk.o \
+		$(SRCMODULESDIR)/drivers/ide/ide-probe-mod.o
+	rm -rf $(MODULESDIR)/parport
+
+modules_install-WL550gE modules_install-WL520gu modules_install-WL500gpv2: modules_install
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/host/usb-ohci.o \
+		$(SRCMODULESDIR)/drivers/usb/host/ehci-hcd.o 
+	rm -rf $(MODULESDIR)/parport
+	
+modules_install: .config
+	install -d $(MODULESDIR)
+	# generic stuff
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/net/et/et.o \
+		$(SRCMODULESDIR)/drivers/net/wl/wl.o \
+		$(SRCMODULESDIR)/drivers/net/tun.o \
+		$(SRCMODULESDIR)/net/ipv4/netfilter/*.o
+	# generic usb
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/usbcore.o \
+		$(SRCMODULESDIR)/drivers/usb/printer.o
+	# usb storage
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/storage/usb-storage.o \
+		$(SRCMODULESDIR)/drivers/scsi/sd_mod.o \
+		$(SRCMODULESDIR)/drivers/scsi/scsi_mod.o
+	# usb serial
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/serial/usbserial.o \
+		$(SRCMODULESDIR)/drivers/usb/serial/pl2303.o \
+		$(SRCMODULESDIR)/drivers/usb/serial/ftdi_sio.o
+	# usb webcams
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/media/video/videodev.o \
+		$(SRCMODULESDIR)/drivers/usb/ov51x.o \
+		$(SRCMODULESDIR)/drivers/usb/ov511_decomp.o \
+		$(SRCMODULESDIR)/drivers/usb/ov518_decomp.o \
+		$(SRCMODULESDIR)/drivers/usb/pwc.o \
+		$(SRCMODULESDIR)/drivers/usb/pwcx.o
+	# usb audio
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/drivers/usb/audio.o \
+		$(SRCMODULESDIR)/drivers/sound/soundcore.o
+ifeq ($(CONFIG_NFSD),y)
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/fs/lockd/*.o \
+		$(SRCMODULESDIR)/fs/nfsd/*.o	\
+		$(SRCMODULESDIR)/net/sunrpc/*.o
+endif
+ifeq ($(CONFIG_NFS),y)
+	install -t $(MODULESDIR) \
+		$(SRCMODULESDIR)/fs/nfs/*.o
+endif
+
+install: package-$(MODEL)
+	@true
+
+package-%: $(filter-out lib-install www-install,$(obj-install)) $(LINUXDIR)/.config lzma-lib
+	$(MAKE) www-pages-$*
         # Install binaries into target directory
-	install -d $(TARGETDIR)
-	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
+	rm -rf $(TARGETDIR) && install -d $(TARGETDIR)
+	echo $(RELEASE) > $(TARGETDIR)/.version
+	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) $(INSTALLDIR)/www ; do \
 	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
 	done
+	# Optimize crypto library
+	$(MAKE) -C libbcmcrypto optimize
         # Install (and possibly optimize) C library
 	$(MAKE) lib-install
+	# statically linked ASUS shit
+ifeq ($(CONFIG_WAVESERVER),y)
+	$(STRIP) others/waveserver -o $(TARGETDIR)/usr/sbin/waveserver
+endif
+	# Install binary Addons, if any
+	@-( if [ -d $(SRCBASE)/router/Addon ]; then \
+            ( cp -dup $(SRCBASE)/router/Addon/* $(TARGETDIR)/usr/sbin/ ) \
+        fi )
         # Install modules into filesystem
-	( . $(LINUXDIR)/.config ; \
-	if [ "$${CONFIG_MODULES}" = "y" ] ; then \
-	    $(MAKE) -C $(LINUXDIR) modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR) ; \
-	fi )
+	$(MAKE) modules_install-$*
         # Prepare filesystem
 	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
-        # Make sure mkcramfs-2.0 is used
-	$(MAKE) -C $(LINUXDIR)/scripts/cramfs mkcramfs
-	$(LINUXDIR)/scripts/cramfs/mkcramfs $(TARGETDIR) $(PLATFORMDIR)/target.cramfs
-        # Package kernel and filesystem
-	( . $(LINUXDIR)/.config ; \
-	if [ "$${CONFIG_EMBEDDED_RAMDISK}" = "y" ] ; then \
-	    cp $(PLATFORMDIR)/target.cramfs $(LINUXDIR)/arch/mips/ramdisk/$${CONFIG_EMBEDDED_RAMDISK_IMAGE} ; \
-	    $(MAKE) -C $(LINUXDIR) zImage ; \
-	else \
-	    cp $(LINUXDIR)/arch/mips/brcm-boards/bcm947xx/compressed/vmlinuz $(PLATFORMDIR)/ ; \
-	    trx -o $(PLATFORMDIR)/linux.trx $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs ; \
-	fi )
-        # Pad self-booting Linux to a 64 KB boundary
-	cp $(LINUXDIR)/arch/mips/brcm-boards/bcm947xx/compressed/zImage $(PLATFORMDIR)/
-	dd conv=sync bs=64k < $(PLATFORMDIR)/zImage > $(PLATFORMDIR)/linux.bin
-        # Append filesystem to self-booting Linux
-	cat $(PLATFORMDIR)/target.cramfs >> $(PLATFORMDIR)/linux.bin
+        # Make sure mksquashfs-2.0 is used
+	$(MAKE) -C $(LINUXDIR)/scripts/squashfs mksquashfs-lzma \
+		LZMAPATH=$(LZMADIR)/LZMA_Lib CC=$(HOSTCC) CXX=$(HOSTCXX)
+	$(LINUXDIR)/scripts/squashfs/mksquashfs-lzma $(TARGETDIR) $(PLATFORMDIR)/target.cramfs -all-root -noappend -nopad
+	rm -f $(PLATFORMDIR)/$*-$(RELEASE).trx
+	$(MAKE) -C $(SRCBASE)/asustrx CC=$(HOSTCC)
+ifeq ($(CONFIG_LOADER),y)
+	$(SRCBASE)/asustrx/asustrx -p $* -v $(KERNEL_VER).$(FS_VER) -o $(PLATFORMDIR)/$*-$(RELEASE).trx \
+		loader/loader.gz $(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs
+else
+	$(SRCBASE)/asustrx/asustrx -p $* -v $(KERNEL_VER).$(FS_VER) -o $(PLATFORMDIR)/$*-$(RELEASE).trx \
+		$(PLATFORMDIR)/vmlinuz $(PLATFORMDIR)/target.cramfs
+endif
+	@echo
+	@echo "Finished building $* firmware version $(KERNEL_VER).$(FS_VER) ($(RELEASE))"
+	@echo
 
+modules: kernel-install
+	tar -C $(PLATFORMDIR)/modules -czf $(PLATFORMDIR)/modules-$(RELEASE).tgz .
 #
 # Configuration rules
 #
@@ -232,9 +400,9 @@ $(LINUXDIR)/.config:
 # Overrides
 #
 
-httpd: nvram shared $(EXTRA_LIBS)
+httpd: netconf shared nvram $(EXTRA_LIBS)
 
-rc: netconf nvram shared $(EXTRA_LIBS)
+rc: netconf shared nvram $(EXTRA_LIBS)
 
 www www-%:
 	$(MAKE) -C www/$(CONFIG_VENDOR) $* INSTALLDIR=$(INSTALLDIR)/www
@@ -242,43 +410,56 @@ www www-%:
 wwwmt wwwmt-%:
 	$(MAKE) -C www/mea $* INSTALLDIR=$(INSTALLDIR)/www
 
-ifeq ($(CONFIG_SENTRY5),y)
-include $(TOP)/Makefiles5.mk
-endif
+radvd: radvd/radvd
+	$(MAKE) -C $@ radvd
+
+radvd-install:
+	install -D radvd/radvd $(INSTALLDIR)/radvd/usr/sbin/radvd
+	$(STRIP) $(INSTALLDIR)/radvd/usr/sbin/radvd
 
 bridge:
-	$(MAKE) -C bridge brctl/brctl
+	$(MAKE) -C $@ brctl/brctl EXTRACFLAGS="$(EXTRACFLAGS)"
 
 bridge-install: bridge
 	install -D bridge/brctl/brctl $(INSTALLDIR)/bridge/usr/sbin/brctl
 	$(STRIP) $(INSTALLDIR)/bridge/usr/sbin/brctl
 
-busybox:
-	cd busybox && rm -f Config.h && ln -sf configs/$(CONFIG_BUSYBOX_CONFIG).h Config.h
-	$(MAKE) -C busybox STRIPTOOL=$(STRIP)
+ez-ipupdate/Makefile: ez-ipupdate/Makefile.in ez-ipupdate/config.h.in ez-ipupdate/configure.in
+	cd ez-ipupdate && ac_cv_prog_CC=$(CC) CPP=$(CC) CPPFLAGS="$(EXTRACFLAGS)" \
+	$(CONFIGURE)
+
+ez-ipupdate: ez-ipupdate/Makefile
+
+ez-ipupdate-install:
+	install -D ez-ipupdate/ez-ipupdate $(INSTALLDIR)/ez-ipupdate/usr/sbin/ez-ipupdate
+	$(STRIP) $(INSTALLDIR)/ez-ipupdate/usr/sbin/ez-ipupdate
+
+busybox/.config:
+	cd busybox && rm -f .config && ln -sf sysdeps/linux/$(CONFIG_BUSYBOX_CONFIG) .config
+	$(MAKE) -C busybox oldconfig
 
-busybox-install: busybox
-	$(MAKE) -C busybox STRIPTOOL=$(STRIP) PREFIX=$(INSTALLDIR)/busybox install
+busybox: busybox/.config
+	$(MAKE) -C $@ all STRIP=$(STRIP) EXTRA_CFLAGS="$(EXTRACFLAGS)"
 
-dproxy:
-	$(MAKE) -C dproxy
+busybox-install: busybox
+	$(MAKE) -C busybox install STRIP=$(STRIP) CONFIG_PREFIX=$(INSTALLDIR)/busybox EXTRA_CFLAGS="$(EXTRACFLAGS)"
 
 dproxy-install: dproxy
 	install -D dproxy/dproxy $(INSTALLDIR)/dproxy/usr/sbin/dproxy
 	$(STRIP) $(INSTALLDIR)/dproxy/usr/sbin/dproxy
 
 iptables:
-	$(MAKE) -C iptables BINDIR=/usr/sbin LIBDIR=/usr/lib KERNEL_DIR=$(LINUXDIR)
+	$(MAKE) -C $@ BINDIR=/usr/sbin LIBDIR=/usr/lib KERNEL_DIR=$(LINUXDIR) COPT_FLAGS="-O2 $(EXTRACFLAGS)" DO_MULTI=1
 
 iptables-install: iptables
 ifeq ($(CONFIG_IPTABLES),y)
 	install -d $(INSTALLDIR)/iptables/usr/lib/iptables
 	install iptables/extensions/*.so $(INSTALLDIR)/iptables/usr/lib/iptables
 	$(STRIP) $(INSTALLDIR)/iptables/usr/lib/iptables/*.so
-	#install -D iptables/iptables $(INSTALLDIR)/iptables/usr/sbin/iptables
-	#$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables
-	install -D iptables/iptables-restore $(INSTALLDIR)/iptables/usr/sbin/iptables-restore
-	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables-restore
+	install -D iptables/iptables $(INSTALLDIR)/iptables/usr/sbin/iptables
+	$(STRIP) $(INSTALLDIR)/iptables/usr/sbin/iptables
+	ln -sf iptables $(INSTALLDIR)/iptables/usr/sbin/iptables-restore
+	ln -sf iptables $(INSTALLDIR)/iptables/usr/sbin/iptables-save
 else
         # So that generic rule does not take precedence
 	@true
@@ -294,9 +475,6 @@ ntpclient-install: ntpclient
 	install -D ntpclient/ntpclient $(INSTALLDIR)/ntpclient/usr/sbin/ntpclient
 	$(STRIP) $(INSTALLDIR)/ntpclient/usr/sbin/ntpclient
 
-ppp ppp-%:
-	$(MAKE) -C ppp/pppoecd $* INSTALLDIR=$(INSTALLDIR)/ppp
-
 udhcpd-install: udhcpd
 	install -D udhcpd/udhcpd $(INSTALLDIR)/udhcpd/usr/sbin/udhcpd
 	$(STRIP) $(INSTALLDIR)/udhcpd/usr/sbin/udhcpd
@@ -312,195 +490,239 @@ vlan:
 vlan-install:
 	$(MAKE) -C vlan CROSS=$(CROSS_COMPILE) STRIPTOOL=$(STRIP) INSTALLDIR=$(INSTALLDIR) install
 
-vlan-clean:
-	$(MAKE) -C vlan clean
+pptp-install: pptp
+	install -D pptp/pptp $(INSTALLDIR)/pptp/usr/sbin/pptp
+	$(STRIP) $(INSTALLDIR)/pptp/usr/sbin/pptp
+
+ppp-install: ppp
+	install -D ppp/pppd/pppd $(INSTALLDIR)/ppp/usr/sbin/pppd
+	$(STRIP) $(INSTALLDIR)/ppp/usr/sbin/pppd
+	install -D ppp/chat/chat $(INSTALLDIR)/ppp/usr/sbin/chat
+	$(STRIP) $(INSTALLDIR)/ppp/usr/sbin/chat
+	install -D ppp/pppd/plugins/rp-pppoe/rp-pppoe.so $(INSTALLDIR)/ppp/usr/lib/pppd/rp-pppoe.so
+	install -D ppp/pppd/plugins/pppol2tp/pppol2tp.so $(INSTALLDIR)/ppp/usr/lib/pppd/pppol2tp.so
+	$(STRIP) $(INSTALLDIR)/ppp/usr/lib/pppd/*.so
+
+rp-pppoe:
+	$(MAKE) -C $@/src pppoe-relay
+
+rp-pppoe-install: rp-pppoe
+	install -D rp-pppoe/src/pppoe-relay $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay
+	$(STRIP) $(INSTALLDIR)/rp-pppoe/usr/sbin/pppoe-relay
+
+dnsmasq:
+	$(MAKE) -C $@ CFLAGS="-Os -DNO_IPV6 $(EXTRACFLAGS)"
+	
+dnsmasq-install:
+	install -D dnsmasq/src/dnsmasq $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq
+	$(STRIP) $(INSTALLDIR)/dnsmasq/usr/sbin/dnsmasq
+
+	
+dropbear:
+	$(MAKE) -C $@ PROGRAMS="dropbear dbclient scp dropbearkey dropbearconvert" MULTI=1 SCPPROGRESS=1
+	
+dropbear-install:
+	install -D dropbear/dropbearmulti $(INSTALLDIR)/dropbear/usr/sbin/dropbear
+	$(STRIP) $(INSTALLDIR)/dropbear/usr/sbin/dropbear
+	ln -sf dropbear $(INSTALLDIR)/dropbear/usr/sbin/dropbearkey
+	ln -sf dropbear $(INSTALLDIR)/dropbear/usr/sbin/dropbearconvert
+	install -d $(INSTALLDIR)/dropbear/usr/bin
+	ln -sf ../sbin/dropbear $(INSTALLDIR)/dropbear/usr/bin/ssh
+	ln -sf ../sbin/dropbear $(INSTALLDIR)/dropbear/usr/bin/scp
+
+p910nd:
+	$(MAKE) -C $@ p910nd CROSS=$(CROSS_COMPILE) CFLAGS="-DLOCKFILE_DIR=\\\"/var/lock\\\""
+
+p910nd-install:
+	install -D p910nd/p910nd $(INSTALLDIR)/p910nd/usr/sbin/p910nd
+	$(STRIP) $(INSTALLDIR)/p910nd/usr/sbin/p910nd
+	
+samba:
+	$(MAKE) -C samba/source shared
+
+samba-install:
+	install -D samba/source/bin/smbd.shared $(INSTALLDIR)/samba/usr/sbin/smbd
+	install -D samba/source/bin/nmbd.shared $(INSTALLDIR)/samba/usr/sbin/nmbd
+	install -D samba/source/bin/smbpasswd.shared $(INSTALLDIR)/samba/usr/bin/smbpasswd
+	install -D samba/source/bin/libsmb.so $(INSTALLDIR)/samba/usr/lib/libsmb.so
+	install -d $(INSTALLDIR)/samba/usr/codepages/
+	install -D samba/source/codepages/codepage.* $(INSTALLDIR)/samba/usr/codepages
+	install -D samba/source/codepages/unicode_map.* $(INSTALLDIR)/samba/usr/codepages
+	$(STRIP) $(INSTALLDIR)/samba/usr/sbin/smbd
+	$(STRIP) $(INSTALLDIR)/samba/usr/sbin/nmbd
+	$(STRIP) $(INSTALLDIR)/samba/usr/bin/smbpasswd
+	$(STRIP) $(INSTALLDIR)/samba/usr/lib/libsmb.so
+	
+samba-clean:
+	$(MAKE) -C samba/source clean
+
+nfs-utils-install:
+	install -D nfs-utils/utils/nfsd/nfsd $(INSTALLDIR)/nfs-utils/usr/sbin/nfsd
+	install -D nfs-utils/utils/mountd/mountd $(INSTALLDIR)/nfs-utils/usr/sbin/mountd
+	install -D nfs-utils/utils/lockd/lockd $(INSTALLDIR)/nfs-utils/usr/sbin/lockd
+	install -D nfs-utils/utils/exportfs/exportfs $(INSTALLDIR)/nfs-utils/usr/sbin/exportfs
+	install -D nfs-utils/utils/showmount/showmount $(INSTALLDIR)/nfs-utils/usr/sbin/showmount
+	install -D nfs-utils/utils/statd/statd $(INSTALLDIR)/nfs-utils/usr/sbin/statd
+	install -D nfs-utils/support/lib/libnfs.so $(INSTALLDIR)/nfs-utils/usr/lib/libnfs.so
+	$(STRIP) $(INSTALLDIR)/nfs-utils/usr/sbin/* $(INSTALLDIR)/nfs-utils/usr/lib/libnfs.so
+
+portmap-install:
+	install -D portmap/portmap $(INSTALLDIR)/portmap/usr/sbin/portmap
+	$(STRIP) $(INSTALLDIR)/portmap/usr/sbin/portmap
+
+iproute2: .config
+	$(MAKE) -C $@ KERNEL_INCLUDE=$(LINUXDIR)/include EXTRACFLAGS="$(EXTRACFLAGS)"
+
+iproute2-install:
+	install -D iproute2/ip/ip $(INSTALLDIR)/iproute2/usr/sbin/ip
+	install -D iproute2/tc/tc $(INSTALLDIR)/iproute2/usr/sbin/tc
+	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/ip
+	$(STRIP) $(INSTALLDIR)/iproute2/usr/sbin/tc
+
+ucdsnmp-install:
+	install -D ucdsnmp/agent/snmpd $(INSTALLDIR)/ucdsnmp/usr/sbin/snmpd
+	$(STRIP) $(INSTALLDIR)/ucdsnmp/usr/sbin/snmpd
+
+rp-l2tp-install:
+	install -D rp-l2tp/l2tpd $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tpd
+	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tpd
+	install -D rp-l2tp/handlers/l2tp-control $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tp-control
+	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/sbin/l2tp-control
+	install -d $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins
+	install -D rp-l2tp/handlers/*.so $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins
+	$(STRIP) $(INSTALLDIR)/rp-l2tp/usr/lib/l2tp/plugins/*.so
+
+igmpproxy:
+	$(MAKE) -C igmpproxy/src CFLAGS="-O2 $(EXTRACFLAGS)"
+
+igmpproxy-clean:
+	$(MAKE) -C igmpproxy/src clean
+
+igmpproxy-install:
+	install -D igmpproxy/src/igmpproxy $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy
+	$(STRIP) $(INSTALLDIR)/igmpproxy/usr/sbin/igmpproxy
+
+vsftpd-install:
+	install -D vsftpd/vsftpd $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd
+	$(STRIP) $(INSTALLDIR)/vsftpd/usr/sbin/vsftpd
+
+udpxy:
+	$(MAKE) -C $@ release CDEFS="-O2 $(EXTRACFLAGS)"
+
+udpxy-install:
+	install -D udpxy/udpxy $(INSTALLDIR)/udpxy/usr/sbin/udpxy
+	$(STRIP) $(INSTALLDIR)/udpxy/usr/sbin/udpxy
+	ln -sf udpxy $(INSTALLDIR)/udpxy/usr/sbin/udpxrec
 
-pptp-client-install: pptp-client
-	install -D pptp-client/pptp $(INSTALLDIR)/pptp-client/usr/sbin/pptp
-	$(STRIP) $(INSTALLDIR)/pptp-client/usr/sbin/pptp
-
-pppd:
-	$(MAKE) -C pppd/pppd
-
-pppd-clean:
-	$(MAKE) -C pppd/pppd clean
-
-pppd-install: pppd
-	install -D pppd/pppd/pppd $(INSTALLDIR)/pppd/usr/sbin/pppd
-	$(STRIP) $(INSTALLDIR)/pppd/usr/sbin/pppd
-
-checkout-%: 
-        # Get up-to-date source from CVS
-	cvs -d:pserver:$*@192.168.39.9:/WL500g login
-	cd $(LINUXDIR) && cvs co 
-	cd $(TOP) 
-	for dir in $(obj-y) ; do \
-	    cvs co $${dir} \
-	done
+rcamdmips:
+	$(MAKE) -C $@ LINUXKERNELSRC=$(LINUXDIR)
 
-image-%:
-ifeq ($(CONFIG_MULTICONFIG),y)
-	( if [ "$*" = "WL500gl" ] || [ "$*" = "WL500bl" ] || [ "$*" = "WL331gl" ]; then \
-		( if [ -f ./lite ]; then \
-			echo "the same configuration"; \
-		else \
-			cp -f ./config.asus/linux.config.lite ../linux/linux/.config; \
-			cp -f ./config.asus/router.config.lite ./.config.asus; \
-			cp -f ./config.asus/busybox.router.h.lite ./busybox/configs/router.h; \
-			make menuconfig; \
-			cp -f ./config.asus/router.config.lite ./.config.asus; \
-			make clean; \
-			make netconf; \
-			make all; \
-			rm -f full; \
-			rm -f usb20; \
-			touch lite; \
-		fi ) \
-	elif [ "$*" = "WL500gx" ]; then \
-		( if [ -f ./full ]; then \
-			echo "the same configuration"; \
-		else \
-			cp -f ./config.asus/linux.config.full ../linux/linux/.config; \
-			cp -f ./config.asus/router.config.full ./.config.asus; \
-			cp -f ./config.asus/busybox.router.h.full ./busybox/configs/routers.h; \
-			cd ../linux/linux && make dep && cd ../../router; \
-			make menuconfig; \
-			cp -f ./config.asus/router.config.full ./.config.asus; \
-			make clean; \
-			make netconf; \
-			make all; \
-			rm -f usb20; \
-			rm -f full; \
-			touch full; \
-		fi ) \
-	else \
-		( if [ -f ./full ]; then \
-			echo "the same configuration"; \
-		else \
-			cp -f ./config.asus/linux.config.full ../linux/linux/.config; \
-			cp -f ./config.asus/router.config.full ./.config.asus; \
-			cp -f ./config.asus/busybox.router.h.full ./busybox/configs/routers.h; \
-			cd ../linux/linux && make dep && cd ../../router; \
-			make menuconfig; \
-			cp -f ./config.asus/router.config.full ./.config.asus; \
-			make clean; \
-			make netconf; \
-			make all; \
-			rm -f lite; \
-			rm -f usb20; \
-			touch full; \
-		fi ) \
-	fi )
-endif
+LPRng:
+	$(MAKE) -C $@ GLOBAL_OPTIONS="$(EXTRACFLAGS)"
 
-	# insert rt2400.o for WL500bv2
+model-%:
 	make rc-clean
 	make infosvr-clean
-	make LPRng-clean
-	make vlan-clean
-	make shared-clean
+	#make LPRng-clean
+	#make vlan-clean
+	#make shared-clean
 
 	( if [ "$*" = "WL500gx" ]; then \
-		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DWL500GX -DQOS -DWPA2_WMM" CONFIG_SENTRY5=y CONFIG_ROBO=y; \
+		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DWL500GX -DQOS -DWPA2_WMM"; \
+		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
+	elif [ "$*" = "WL500gp" ]; then \
+		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL500GP -DQOS -DWPA2_WMM"; \
+		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
+	elif [ "$*" = "WL500gpv2" -o "$*" = "WL520gu" -o "$*" = "WL330gE" ]; then \
+		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL520GX -DQOS -DWPA2_WMM"; \
+		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
+	elif [ "$*" = "WL700g" ]; then \
+		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL700G -DQOS -DWPA2_WMM"; \
+		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
+	elif [ "$*" = "WL500W" ]; then \
+		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL500W -DQOS -DWPA2_WMM"; \
 		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
-		make LPRng GLOBAL_OPTIONS="-DUSBONLY"; \
 	elif [ "$*" = "WL500g" ]; then \
 		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DPARPORT_SUPPORT -DQOS -DWPA2_WMM"; \
 		make infosvr GLOBAL_OPTIONS="-DPRNINFO"; \
-		make LPRng GLOBAL_OPTIONS=""; \
 	elif [ "$*" = "WL500b" ]; then \
 		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DPARPORT_SUPPORT -DQOS"; \
 		make infosvr GLOBAL_OPTIONS="-DPRNINFO"; \
-		make LPRng GLOBAL_OPTIONS=""; \
 	elif [ "$*" = "WL500bv2" ]; then \
 		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DPARPORT_SUPPORT -DRT2400_SUPPORT -DQOS"; \
 		make infosvr GLOBAL_OPTIONS="-DPRNINFO"; \
-		make LPRng GLOBAL_OPTIONS=""; \
 	elif [ "$*" = "WL500gl" ]; then \
 		make rc GLOBAL_OPTIONS="-DWPA2_WMM"; \
 		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
-		make LPRng GLOBAL_OPTIONS=""; \
 	elif [ "$*" = "WL500bl" ]; then \
 		make rc GLOBAL_OPTIONS=""; \
 		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
-		make LPRng GLOBAL_OPTIONS=""; \
+	elif [ "$*" = "WL550gE" -o "$*" = "WL320gE" -o "$*" = "WL320gP" ]; then \
+		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL550GE -DQOS -DWPA2_WMM"; \
+		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
+	elif [ "$*" = "WLHDD" ]; then \
+		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WLHDD -DQOS -DWPA2_WMM"; \
+		make infosvr GLOBAL_OPTIONS="-DPRNINFO -DNO_PARALLEL"; \
 	elif [ "$*" = "WL300g" ]; then \
 		make rc GLOBAL_OPTIONS="-DCONFIG_WL300G -DWPA2_WMM"; \
 		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
-		make LPRng GLOBAL_OPTIONS=""; \
-		make shared; \
 	elif [ "$*" = "WL300g2" ]; then \
 		make rc GLOBAL_OPTIONS="-DCONFIG_WL300G2 -DWPA2_WMM"; \
 		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
-		make LPRng GLOBAL_OPTIONS=""; \
 	elif [ "$*" = "WL331g" ]; then \
 		make rc GLOBAL_OPTIONS="-DUSB_SUPPORT -DCONFIG_WL331G -DWPA2_WMM -DWOB"; \
 		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
-		make LPRng GLOBAL_OPTIONS=""; \
 	elif [ "$*" = "WL331gl" ]; then \
 		make rc GLOBAL_OPTIONS="-DCONFIG_WL331G -DWPA2_WMM -DWOB"; \
 		make infosvr GLOBAL_OPTIONS="-DNO_PARALLEL"; \
-		make LPRng GLOBAL_OPTIONS=""; \
-	fi )
-	echo $(LANGUAGE)
-	make www-install-$*
- 
-	rm $(PLATFORMDIR)/target/usr/sbin/waveserver -f
-
-	( if [ "$*" = "WL500gx" ]; then \
-		make install CONFIG_SENTRY5=y CONFIG_ROBO=y; \
-	else \
-		make install; \
 	fi )
 
-ifeq ($(CONFIG_BPLAY),y)
-	cp others/waveserver $(PLATFORMDIR)/target/usr/sbin/. -f
-endif
-
-	# replace et.o for non-5365
-	( if [ "$*" = "WL500gx" ]; then \
-		cp et.SENTRY5/*.o $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/et/. -f; \
-		rm $(PLATFORMDIR)/target/lib/modules/2.4.20/parport/* -f; \
- 	fi )
-
-	# insert rt2400.o for WL500bv2
-	( if [ "$*" = "WL500bv2" ] || [ "$*" = "WL500bl" ]; then \
-		cp rt2460/rt2400.o $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/wl/. -f; \
-		cp rt2460/wl.o $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/wl/. -f; \
-		rm $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/robo/robo.o -f;\
-		rm $(PLATFORMDIR)/target/usr/lib/libsw.so -f; \
-	elif [ "$*" = "WL500gx" ]; then \
-		rm $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/wl/rt2400.o -f;\
-	else \
-		rm $(PLATFORMDIR)/target/usr/lib/libsw.so -f; \
-		rm $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/wl/rt2400.o -f;\
-	fi )
-	( if [ "$*" = "WL500bl" ]; then \
-		rm -f $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/wl/wl.o; \
-	fi )
-	#( if [ "$*" = "WL500g" ] || [ "$*" = "WL500b" ] || [ "$*" = "WL500bv2" ]; then \
-		cp -f usb/*.o $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/usb/.; \
-	fi )
-	cd $(PLATFORMDIR) && make $* && cd ..
+image-%:
+	make model-$*
+	make package-$*
 
 images-%:
 	make image-$* LANGUAGE="EN"
-	make image-$* LANGUAGE="KR"
-	make image-$* LANGUAGE="TW"
+	#make image-$* LANGUAGE="KR"
+	#make image-$* LANGUAGE="TW"
 	#make image-$* LANGUAGE="CN"
 	#make image-$* LANGUAGE="JP"
 
 images:
 	make images-WL500gx
-	make images-WL500g
+	#make images-WL500g
 	#make images-WL500b
 	#make images-WL500bv2
 	#make images-WL300g
+	#make images-WLHDD
+	make images-WL550gE
+	make images-WL320gE
+	make images-WL320gP
+	make images-WL500gp
+	make images-WL500W
+	make images-WL520gu
+	make images-WL500gpv2
+	make images-WL330gE
+	#make images-WL700g
 	#make images-WL331g
 	#make images-WL331gl
 	#make images-WL500gl
 	#make images-WL500bl
 
+fast:
+	# vlan/usb
+	make images-WL500gx
+	make rc-clean rc package-WL550gE
+	make rc-clean rc package-WL500gp
+	make rc-clean rc package-WL500W
+	# usb/lpt/brcm
+	#make images-WL500g
+	#make package-WL500b
+	# others
+	#make images-WL500bv2
+	#make images-WL300g
+	#make images-WLHDD
+
 image-R100:
 	make rc-clean
 	make infosvr-clean
@@ -512,15 +734,15 @@ image-R100:
 	echo $(LANGUAGE)
 	make wwwmt-install-R100 
 	make install
-	cp et.4702/et.o $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/et/. -f
-	cd $(PLATFORMDIR) && make R100 && cd ..
+	#cp et.4702/et.o $(PLATFORMDIR)/target/lib/modules/2.4.20/kernel/drivers/net/et/. -f
+	make -C $(PLATFORMDIR) R100 MKCRAMFS=$(LINUXDIR)/scripts/squashfs/mksquashfs
 
 #
 # Generic rules
 #
 
 %:
-	[ ! -d $* ] || $(MAKE) -C $*
+	[ ! -d $* ] || $(MAKE) -C $*  EXTRACFLAGS="$(EXTRACFLAGS)"
 
 %-clean:
 	[ ! -d $* ] || $(MAKE) -C $* clean
@@ -528,6 +750,9 @@ image-R100:
 %-install:
 	[ ! -d $* ] || $(MAKE) -C $* install INSTALLDIR=$(INSTALLDIR)/$*
 
+%-diff:
+	make -C wl500g $*-diff
+
 $(obj-y) $(obj-n) $(obj-clean) $(obj-install): dummy
 
 .PHONY: all clean distclean mrproper install package
