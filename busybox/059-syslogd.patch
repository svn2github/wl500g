 e46047aa87c9ec0b8e27d1d4ecfcb3e9798ddb8d syslogd: syslogd: don't *decrement* log_file->size on write failures
 ae57fcad5d36dc2ba00179ef3e44154c10223862 syslogd: make "reopen log file every second" logic work for multiple logs

Signed-off-by: Joshua Judson Rosen <jrosen@harvestai.com>
Signed-off-by: Denys Vlasenko <vda.linux@googlemail.com>
---

diff --git a/sysklogd/syslogd.c b/sysklogd/syslogd.c
--- a/sysklogd/syslogd.c
+++ b/sysklogd/syslogd.c
@@ -110,6 +110,7 @@ typedef struct {
 typedef struct logFile_t {
 	const char *path;
 	int fd;
+	time_t last_log_time;
 #if ENABLE_FEATURE_ROTATE_LOGFILE
 	unsigned size;
 	uint8_t isRegular;
@@ -165,7 +166,6 @@ struct globals {
 #if ENABLE_FEATURE_IPC_SYSLOG
 	struct shbuf_ds *shbuf;
 #endif
-	time_t last_log_time;
 	/* localhost's name. We print only first 64 chars */
 	char *hostname;
 
@@ -569,7 +569,7 @@ static void log_to_kmsg(int pri, const char *msg)
 	 */
 	pri &= G.primask;
 
-	write(G.kmsgfd, G.printbuf, sprintf(G.printbuf, "<%d>%s\n", pri, msg));
+	full_write(G.kmsgfd, G.printbuf, sprintf(G.printbuf, "<%d>%s\n", pri, msg));
 }
 #else
 static void kmsg_init(void) {}
@@ -588,15 +588,16 @@ static void log_locally(time_t now, char *msg, logFile_t *log_file)
 
 
 	if (log_file->fd >= 0) {
-		/* Reopen log file every second. This allows admin
-		 * to delete the file and not worry about restarting us.
+		/* Reopen log files every second. This allows admin
+		 * to delete the files and not worry about restarting us.
 		 * This costs almost nothing since it happens
-		 * _at most_ once a second.
+		 * _at most_ once a second for each file, and happens
+		 * only when each file is actually written.
 		 */
 		if (!now)
 			now = time(NULL);
-		if (G.last_log_time != now) {
-			G.last_log_time = now;
+		if (log_file->last_log_time != now) {
+			log_file->last_log_time = now;
 			close(log_file->fd);
 			goto reopen;
 		}
@@ -678,9 +678,14 @@ static void log_locally(time_t now, char *msg, logFile_t *log_file)
 		}
 		ftruncate(log_file->fd, 0);
 	}
-	log_file->size +=
+/* TODO: what to do on write errors ("disk full")? */
+	len = full_write(log_file->fd, msg, len);
+	if (len > 0)
+		log_file->size += len;
+#else
+	full_write(log_file->fd, msg, len);
 #endif
-			full_write(log_file->fd, msg, len);
+
 #ifdef SYSLOGD_WRLOCK
 	fl.l_type = F_UNLCK;
 	fcntl(log_file->fd, F_SETLKW, &fl);
--
cgit v0.9.1
