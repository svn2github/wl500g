
busybox.net commits
f313746a6d7b992918386a5e6db1cfc8f4da30fd ls: for some options, only last takes effect. Closes bug 2959
d87815d5e0721176ee13776956f648e660c895d5 ls: make -x force columnar output; remove unused parts of TRIGGER code
163d86435729cc53d6d4088129f2cde106dd1318 ls: make -F not follow symlinks of the command line
2f7d9e8903029b1b5e51a15f9cb0dcb6ca17c3ac ls: print a space after each column. Closes bug 2941
407ab2a4349de67c0a3203cdcb544a3360506291 ls: tweak -e handling; better comments
---

 coreutils/ls.c      |  229 +++++++++++++++++++++++++++++++++-------------------
 include/usage.src.h |   61 -------------
 2 files changed, 148 insertions(+), 142 deletions(-)

diff --git a/coreutils/ls.c b/coreutils/ls.c
--- a/coreutils/ls.c
+++ b/coreutils/ls.c
@@ -29,6 +29,70 @@
  * [2009-03]
  * ls sorts listing now, and supports almost all options.
  */
+
+//usage:#define ls_trivial_usage
+//usage:	"[-1AaCxd"
+//usage:	IF_FEATURE_LS_FOLLOWLINKS("L")
+//usage:	IF_FEATURE_LS_RECURSIVE("R")
+//usage:	IF_FEATURE_LS_FILETYPES("Fp") "lins"
+//usage:	IF_FEATURE_LS_TIMESTAMPS("e")
+//usage:	IF_FEATURE_HUMAN_READABLE("h")
+//usage:	IF_FEATURE_LS_SORTFILES("rSXv")
+//usage:	IF_FEATURE_LS_TIMESTAMPS("ctu")
+//usage:	IF_SELINUX("kKZ") "]"
+//usage:	IF_FEATURE_AUTOWIDTH(" -w WIDTH") " [FILE]..."
+//usage:#define ls_full_usage "\n\n"
+//usage:       "List directory contents\n"
+//usage:     "\nOptions:"
+//usage:     "\n	-1	List in a single column"
+//usage:     "\n	-A	Don't list . and .."
+//usage:     "\n	-a	Don't hide entries starting with ."
+//usage:     "\n	-C	List by columns"
+//usage:     "\n	-x	List by lines"
+//usage:     "\n	-d	List directory entries instead of contents"
+//usage:	IF_FEATURE_LS_FOLLOWLINKS(
+//usage:     "\n	-L	List entries pointed to by symlinks"
+//usage:	)
+//usage:	IF_FEATURE_LS_RECURSIVE(
+//usage:     "\n	-R	Recurse"
+//usage:	)
+//usage:	IF_FEATURE_LS_FILETYPES(
+//usage:     "\n	-F	Append indicator (one of */=@|) to entries"
+//usage:     "\n	-p	Append indicator (one of /=@|) to entries"
+//usage:	)
+//usage:     "\n	-l	Long listing format"
+//usage:     "\n	-i	List inode numbers"
+//usage:     "\n	-n	List numeric UIDs and GIDs instead of names"
+//usage:     "\n	-s	List the size of each file, in blocks"
+//usage:	IF_FEATURE_LS_TIMESTAMPS(
+//usage:     "\n	-e	List full date and time"
+//usage:	)
+//usage:	IF_FEATURE_HUMAN_READABLE(
+//usage:     "\n	-h	List sizes in human readable format (1K 243M 2G)"
+//usage:	)
+//usage:	IF_FEATURE_LS_SORTFILES(
+//usage:     "\n	-r	Sort in reverse order"
+//usage:     "\n	-S	Sort by file size"
+//usage:     "\n	-X	Sort by extension"
+//usage:     "\n	-v	Sort by version"
+//usage:	)
+//usage:	IF_FEATURE_LS_TIMESTAMPS(
+//usage:     "\n	-c	With -l: sort by ctime"
+//usage:     "\n	-t	With -l: sort by modification time"
+//usage:     "\n	-u	With -l: sort by access time"
+//usage:	)
+//usage:	IF_SELINUX(
+//usage:     "\n	-k	List security context"
+//usage:     "\n	-K	List security context in long format"
+//usage:     "\n	-Z	List security context and permission"
+//usage:	)
+//usage:	IF_FEATURE_AUTOWIDTH(
+//usage:     "\n	-w N	Assume the terminal is N columns wide"
+//usage:	)
+//usage:	IF_FEATURE_LS_COLOR(
+//usage:     "\n	--color[={always,never,auto}]	Control coloring"
+//usage:	)
+
 #include "libbb.h"
 #include "unicode.h"
 
@@ -54,10 +118,9 @@
 enum {
 
 TERMINAL_WIDTH  = 80,           /* use 79 if terminal has linefold bug */
-COLUMN_GAP      = 2,            /* includes the file type char */
 
 /* what is the overall style of the listing */
-STYLE_COLUMNS   = 1 << 21,      /* fill columns */
+STYLE_COLUMNAR  = 1 << 21,      /* many records per line */
 STYLE_LONG      = 2 << 21,      /* one record per line, extended info */
 STYLE_SINGLE    = 3 << 21,      /* one record per line */
 STYLE_MASK      = STYLE_SINGLE,
@@ -123,15 +186,20 @@ SPLIT_SUBDIR    = 2,
 
 };
 
-/* "[-]Cadil1", POSIX mandated options, busybox always supports */
-/* "[-]gnsx", POSIX non-mandated options, busybox always supports */
-/* "[-]Q" GNU option? busybox always supports */
-/* "[-]Ak" GNU options, busybox always supports */
-/* "[-]FLRctur", POSIX mandated options, busybox optionally supports */
-/* "[-]p", POSIX non-mandated options, busybox optionally supports */
-/* "[-]SXvThw", GNU options, busybox optionally supports */
-/* "[-]K", SELinux mandated options, busybox optionally supports */
-/* "[-]e", I think we made this one up */
+/* -Cadil1  Std options, busybox always supports */
+/* -gnsxA   Std options, busybox always supports */
+/* -Q       GNU option? busybox always supports */
+/* -k       SELinux option, busybox always supports (ignores if !SELinux) */
+/*          Std has -k which means "show sizes in kbytes" */
+/* -FLRctur Std options, busybox optionally supports */
+/* -p       Std option, busybox optionally supports */
+/*          Not fully compatible - we show not only '/' but other chars too */
+/* -SXvhTw  GNU options, busybox optionally supports */
+/*          -T TABWIDTH is ignored (we don't use tabs on output) */
+/* -K       SELinux mandated options, busybox optionally supports */
+/* -e       I think we made this one up (looks similar to GNU --full-time) */
+/* Std opts we do not support: */
+/* -H       Follow the links on command line only */
 static const char ls_options[] ALIGN1 =
 	"Cadil1gnsxQAk" /* 13 opts, total 13 */
 	IF_FEATURE_LS_TIMESTAMPS("cetu") /* 4, 17 */
@@ -157,69 +225,62 @@ enum {
 	OPT_Q = (1 << 10),
 	//OPT_A = (1 << 11),
 	//OPT_k = (1 << 12),
-	OPTBIT_color = 13
+	OPTBIT_F = 13
 		+ 4 * ENABLE_FEATURE_LS_TIMESTAMPS
-		+ 4 * ENABLE_FEATURE_LS_SORTFILES
+		+ 4 * ENABLE_FEATURE_LS_SORTFILES,
+	OPTBIT_color = OPTBIT_F
 		+ 2 * ENABLE_FEATURE_LS_FILETYPES
 		+ 1 * ENABLE_FEATURE_LS_FOLLOWLINKS
 		+ 1 * ENABLE_FEATURE_LS_RECURSIVE
 		+ 1 * ENABLE_FEATURE_HUMAN_READABLE
 		+ 2 * ENABLE_SELINUX
 		+ 2 * ENABLE_FEATURE_AUTOWIDTH,
-	OPT_color = 1 << OPTBIT_color,
-};
-
-enum {
-	LIST_MASK_TRIGGER	= 0,
-	STYLE_MASK_TRIGGER	= STYLE_MASK,
-	DISP_MASK_TRIGGER	= DISP_ROWS,
-	SORT_MASK_TRIGGER	= SORT_MASK,
+	OPT_F     = (1 << OPTBIT_F) * ENABLE_FEATURE_LS_FILETYPES,
+	OPT_color = (1 << OPTBIT_color),
 };
 
 /* TODO: simple toggles may be stored as OPT_xxx bits instead */
 static const unsigned opt_flags[] = {
-	LIST_SHORT | STYLE_COLUMNS, /* C */
-	DISP_HIDDEN | DISP_DOT,     /* a */
-	DISP_NOLIST,                /* d */
-	LIST_INO,                   /* i */
-	LIST_LONG | STYLE_LONG,     /* l - remember LS_DISP_HR in mask! */
-	LIST_SHORT | STYLE_SINGLE,  /* 1 */
-	0,                          /* g (don't show owner) - handled via OPT_g */
-	LIST_ID_NUMERIC,            /* n */
-	LIST_BLOCKS,                /* s */
-	DISP_ROWS,                  /* x */
-	0,                          /* Q (quote filename) - handled via OPT_Q */
-	DISP_HIDDEN,                /* A */
+	LIST_SHORT | STYLE_COLUMNAR, /* C */
+	DISP_HIDDEN | DISP_DOT,      /* a */
+	DISP_NOLIST,                 /* d */
+	LIST_INO,                    /* i */
+	LIST_LONG | STYLE_LONG,      /* l - remember LS_DISP_HR in mask! */
+	LIST_SHORT | STYLE_SINGLE,   /* 1 */
+	0,                           /* g (don't show owner) - handled via OPT_g */
+	LIST_ID_NUMERIC,             /* n */
+	LIST_BLOCKS,                 /* s */
+	LIST_SHORT | DISP_ROWS | STYLE_COLUMNAR, /* x */
+	0,                           /* Q (quote filename) - handled via OPT_Q */
+	DISP_HIDDEN,                 /* A */
 	ENABLE_SELINUX * LIST_CONTEXT, /* k (ignored if !SELINUX) */
 #if ENABLE_FEATURE_LS_TIMESTAMPS
-	TIME_CHANGE | (ENABLE_FEATURE_LS_SORTFILES * SORT_CTIME),   /* c */
-	LIST_FULLTIME,              /* e */
-	ENABLE_FEATURE_LS_SORTFILES * SORT_MTIME,   /* t */
-	TIME_ACCESS | (ENABLE_FEATURE_LS_SORTFILES * SORT_ATIME),   /* u */
+	TIME_CHANGE | (ENABLE_FEATURE_LS_SORTFILES * SORT_CTIME), /* c */
+	LIST_FULLTIME,               /* e */
+	ENABLE_FEATURE_LS_SORTFILES * SORT_MTIME, /* t */
+	TIME_ACCESS | (ENABLE_FEATURE_LS_SORTFILES * SORT_ATIME), /* u */
 #endif
 #if ENABLE_FEATURE_LS_SORTFILES
-	SORT_SIZE,                  /* S */
-	SORT_EXT,                   /* X */
-	SORT_REVERSE,               /* r */
-	SORT_VERSION,               /* v */
+	SORT_SIZE,                   /* S */
+	SORT_EXT,                    /* X */
+	SORT_REVERSE,                /* r */
+	SORT_VERSION,                /* v */
 #endif
 #if ENABLE_FEATURE_LS_FILETYPES
-	LIST_FILETYPE | LIST_EXEC,  /* F */
-	LIST_FILETYPE,              /* p */
+	LIST_FILETYPE | LIST_EXEC,   /* F */
+	LIST_FILETYPE,               /* p */
 #endif
 #if ENABLE_FEATURE_LS_FOLLOWLINKS
-	FOLLOW_LINKS,               /* L */
+	FOLLOW_LINKS,                /* L */
 #endif
 #if ENABLE_FEATURE_LS_RECURSIVE
-	DISP_RECURSIVE,             /* R */
+	DISP_RECURSIVE,              /* R */
 #endif
 #if ENABLE_FEATURE_HUMAN_READABLE
-	LS_DISP_HR,                 /* h */
+	LS_DISP_HR,                  /* h */
 #endif
 #if ENABLE_SELINUX
 	LIST_MODEBITS|LIST_NLINKS|LIST_CONTEXT|LIST_SIZE|LIST_DATE_TIME, /* K */
-#endif
-#if ENABLE_SELINUX
 	LIST_MODEBITS|LIST_ID_NAME|LIST_CONTEXT, /* Z */
 #endif
 	(1U<<31)
@@ -248,7 +309,6 @@ struct globals {
 	smallint exit_code;
 	unsigned all_fmt;
 #if ENABLE_FEATURE_AUTOWIDTH
-	unsigned tabstops; // = COLUMN_GAP;
 	unsigned terminal_width; // = TERMINAL_WIDTH;
 #endif
 #if ENABLE_FEATURE_LS_TIMESTAMPS
@@ -265,11 +325,9 @@ enum { show_color = 0 };
 #define exit_code       (G.exit_code     )
 #define all_fmt         (G.all_fmt       )
 #if ENABLE_FEATURE_AUTOWIDTH
-# define tabstops       (G.tabstops      )
 # define terminal_width (G.terminal_width)
 #else
 enum {
-	tabstops = COLUMN_GAP,
 	terminal_width = TERMINAL_WIDTH,
 };
 #endif
@@ -277,7 +335,6 @@ enum {
 #define INIT_G() do { \
 	/* we have to zero it out because of NOEXEC */ \
 	memset(&G, 0, sizeof(G)); \
-	IF_FEATURE_AUTOWIDTH(tabstops = COLUMN_GAP;) \
 	IF_FEATURE_AUTOWIDTH(terminal_width = TERMINAL_WIDTH;) \
 	IF_FEATURE_LS_TIMESTAMPS(time(&current_time_t);) \
 } while (0)
@@ -555,7 +612,7 @@ static unsigned calc_name_len(const char
 
 
 /* Return the number of used columns.
- * Note that only STYLE_COLUMNS uses return value.
+ * Note that only STYLE_COLUMNAR uses return value.
  * STYLE_SINGLE and STYLE_LONG don't care.
  * coreutils 7.2 also supports:
  * ls -b (--escape) = octal escapes (although it doesn't look like working)
@@ -588,7 +645,7 @@ static unsigned print_name(const char *n
 }
 
 /* Return the number of used columns.
- * Note that only STYLE_COLUMNS uses return value,
+ * Note that only STYLE_COLUMNAR uses return value,
  * STYLE_SINGLE and STYLE_LONG don't care.
  */
 static NOINLINE unsigned list_single(const struct dnode *dn)
@@ -744,9 +801,9 @@ static NOINLINE unsigned list_single(con
 static void showfiles(struct dnode **dn, unsigned nfiles)
 {
 	unsigned i, ncols, nrows, row, nc;
-	unsigned column = 0;
-	unsigned nexttab = 0;
-	unsigned column_width = 0; /* used only by STYLE_COLUMNS */
+	unsigned column;
+	unsigned nexttab;
+	unsigned column_width = 0; /* used only by STYLE_COLUMNAR */
 
 	if (all_fmt & STYLE_LONG) { /* STYLE_LONG or STYLE_SINGLE */
 		ncols = 1;
@@ -757,7 +814,7 @@ static void showfiles(struct dnode **dn,
 			if (column_width < len)
 				column_width = len;
 		}
-		column_width += tabstops +
+		column_width += 1 +
 			IF_SELINUX( ((all_fmt & LIST_CONTEXT) ? 33 : 0) + )
 				((all_fmt & LIST_INO) ? 8 : 0) +
 				((all_fmt & LIST_BLOCKS) ? 5 : 0);
@@ -773,6 +830,8 @@ static void showfiles(struct dnode **dn,
 		ncols = 1;
 	}
 
+	column = 0;
+	nexttab = 0;
 	for (row = 0; row < nrows; row++) {
 		for (nc = 0; nc < ncols; nc++) {
 			/* reach into the array based on the column and row */
@@ -783,8 +842,8 @@ static void showfiles(struct dnode **dn,
 			if (i < nfiles) {
 				if (column > 0) {
 					nexttab -= column;
-					printf("%*s", nexttab, "");
-					column += nexttab;
+					printf("%*s ", nexttab, "");
+					column += nexttab + 1;
 				}
 				nexttab = column + column_width;
 				column += list_single(dn[i]);
@@ -991,32 +1050,38 @@ int ls_main(int argc UNUSED_PARAM, char 
 
 	/* process options */
 	IF_FEATURE_LS_COLOR(applet_long_options = ls_longopts;)
-#if ENABLE_FEATURE_AUTOWIDTH
-	opt_complementary = "T+:w+"; /* -T N, -w N */
-	opt = getopt32(argv, ls_options, &tabstops, &terminal_width
-				IF_FEATURE_LS_COLOR(, &color_opt));
-#else
-	opt = getopt32(argv, ls_options IF_FEATURE_LS_COLOR(, &color_opt));
-#endif
+	opt_complementary =
+		/* -e implies -l */
+		"el"
+		/* http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ls.html:
+		 * in some pairs of opts, only last one takes effect:
+		 */
+		IF_FEATURE_LS_TIMESTAMPS(IF_FEATURE_LS_SORTFILES(":t-S:S-t")) /* time/size */
+		// ":H-L:L-H:" - we don't have -H
+		// ":m-l:l-m:" - we don't have -m
+		":C-xl:x-Cl:l-xC" /* bycols/bylines/long */
+		":C-1:1-C" /* bycols/oneline */
+		":x-1:1-x" /* bylines/oneline (not in SuS, but in GNU coreutils 8.4) */
+		":c-u:u-c" /* mtime/atime */
+		/* -w NUM: */
+		IF_FEATURE_AUTOWIDTH(":w+");
+	opt = getopt32(argv, ls_options
+		IF_FEATURE_AUTOWIDTH(, NULL, &terminal_width)
+		IF_FEATURE_LS_COLOR(, &color_opt)
+	);
 	for (i = 0; opt_flags[i] != (1U<<31); i++) {
 		if (opt & (1 << i)) {
 			unsigned flags = opt_flags[i];
 
-			if (flags & LIST_MASK_TRIGGER)
-				all_fmt &= ~LIST_MASK;
-			if (flags & STYLE_MASK_TRIGGER)
+			if (flags & STYLE_MASK)
 				all_fmt &= ~STYLE_MASK;
-			if (flags & SORT_MASK_TRIGGER)
+			if (flags & SORT_MASK)
 				all_fmt &= ~SORT_MASK;
-			if (flags & DISP_MASK_TRIGGER)
-				all_fmt &= ~DISP_MASK;
 			if (flags & TIME_MASK)
 				all_fmt &= ~TIME_MASK;
+
 			if (flags & LIST_CONTEXT)
 				all_fmt |= STYLE_SINGLE;
-			/* huh?? opt cannot be 'l' */
-			//if (LS_DISP_HR && opt == 'l')
-			//	all_fmt &= ~LS_DISP_HR;
 			all_fmt |= flags;
 		}
 	}
@@ -1056,14 +1121,14 @@ int ls_main(int argc UNUSED_PARAM, char 
 			all_fmt = (all_fmt & ~SORT_MASK) | SORT_ATIME;
 	}
 	if ((all_fmt & STYLE_MASK) != STYLE_LONG) /* only for long list */
-		all_fmt &= ~(LIST_ID_NUMERIC|LIST_FULLTIME|LIST_ID_NAME|LIST_ID_NUMERIC);
+		all_fmt &= ~(LIST_ID_NUMERIC|LIST_ID_NAME|LIST_FULLTIME);
 	if (ENABLE_FEATURE_LS_USERNAME)
 		if ((all_fmt & STYLE_MASK) == STYLE_LONG && (all_fmt & LIST_ID_NUMERIC))
 			all_fmt &= ~LIST_ID_NAME; /* don't list names if numeric uid */
 
-	/* choose a display format */
+	/* choose a display format if one was not already specified by an option */
 	if (!(all_fmt & STYLE_MASK))
-		all_fmt |= (isatty(STDOUT_FILENO) ? STYLE_COLUMNS : STYLE_SINGLE);
+		all_fmt |= (isatty(STDOUT_FILENO) ? STYLE_COLUMNAR : STYLE_SINGLE);
 
 	argv += optind;
 	if (!argv[0])
@@ -1076,8 +1141,10 @@ int ls_main(int argc UNUSED_PARAM, char 
 	dn = NULL;
 	nfiles = 0;
 	do {
-		/* NB: follow links on command line unless -l or -s */
-		cur = my_stat(*argv, *argv, !(all_fmt & (STYLE_LONG|LIST_BLOCKS)));
+		/* NB: follow links on command line unless -l, -s or -F */
+		cur = my_stat(*argv, *argv,
+			!((all_fmt & (STYLE_LONG|LIST_BLOCKS)) || (option_mask32 & OPT_F))
+		);
 		argv++;
 		if (!cur)
 			continue;
diff --git a/include/usage.src.h b/include/usage.src.h
index 64f2c90..cd37a89 100644
--- a/include/usage.src.h
+++ b/include/usage.src.h
@@ -2173,67 +2173,6 @@ INSERT
      "\n	-h	Print banner page too" \
      "\n	-V	Verbose" \
 
-#define ls_trivial_usage \
-       "[-1Aa" IF_FEATURE_LS_TIMESTAMPS("c") "Cd" \
-	IF_FEATURE_LS_TIMESTAMPS("e") IF_FEATURE_LS_FILETYPES("F") "iln" \
-	IF_FEATURE_LS_FILETYPES("p") IF_FEATURE_LS_FOLLOWLINKS("L") \
-	IF_FEATURE_LS_RECURSIVE("R") IF_FEATURE_LS_SORTFILES("rS") "s" \
-	IF_FEATURE_AUTOWIDTH("T") IF_FEATURE_LS_TIMESTAMPS("tu") \
-	IF_FEATURE_LS_SORTFILES("v") IF_FEATURE_AUTOWIDTH("w") "x" \
-	IF_FEATURE_LS_SORTFILES("X") IF_FEATURE_HUMAN_READABLE("h") "k" \
-	IF_SELINUX("K") "] [FILE]..."
-#define ls_full_usage "\n\n" \
-       "List directory contents\n" \
-     "\nOptions:" \
-     "\n	-1	List in a single column" \
-     "\n	-A	Don't list . and .." \
-     "\n	-a	Don't hide entries starting with ." \
-     "\n	-C	List by columns" \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-c	With -l: sort by ctime") \
-	IF_FEATURE_LS_COLOR( \
-     "\n	--color[={always,never,auto}]	Control coloring") \
-     "\n	-d	List directory entries instead of contents" \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-e	List full date and time") \
-	IF_FEATURE_LS_FILETYPES( \
-     "\n	-F	Append indicator (one of */=@|) to entries") \
-     "\n	-i	List inode numbers" \
-     "\n	-l	Long listing format" \
-     "\n	-n	List numeric UIDs and GIDs instead of names" \
-	IF_FEATURE_LS_FILETYPES( \
-     "\n	-p	Append indicator (one of /=@|) to entries") \
-	IF_FEATURE_LS_FOLLOWLINKS( \
-     "\n	-L	List entries pointed to by symlinks") \
-	IF_FEATURE_LS_RECURSIVE( \
-     "\n	-R	Recurse") \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-r	Sort in reverse order") \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-S	Sort by file size") \
-     "\n	-s	List the size of each file, in blocks" \
-	IF_FEATURE_AUTOWIDTH( \
-     "\n	-T N	Assume tabstop every N columns") \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-t	With -l: sort by modification time") \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-u	With -l: sort by access time") \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-v	Sort by version") \
-	IF_FEATURE_AUTOWIDTH( \
-     "\n	-w N	Assume the terminal is N columns wide") \
-     "\n	-x	List by lines" \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-X	Sort by extension") \
-	IF_FEATURE_HUMAN_READABLE( \
-     "\n	-h	List sizes in human readable format (1K 243M 2G)") \
-	IF_SELINUX( \
-     "\n	-k	List security context") \
-	IF_SELINUX( \
-     "\n	-K	List security context in long format") \
-	IF_SELINUX( \
-     "\n	-Z	List security context and permission") \
-
 #define lsattr_trivial_usage \
        "[-Radlv] [FILE]..."
 #define lsattr_full_usage "\n\n" \
-- 
