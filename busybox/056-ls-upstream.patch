
busybox.net commits
f313746a6d7b992918386a5e6db1cfc8f4da30fd ls: for some options, only last takes effect. Closes bug 2959
d87815d5e0721176ee13776956f648e660c895d5 ls: make -x force columnar output; remove unused parts of TRIGGER code
163d86435729cc53d6d4088129f2cde106dd1318 ls: make -F not follow symlinks of the command line
2f7d9e8903029b1b5e51a15f9cb0dcb6ca17c3ac ls: print a space after each column. Closes bug 2941
407ab2a4349de67c0a3203cdcb544a3360506291 ls: tweak -e handling; better comments
982aa263a0cef10ee4f4c06084a87af736c449ac ls: add support for -H
cd387f2554c62c7716970e90af54b8bde6c86c86 ls: fix one-bit-off which caused -H to behave as -h
a4bc10cec7645d72c7284deec070c0f56ebdadaf ls: remove redundant constants LIST_FILENAME and LIST_SHORT
9f368e38fbd165144a7398d3e6d8ae68ea97a3e6 ls: fix bits for -T, -w and --color; make -n imply -l; fix comments
26d11b8133b3ba71e6e94ff525e45984ddeaef72 ls: -g implies -l
3b28dae17dc93584f0e38388d0dbdbd6761d705e ls: widen -s (1k blocks) column from 4 to 6
ea684c6aaf23ead57fac74c3ceaa651c1ae625ec ls: fix handling of symlinks by option -1
---

 coreutils/ls.c      |  462 ++++++++++++++++++++++++++++++----------------------
 include/usage.src.h |   61 ------
 testsuite/ls.tests  |   10 +
 3 files changed, 281 insertions(+), 252 deletions(-)

diff --git a/coreutils/ls.c b/coreutils/ls.c
--- a/coreutils/ls.c
+++ b/coreutils/ls.c
@@ -1,6 +1,5 @@
 /* vi: set sw=4 ts=4: */
 /*
- * tiny-ls.c version 0.1.0: A minimalist 'ls'
  * Copyright (C) 1996 Brian Candler <B.Candler@pobox.com>
  *
  * Licensed under GPLv2 or later, see file LICENSE in this source tree.
@@ -29,6 +28,71 @@
  * [2009-03]
  * ls sorts listing now, and supports almost all options.
  */
+
+//usage:#define ls_trivial_usage
+//usage:	"[-1AaCxd"
+//usage:	IF_FEATURE_LS_FOLLOWLINKS("LH")
+//usage:	IF_FEATURE_LS_RECURSIVE("R")
+//usage:	IF_FEATURE_LS_FILETYPES("Fp") "lins"
+//usage:	IF_FEATURE_LS_TIMESTAMPS("e")
+//usage:	IF_FEATURE_HUMAN_READABLE("h")
+//usage:	IF_FEATURE_LS_SORTFILES("rSXv")
+//usage:	IF_FEATURE_LS_TIMESTAMPS("ctu")
+//usage:	IF_SELINUX("kKZ") "]"
+//usage:	IF_FEATURE_AUTOWIDTH(" -w WIDTH") " [FILE]..."
+//usage:#define ls_full_usage "\n\n"
+//usage:       "List directory contents\n"
+//usage:     "\nOptions:"
+//usage:     "\n	-1	List in a single column"
+//usage:     "\n	-A	Don't list . and .."
+//usage:     "\n	-a	Don't hide entries starting with ."
+//usage:     "\n	-C	List by columns"
+//usage:     "\n	-x	List by lines"
+//usage:     "\n	-d	List directory entries instead of contents"
+//usage:	IF_FEATURE_LS_FOLLOWLINKS(
+//usage:     "\n	-L	Follow symlinks"
+//usage:     "\n	-H	Follow symlinks on command line only"
+//usage:	)
+//usage:	IF_FEATURE_LS_RECURSIVE(
+//usage:     "\n	-R	Recurse"
+//usage:	)
+//usage:	IF_FEATURE_LS_FILETYPES(
+//usage:     "\n	-F	Append indicator (one of */=@|) to entries"
+//usage:     "\n	-p	Append indicator (one of /=@|) to entries"
+//usage:	)
+//usage:     "\n	-l	Long listing format"
+//usage:     "\n	-i	List inode numbers"
+//usage:     "\n	-n	List numeric UIDs and GIDs instead of names"
+//usage:     "\n	-s	List the size of each file, in blocks"
+//usage:	IF_FEATURE_LS_TIMESTAMPS(
+//usage:     "\n	-e	List full date and time"
+//usage:	)
+//usage:	IF_FEATURE_HUMAN_READABLE(
+//usage:     "\n	-h	List sizes in human readable format (1K 243M 2G)"
+//usage:	)
+//usage:	IF_FEATURE_LS_SORTFILES(
+//usage:     "\n	-r	Sort in reverse order"
+//usage:     "\n	-S	Sort by file size"
+//usage:     "\n	-X	Sort by extension"
+//usage:     "\n	-v	Sort by version"
+//usage:	)
+//usage:	IF_FEATURE_LS_TIMESTAMPS(
+//usage:     "\n	-c	With -l: sort by ctime"
+//usage:     "\n	-t	With -l: sort by modification time"
+//usage:     "\n	-u	With -l: sort by access time"
+//usage:	)
+//usage:	IF_SELINUX(
+//usage:     "\n	-k	List security context"
+//usage:     "\n	-K	List security context in long format"
+//usage:     "\n	-Z	List security context and permission"
+//usage:	)
+//usage:	IF_FEATURE_AUTOWIDTH(
+//usage:     "\n	-w N	Assume the terminal is N columns wide"
+//usage:	)
+//usage:	IF_FEATURE_LS_COLOR(
+//usage:     "\n	--color[={always,never,auto}]	Control coloring"
+//usage:	)
+
 #include "libbb.h"
 #include "unicode.h"
 
@@ -53,13 +117,12 @@
 
 enum {
 TERMINAL_WIDTH  = 80,           /* use 79 if terminal has linefold bug */
-COLUMN_GAP      = 2,            /* includes the file type char */
 
-/* what is the overall style of the listing */
-STYLE_COLUMNS   = 1 << 21,      /* fill columns */
-STYLE_LONG      = 2 << 21,      /* one record per line, extended info */
-STYLE_SINGLE    = 3 << 21,      /* one record per line */
-STYLE_MASK      = STYLE_SINGLE,
+SPLIT_DIR       = 1,
+SPLIT_FILE      = 0,
+SPLIT_SUBDIR    = 2,
+
+/* Bits in all_fmt: */
 
 /* 51306 lrwxrwxrwx  1 root     root         2 May 11 01:43 /bin/view -> vi* */
 /* what file information will be listed */
@@ -71,76 +134,76 @@ LIST_ID_NAME    = 1 << 4,
 LIST_ID_NUMERIC = 1 << 5,
 LIST_CONTEXT    = 1 << 6,
 LIST_SIZE       = 1 << 7,
-//LIST_DEV        = 1 << 8, - unused, synonym to LIST_SIZE
-LIST_DATE_TIME  = 1 << 9,
-LIST_FULLTIME   = 1 << 10,
-LIST_FILENAME   = 1 << 11,
-LIST_SYMLINK    = 1 << 12,
-LIST_FILETYPE   = 1 << 13,
-LIST_EXEC       = 1 << 14,
+LIST_DATE_TIME  = 1 << 8,
+LIST_FULLTIME   = 1 << 9,
+LIST_SYMLINK    = 1 << 10,
+LIST_FILETYPE   = 1 << 11,
+LIST_EXEC       = 1 << 12,
 LIST_MASK       = (LIST_EXEC << 1) - 1,
 
 /* what files will be displayed */
-DISP_DIRNAME    = 1 << 15,      /* 2 or more items? label directories */
-DISP_HIDDEN     = 1 << 16,      /* show filenames starting with . */
-DISP_DOT        = 1 << 17,      /* show . and .. */
-DISP_NOLIST     = 1 << 18,      /* show directory as itself, not contents */
-DISP_RECURSIVE  = 1 << 19,      /* show directory and everything below it */
-DISP_ROWS       = 1 << 20,      /* print across rows */
+DISP_DIRNAME    = 1 << 13,      /* 2 or more items? label directories */
+DISP_HIDDEN     = 1 << 14,      /* show filenames starting with . */
+DISP_DOT        = 1 << 15,      /* show . and .. */
+DISP_NOLIST     = 1 << 16,      /* show directory as itself, not contents */
+DISP_RECURSIVE  = 1 << 17,      /* show directory and everything below it */
+DISP_ROWS       = 1 << 18,      /* print across rows */
 DISP_MASK       = ((DISP_ROWS << 1) - 1) & ~(DISP_DIRNAME - 1),
 
-/* how will the files be sorted (CONFIG_FEATURE_LS_SORTFILES) */
-SORT_FORWARD    = 0,            /* sort in reverse order */
-SORT_REVERSE    = 1 << 27,      /* sort in reverse order */
-
-SORT_NAME       = 0,            /* sort by file name */
-SORT_SIZE       = 1 << 28,      /* sort by file size */
-SORT_ATIME      = 2 << 28,      /* sort by last access time */
-SORT_CTIME      = 3 << 28,      /* sort by last change time */
-SORT_MTIME      = 4 << 28,      /* sort by last modification time */
-SORT_VERSION    = 5 << 28,      /* sort by version */
-SORT_EXT        = 6 << 28,      /* sort by file name extension */
-SORT_DIR        = 7 << 28,      /* sort by file or directory */
-SORT_MASK       = (7 << 28) * ENABLE_FEATURE_LS_SORTFILES,
+/* what is the overall style of the listing */
+STYLE_COLUMNAR  = 1 << 19,      /* many records per line */
+STYLE_LONG      = 2 << 19,      /* one record per line, extended info */
+STYLE_SINGLE    = 3 << 19,      /* one record per line */
+STYLE_MASK      = STYLE_SINGLE,
 
 /* which of the three times will be used */
-TIME_CHANGE     = (1 << 23) * ENABLE_FEATURE_LS_TIMESTAMPS,
-TIME_ACCESS     = (1 << 24) * ENABLE_FEATURE_LS_TIMESTAMPS,
-TIME_MASK       = (3 << 23) * ENABLE_FEATURE_LS_TIMESTAMPS,
+TIME_CHANGE     = (1 << 21) * ENABLE_FEATURE_LS_TIMESTAMPS,
+TIME_ACCESS     = (2 << 21) * ENABLE_FEATURE_LS_TIMESTAMPS,
+TIME_MASK       = (3 << 21) * ENABLE_FEATURE_LS_TIMESTAMPS,
 
-FOLLOW_LINKS    = (1 << 25) * ENABLE_FEATURE_LS_FOLLOWLINKS,
+/* how will the files be sorted (CONFIG_FEATURE_LS_SORTFILES) */
+SORT_REVERSE    = 1 << 23,
 
-LS_DISP_HR      = (1 << 26) * ENABLE_FEATURE_HUMAN_READABLE,
+SORT_NAME       = 0,            /* sort by file name */
+SORT_SIZE       = 1 << 24,      /* sort by file size */
+SORT_ATIME      = 2 << 24,      /* sort by last access time */
+SORT_CTIME      = 3 << 24,      /* sort by last change time */
+SORT_MTIME      = 4 << 24,      /* sort by last modification time */
+SORT_VERSION    = 5 << 24,      /* sort by version */
+SORT_EXT        = 6 << 24,      /* sort by file name extension */
+SORT_DIR        = 7 << 24,      /* sort by file or directory */
+SORT_MASK       = (7 << 24) * ENABLE_FEATURE_LS_SORTFILES,
 
-LIST_SHORT      = LIST_FILENAME,
 LIST_LONG       = LIST_MODEBITS | LIST_NLINKS | LIST_ID_NAME | LIST_SIZE | \
-                  LIST_DATE_TIME | LIST_FILENAME | LIST_SYMLINK,
-
-SPLIT_DIR       = 1,
-SPLIT_FILE      = 0,
-SPLIT_SUBDIR    = 2,
+                  LIST_DATE_TIME | LIST_SYMLINK,
 };
 
-/* "[-]Cadil1", POSIX mandated options, busybox always supports */
-/* "[-]gnsx", POSIX non-mandated options, busybox always supports */
-/* "[-]Q" GNU option? busybox always supports */
-/* "[-]Ak" GNU options, busybox always supports */
-/* "[-]FLRctur", POSIX mandated options, busybox optionally supports */
-/* "[-]p", POSIX non-mandated options, busybox optionally supports */
-/* "[-]SXvThw", GNU options, busybox optionally supports */
-/* "[-]K", SELinux mandated options, busybox optionally supports */
-/* "[-]e", I think we made this one up */
+/* -Cadil1  Std options, busybox always supports */
+/* -gnsxA   Std options, busybox always supports */
+/* -Q       GNU option, busybox always supports */
+/* -k       SELinux option, busybox always supports (ignores if !SELinux) */
+/*          Std has -k which means "show sizes in kbytes" */
+/* -FLHRctur Std options, busybox optionally supports */
+/* -p       Std option, busybox optionally supports */
+/*          Not fully compatible - we show not only '/' but other chars too */
+/* -SXvhTw  GNU options, busybox optionally supports */
+/*          -T TABWIDTH is ignored (we don't use tabs on output) */
+/* -KZ      SELinux mandated options, busybox optionally supports */
+/*          (coreutils 8.4 has no -K, remove it?) */
+/* -e       I think we made this one up (looks similar to GNU --full-time) */
+/* We already used up all 32 bits, if we need to add more, candidates for removal: */
+/* -K, -T, -e (add --full-time instead) */
 static const char ls_options[] ALIGN1 =
-	"Cadil1gnsxQAk" /* 13 opts, total 13 */
+	"Cadil1gnsxQAk"      /* 13 opts, total 13 */
 	IF_FEATURE_LS_TIMESTAMPS("cetu") /* 4, 17 */
 	IF_FEATURE_LS_SORTFILES("SXrv")  /* 4, 21 */
 	IF_FEATURE_LS_FILETYPES("Fp")    /* 2, 23 */
-	IF_FEATURE_LS_FOLLOWLINKS("L")   /* 1, 24 */
-	IF_FEATURE_LS_RECURSIVE("R")     /* 1, 25 */
-	IF_FEATURE_HUMAN_READABLE("h")   /* 1, 26 */
-	IF_SELINUX("KZ") /* 2, 28 */
-	IF_FEATURE_AUTOWIDTH("T:w:") /* 2, 30 */
-	;
+	IF_FEATURE_LS_RECURSIVE("R")     /* 1, 24 */
+	IF_SELINUX("KZ")                 /* 2, 26 */
+	IF_FEATURE_LS_FOLLOWLINKS("LH")  /* 2, 28 */
+	IF_FEATURE_HUMAN_READABLE("h")   /* 1, 29 */
+	IF_FEATURE_AUTOWIDTH("T:w:")     /* 2, 31 */
+	/* with --color, we use all 32 bits */;
 enum {
 	//OPT_C = (1 << 0),
 	//OPT_a = (1 << 1),
@@ -155,75 +218,88 @@ enum {
 	OPT_Q = (1 << 10),
 	//OPT_A = (1 << 11),
 	//OPT_k = (1 << 12),
-	OPTBIT_color = 13
-		+ 4 * ENABLE_FEATURE_LS_TIMESTAMPS
-		+ 4 * ENABLE_FEATURE_LS_SORTFILES
-		+ 2 * ENABLE_FEATURE_LS_FILETYPES
-		+ 1 * ENABLE_FEATURE_LS_FOLLOWLINKS
-		+ 1 * ENABLE_FEATURE_LS_RECURSIVE
-		+ 1 * ENABLE_FEATURE_HUMAN_READABLE
-		+ 2 * ENABLE_SELINUX
-		+ 2 * ENABLE_FEATURE_AUTOWIDTH,
-	OPT_color = 1 << OPTBIT_color,
-};
 
-enum {
-	LIST_MASK_TRIGGER	= 0,
-	STYLE_MASK_TRIGGER	= STYLE_MASK,
-	DISP_MASK_TRIGGER	= DISP_ROWS,
-	SORT_MASK_TRIGGER	= SORT_MASK,
+	OPTBIT_c = 13,
+	OPTBIT_e,
+	OPTBIT_t,
+	OPTBIT_u,
+	OPTBIT_S = OPTBIT_c + 4 * ENABLE_FEATURE_LS_TIMESTAMPS,
+	OPTBIT_X, /* 18 */
+	OPTBIT_r,
+	OPTBIT_v,
+	OPTBIT_F = OPTBIT_S + 4 * ENABLE_FEATURE_LS_SORTFILES,
+	OPTBIT_p, /* 22 */
+	OPTBIT_R = OPTBIT_F + 2 * ENABLE_FEATURE_LS_FILETYPES,
+	OPTBIT_K = OPTBIT_R + 1 * ENABLE_FEATURE_LS_RECURSIVE,
+	OPTBIT_Z, /* 25 */
+	OPTBIT_L = OPTBIT_K + 2 * ENABLE_SELINUX,
+	OPTBIT_H, /* 27 */
+	OPTBIT_h = OPTBIT_L + 2 * ENABLE_FEATURE_LS_FOLLOWLINKS,
+	OPTBIT_T = OPTBIT_h + 1 * ENABLE_FEATURE_HUMAN_READABLE,
+	OPTBIT_w, /* 30 */
+	OPTBIT_color = OPTBIT_T + 2 * ENABLE_FEATURE_AUTOWIDTH,
+
+	OPT_c = (1 << OPTBIT_c) * ENABLE_FEATURE_LS_TIMESTAMPS,
+	OPT_e = (1 << OPTBIT_e) * ENABLE_FEATURE_LS_TIMESTAMPS,
+	OPT_t = (1 << OPTBIT_t) * ENABLE_FEATURE_LS_TIMESTAMPS,
+	OPT_u = (1 << OPTBIT_u) * ENABLE_FEATURE_LS_TIMESTAMPS,
+	OPT_S = (1 << OPTBIT_S) * ENABLE_FEATURE_LS_SORTFILES,
+	OPT_X = (1 << OPTBIT_X) * ENABLE_FEATURE_LS_SORTFILES,
+	OPT_r = (1 << OPTBIT_r) * ENABLE_FEATURE_LS_SORTFILES,
+	OPT_v = (1 << OPTBIT_v) * ENABLE_FEATURE_LS_SORTFILES,
+	OPT_F = (1 << OPTBIT_F) * ENABLE_FEATURE_LS_FILETYPES,
+	OPT_p = (1 << OPTBIT_p) * ENABLE_FEATURE_LS_FILETYPES,
+	OPT_R = (1 << OPTBIT_R) * ENABLE_FEATURE_LS_RECURSIVE,
+	OPT_K = (1 << OPTBIT_K) * ENABLE_SELINUX,
+	OPT_Z = (1 << OPTBIT_Z) * ENABLE_SELINUX,
+	OPT_L = (1 << OPTBIT_L) * ENABLE_FEATURE_LS_FOLLOWLINKS,
+	OPT_H = (1 << OPTBIT_H) * ENABLE_FEATURE_LS_FOLLOWLINKS,
+	OPT_h = (1 << OPTBIT_h) * ENABLE_FEATURE_HUMAN_READABLE,
+	OPT_T = (1 << OPTBIT_T) * ENABLE_FEATURE_AUTOWIDTH,
+	OPT_w = (1 << OPTBIT_w) * ENABLE_FEATURE_AUTOWIDTH,
+	OPT_color = (1 << OPTBIT_color) * ENABLE_FEATURE_LS_COLOR,
 };
 
 /* TODO: simple toggles may be stored as OPT_xxx bits instead */
-static const unsigned opt_flags[] = {
-	LIST_SHORT | STYLE_COLUMNS, /* C */
-	DISP_HIDDEN | DISP_DOT,     /* a */
-	DISP_NOLIST,                /* d */
-	LIST_INO,                   /* i */
-	LIST_LONG | STYLE_LONG,     /* l - remember LS_DISP_HR in mask! */
-	LIST_SHORT | STYLE_SINGLE,  /* 1 */
-	0,                          /* g (don't show owner) - handled via OPT_g */
-	LIST_ID_NUMERIC,            /* n */
-	LIST_BLOCKS,                /* s */
-	DISP_ROWS,                  /* x */
-	0,                          /* Q (quote filename) - handled via OPT_Q */
-	DISP_HIDDEN,                /* A */
-	ENABLE_SELINUX * LIST_CONTEXT, /* k (ignored if !SELINUX) */
+static const uint32_t opt_flags[] = {
+	STYLE_COLUMNAR,		     /* C */
+	DISP_HIDDEN | DISP_DOT,      /* a */
+	DISP_NOLIST,                 /* d */
+	LIST_INO,                    /* i */
+	LIST_LONG | STYLE_LONG,      /* l */
+	STYLE_SINGLE,                /* 1 */
+	LIST_LONG | STYLE_LONG,      /* g (don't show owner) - handled via OPT_g. assumes l */
+	LIST_ID_NUMERIC | LIST_LONG | STYLE_LONG, /* n (assumes l) */
+	LIST_BLOCKS,                 /* s */
+	DISP_ROWS | STYLE_COLUMNAR,  /* x */
+	0,                           /* Q (quote filename) - handled via OPT_Q */
+	DISP_HIDDEN,                 /* A */
+	ENABLE_SELINUX * (LIST_CONTEXT|STYLE_SINGLE), /* k (ignored if !SELINUX) */
 #if ENABLE_FEATURE_LS_TIMESTAMPS
-	TIME_CHANGE | (ENABLE_FEATURE_LS_SORTFILES * SORT_CTIME),   /* c */
-	LIST_FULLTIME,              /* e */
-	ENABLE_FEATURE_LS_SORTFILES * SORT_MTIME,   /* t */
-	TIME_ACCESS | (ENABLE_FEATURE_LS_SORTFILES * SORT_ATIME),   /* u */
+	TIME_CHANGE | (ENABLE_FEATURE_LS_SORTFILES * SORT_CTIME), /* c */
+	LIST_FULLTIME,               /* e */
+	ENABLE_FEATURE_LS_SORTFILES * SORT_MTIME, /* t */
+	TIME_ACCESS | (ENABLE_FEATURE_LS_SORTFILES * SORT_ATIME), /* u */
 #endif
 #if ENABLE_FEATURE_LS_SORTFILES
-	SORT_SIZE,                  /* S */
-	SORT_EXT,                   /* X */
-	SORT_REVERSE,               /* r */
-	SORT_VERSION,               /* v */
+	SORT_SIZE,                   /* S */
+	SORT_EXT,                    /* X */
+	SORT_REVERSE,                /* r */
+	SORT_VERSION,                /* v */
 #endif
 #if ENABLE_FEATURE_LS_FILETYPES
-	LIST_FILETYPE | LIST_EXEC,  /* F */
-	LIST_FILETYPE,              /* p */
-#endif
-#if ENABLE_FEATURE_LS_FOLLOWLINKS
-	FOLLOW_LINKS,               /* L */
+	LIST_FILETYPE | LIST_EXEC,   /* F */
+	LIST_FILETYPE,               /* p */
 #endif
 #if ENABLE_FEATURE_LS_RECURSIVE
-	DISP_RECURSIVE,             /* R */
-#endif
-#if ENABLE_FEATURE_HUMAN_READABLE
-	LS_DISP_HR,                 /* h */
-#endif
-#if ENABLE_SELINUX
-	LIST_MODEBITS|LIST_NLINKS|LIST_CONTEXT|LIST_SIZE|LIST_DATE_TIME, /* K */
+	DISP_RECURSIVE,              /* R */
 #endif
 #if ENABLE_SELINUX
-	LIST_MODEBITS|LIST_ID_NAME|LIST_CONTEXT, /* Z */
+	LIST_MODEBITS|LIST_NLINKS|LIST_CONTEXT|LIST_SIZE|LIST_DATE_TIME|STYLE_SINGLE, /* K */
+	LIST_MODEBITS|LIST_ID_NAME|LIST_CONTEXT|STYLE_SINGLE, /* Z */
 #endif
-	(1U<<31)
-	/* options after Z are not processed through opt_flags:
-	 * T, w - ignored
-	 */
+	(1U << 31)
+	/* options after Z are not processed through opt_flags */
 };
 
 
@@ -246,7 +322,6 @@ struct globals {
 	smallint exit_code;
 	unsigned all_fmt;
 #if ENABLE_FEATURE_AUTOWIDTH
-	unsigned tabstops; // = COLUMN_GAP;
 	unsigned terminal_width; // = TERMINAL_WIDTH;
 #endif
 #if ENABLE_FEATURE_LS_TIMESTAMPS
@@ -263,11 +338,9 @@ enum { show_color = 0 };
 #define exit_code       (G.exit_code     )
 #define all_fmt         (G.all_fmt       )
 #if ENABLE_FEATURE_AUTOWIDTH
-# define tabstops       (G.tabstops      )
 # define terminal_width (G.terminal_width)
 #else
 enum {
-	tabstops = COLUMN_GAP,
 	terminal_width = TERMINAL_WIDTH,
 };
 #endif
@@ -275,7 +348,6 @@ enum {
 #define INIT_G() do { \
 	/* we have to zero it out because of NOEXEC */ \
 	memset(&G, 0, sizeof(G)); \
-	IF_FEATURE_AUTOWIDTH(tabstops = COLUMN_GAP;) \
 	IF_FEATURE_AUTOWIDTH(terminal_width = TERMINAL_WIDTH;) \
 	IF_FEATURE_LS_TIMESTAMPS(time(&current_time_t);) \
 } while (0)
@@ -287,7 +359,7 @@ static struct dnode *my_stat(const char
 	struct dnode *cur;
 	IF_SELINUX(security_context_t sid = NULL;)
 
-	if ((all_fmt & FOLLOW_LINKS) || force_follow) {
+	if ((option_mask32 & OPT_L) || force_follow) {
 #if ENABLE_SELINUX
 		if (is_selinux_enabled())  {
 			 getfilecon(fullname, &sid);
@@ -553,7 +625,7 @@ static unsigned calc_name_len(const char
 
 
 /* Return the number of used columns.
- * Note that only STYLE_COLUMNS uses return value.
+ * Note that only STYLE_COLUMNAR uses return value.
  * STYLE_SINGLE and STYLE_LONG don't care.
  * coreutils 7.2 also supports:
  * ls -b (--escape) = octal escapes (although it doesn't look like working)
@@ -587,7 +659,7 @@ static unsigned print_name(const char *n
 }
 
 /* Return the number of used columns.
- * Note that only STYLE_COLUMNS uses return value,
+ * Note that only STYLE_COLUMNAR uses return value,
  * STYLE_SINGLE and STYLE_LONG don't care.
  */
 static NOINLINE unsigned list_single(const struct dnode *dn)
@@ -616,14 +688,23 @@ static NOINLINE unsigned list_single(con
 
 	if (all_fmt & LIST_INO)
 		column += printf("%7llu ", (long long) dn->dstat.st_ino);
+//TODO: -h should affect -s too:
 	if (all_fmt & LIST_BLOCKS)
-		column += printf("%4"OFF_FMT"u ", (off_t) (dn->dstat.st_blocks >> 1));
+		column += printf("%6"OFF_FMT"u ", (off_t) (dn->dstat.st_blocks >> 1));
 	if (all_fmt & LIST_MODEBITS)
 		column += printf("%-10s ", (char *) bb_mode_string(dn->dstat.st_mode));
 	if (all_fmt & LIST_NLINKS)
 		column += printf("%4lu ", (long) dn->dstat.st_nlink);
+	if (all_fmt & LIST_ID_NUMERIC) {
+		if (option_mask32 & OPT_g)
+			column += printf("%-8u ", (int) dn->dstat.st_gid);
+		else
+			column += printf("%-8u %-8u ",
+					(int) dn->dstat.st_uid,
+					(int) dn->dstat.st_gid);
+	}
 #if ENABLE_FEATURE_LS_USERNAME
-	if (all_fmt & LIST_ID_NAME) {
+	else if (all_fmt & LIST_ID_NAME) {
 		if (option_mask32 & OPT_g) {
 			column += printf("%-8.8s ",
 				get_cached_groupname(dn->dstat.st_gid));
@@ -634,21 +715,13 @@ static NOINLINE unsigned list_single(con
 		}
 	}
 #endif
-	if (all_fmt & LIST_ID_NUMERIC) {
-		if (option_mask32 & OPT_g)
-			column += printf("%-8u ", (int) dn->dstat.st_gid);
-		else
-			column += printf("%-8u %-8u ",
-					(int) dn->dstat.st_uid,
-					(int) dn->dstat.st_gid);
-	}
-	if (all_fmt & (LIST_SIZE /*|LIST_DEV*/ )) {
+	if (all_fmt & LIST_SIZE) {
 		if (S_ISBLK(dn->dstat.st_mode) || S_ISCHR(dn->dstat.st_mode)) {
 			column += printf("%4u, %3u ",
 					(int) major(dn->dstat.st_rdev),
 					(int) minor(dn->dstat.st_rdev));
 		} else {
-			if (all_fmt & LS_DISP_HR) {
+			if (option_mask32 & OPT_h) {
 				column += printf("%"HUMAN_READABLE_MAX_WIDTH_STR"s ",
 					/* print st_size, show one fractional, use suffixes */
 					make_human_readable_str(dn->dstat.st_size, 1, 0)
@@ -668,9 +741,12 @@ static NOINLINE unsigned list_single(con
 			ttime = dn->dstat.st_ctime;
 		filetime = ctime(&ttime);
 		/* filetime's format: "Wed Jun 30 21:49:08 1993\n" */
-		if (all_fmt & LIST_FULLTIME)
+		if (all_fmt & LIST_FULLTIME) { /* -e */
+			/* Note: coreutils 8.4 ls --full-time prints:
+			 * 2009-07-13 17:49:27.000000000 +0200
+			 */
 			column += printf("%.24s ", filetime);
-		else { /* LIST_DATE_TIME */
+		} else { /* LIST_DATE_TIME */
 			/* current_time_t ~== time(NULL) */
 			time_t age = current_time_t - ttime;
 			printf("%.6s ", filetime + 4); /* "Jun 30" */
@@ -690,20 +766,20 @@ static NOINLINE unsigned list_single(con
 		freecon(dn->sid);
 	}
 #endif
-	if (all_fmt & LIST_FILENAME) {
+
 #if ENABLE_FEATURE_LS_COLOR
-		if (show_color) {
-			info.st_mode = 0; /* for fgcolor() */
-			lstat(dn->fullname, &info);
-			printf("\033[%u;%um", bold(info.st_mode),
-					fgcolor(info.st_mode));
-		}
+	if (show_color) {
+		info.st_mode = 0; /* for fgcolor() */
+		lstat(dn->fullname, &info);
+		printf("\033[%u;%um", bold(info.st_mode),
+			fgcolor(info.st_mode));
+	}
 #endif
-		column += print_name(dn->name);
-		if (show_color) {
-			printf("\033[0m");
-		}
+	column += print_name(dn->name);
+	if (show_color) {
+		printf("\033[0m");
 	}
+
 	if (all_fmt & LIST_SYMLINK) {
 		if (S_ISLNK(dn->dstat.st_mode) && lpath) {
 			printf(" -> ");
@@ -743,9 +819,9 @@ static NOINLINE unsigned list_single(con
 static void showfiles(struct dnode **dn, unsigned nfiles)
 {
 	unsigned i, ncols, nrows, row, nc;
-	unsigned column = 0;
-	unsigned nexttab = 0;
-	unsigned column_width = 0; /* used only by STYLE_COLUMNS */
+	unsigned column;
+	unsigned nexttab;
+	unsigned column_width = 0; /* used only by STYLE_COLUMNAR */
 
 	if (all_fmt & STYLE_LONG) { /* STYLE_LONG or STYLE_SINGLE */
 		ncols = 1;
@@ -756,7 +832,7 @@ static void showfiles(struct dnode **dn,
 			if (column_width < len)
 				column_width = len;
 		}
-		column_width += tabstops +
+		column_width += 1 +
 			IF_SELINUX( ((all_fmt & LIST_CONTEXT) ? 33 : 0) + )
 				((all_fmt & LIST_INO) ? 8 : 0) +
 				((all_fmt & LIST_BLOCKS) ? 5 : 0);
@@ -772,6 +848,8 @@ static void showfiles(struct dnode **dn,
 		ncols = 1;
 	}
 
+	column = 0;
+	nexttab = 0;
 	for (row = 0; row < nrows; row++) {
 		for (nc = 0; nc < ncols; nc++) {
 			/* reach into the array based on the column and row */
@@ -782,8 +860,8 @@ static void showfiles(struct dnode **dn,
 			if (i < nfiles) {
 				if (column > 0) {
 					nexttab -= column;
-					printf("%*s", nexttab, "");
-					column += nexttab;
+					printf("%*s ", nexttab, "");
+					column += nexttab + 1;
 				}
 				nexttab = column + column_width;
 				column += list_single(dn[i]);
@@ -834,12 +912,6 @@ static void showdirs(struct dnode **dn,
 	struct dnode **subdnp;
 	struct dnode **dnd;
 
-	/* Never happens:
-	if (dn == NULL || ndirs < 1) {
-		return;
-	}
-	*/
-
 	for (; *dn; dn++) {
 		if (all_fmt & (DISP_DIRNAME | DISP_RECURSIVE)) {
 			if (!first)
@@ -978,8 +1050,8 @@ int ls_main(int argc UNUSED_PARAM, char
 
 	init_unicode();
 
-	all_fmt = LIST_SHORT |
-		(ENABLE_FEATURE_LS_SORTFILES * (SORT_NAME | SORT_FORWARD));
+	if (ENABLE_FEATURE_LS_SORTFILES)
+		all_fmt = SORT_NAME;
 
 #if ENABLE_FEATURE_AUTOWIDTH
 	/* obtain the terminal width */
@@ -990,38 +1062,42 @@ int ls_main(int argc UNUSED_PARAM, char
 
 	/* process options */
 	IF_FEATURE_LS_COLOR(applet_long_options = ls_longopts;)
-#if ENABLE_FEATURE_AUTOWIDTH
-	opt_complementary = "T+:w+"; /* -T N, -w N */
-	opt = getopt32(argv, ls_options, &tabstops, &terminal_width
-				IF_FEATURE_LS_COLOR(, &color_opt));
-#else
-	opt = getopt32(argv, ls_options IF_FEATURE_LS_COLOR(, &color_opt));
-#endif
-	for (i = 0; opt_flags[i] != (1U<<31); i++) {
+	opt_complementary =
+		/* -e implies -l */
+		"el"
+		/* http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ls.html:
+		 * in some pairs of opts, only last one takes effect:
+		 */
+		IF_FEATURE_LS_TIMESTAMPS(IF_FEATURE_LS_SORTFILES(":t-S:S-t")) /* time/size */
+		// ":m-l:l-m" - we don't have -m
+		IF_FEATURE_LS_FOLLOWLINKS(":H-L:L-H")
+		":C-xl:x-Cl:l-xC" /* bycols/bylines/long */
+		":C-1:1-C" /* bycols/oneline */
+		":x-1:1-x" /* bylines/oneline (not in SuS, but in GNU coreutils 8.4) */
+		":c-u:u-c" /* mtime/atime */
+		/* -w NUM: */
+		IF_FEATURE_AUTOWIDTH(":w+");
+	opt = getopt32(argv, ls_options
+		IF_FEATURE_AUTOWIDTH(, NULL, &terminal_width)
+		IF_FEATURE_LS_COLOR(, &color_opt)
+	);
+	for (i = 0; opt_flags[i] != (1U << 31); i++) {
 		if (opt & (1 << i)) {
-			unsigned flags = opt_flags[i];
+			uint32_t flags = opt_flags[i];
 
-			if (flags & LIST_MASK_TRIGGER)
-				all_fmt &= ~LIST_MASK;
-			if (flags & STYLE_MASK_TRIGGER)
+			if (flags & STYLE_MASK)
 				all_fmt &= ~STYLE_MASK;
-			if (flags & SORT_MASK_TRIGGER)
+			if (flags & SORT_MASK)
 				all_fmt &= ~SORT_MASK;
-			if (flags & DISP_MASK_TRIGGER)
-				all_fmt &= ~DISP_MASK;
 			if (flags & TIME_MASK)
 				all_fmt &= ~TIME_MASK;
-			if (flags & LIST_CONTEXT)
-				all_fmt |= STYLE_SINGLE;
-			/* huh?? opt cannot be 'l' */
-			//if (LS_DISP_HR && opt == 'l')
-			//	all_fmt &= ~LS_DISP_HR;
+
 			all_fmt |= flags;
 		}
 	}
 
 #if ENABLE_FEATURE_LS_COLOR
-	/* find color bit value - last position for short getopt */
+	/* set show_color = 1/0 */
 	if (ENABLE_FEATURE_LS_COLOR_IS_DEFAULT && isatty(STDOUT_FILENO)) {
 		char *p = getenv("LS_COLORS");
 		/* LS_COLORS is unset, or (not empty && not "none") ? */
@@ -1054,15 +1130,12 @@ int ls_main(int argc UNUSED_PARAM, char
 		if (all_fmt & TIME_ACCESS)
 			all_fmt = (all_fmt & ~SORT_MASK) | SORT_ATIME;
 	}
-	if ((all_fmt & STYLE_MASK) != STYLE_LONG) /* only for long list */
-		all_fmt &= ~(LIST_ID_NUMERIC|LIST_FULLTIME|LIST_ID_NAME|LIST_ID_NUMERIC);
-	if (ENABLE_FEATURE_LS_USERNAME)
-		if ((all_fmt & STYLE_MASK) == STYLE_LONG && (all_fmt & LIST_ID_NUMERIC))
-			all_fmt &= ~LIST_ID_NAME; /* don't list names if numeric uid */
+	if ((all_fmt & STYLE_MASK) != STYLE_LONG) /* not -l? */
+		all_fmt &= ~(LIST_ID_NUMERIC|LIST_ID_NAME|LIST_FULLTIME);
 
-	/* choose a display format */
+	/* choose a display format if one was not already specified by an option */
 	if (!(all_fmt & STYLE_MASK))
-		all_fmt |= (isatty(STDOUT_FILENO) ? STYLE_COLUMNS : STYLE_SINGLE);
+		all_fmt |= (isatty(STDOUT_FILENO) ? STYLE_COLUMNAR : STYLE_SINGLE);
 
 	argv += optind;
 	if (!argv[0])
@@ -1075,8 +1148,15 @@ int ls_main(int argc UNUSED_PARAM, char
 	dn = NULL;
 	nfiles = 0;
 	do {
-		/* NB: follow links on command line unless -l or -s */
-		cur = my_stat(*argv, *argv, !(all_fmt & (STYLE_LONG|LIST_BLOCKS)));
+		cur = my_stat(*argv, *argv,
+			/* follow links on command line unless -l, -s or -F: */
+			!((all_fmt & STYLE_MASK) == STYLE_LONG
+			  || (all_fmt & LIST_BLOCKS)
+			  || (option_mask32 & OPT_F)
+			)
+			/* ... or if -H: */
+			|| (option_mask32 & OPT_H)
+		);
 		argv++;
 		if (!cur)
 			continue;
diff --git a/include/usage.src.h b/include/usage.src.h
--- a/include/usage.src.h
+++ b/include/usage.src.h
@@ -2181,67 +2181,6 @@ INSERT
      "\n	-h	Print banner page too" \
      "\n	-V	Verbose" \
 
-#define ls_trivial_usage \
-       "[-1Aa" IF_FEATURE_LS_TIMESTAMPS("c") "Cd" \
-	IF_FEATURE_LS_TIMESTAMPS("e") IF_FEATURE_LS_FILETYPES("F") "iln" \
-	IF_FEATURE_LS_FILETYPES("p") IF_FEATURE_LS_FOLLOWLINKS("L") \
-	IF_FEATURE_LS_RECURSIVE("R") IF_FEATURE_LS_SORTFILES("rS") "s" \
-	IF_FEATURE_AUTOWIDTH("T") IF_FEATURE_LS_TIMESTAMPS("tu") \
-	IF_FEATURE_LS_SORTFILES("v") IF_FEATURE_AUTOWIDTH("w") "x" \
-	IF_FEATURE_LS_SORTFILES("X") IF_FEATURE_HUMAN_READABLE("h") "k" \
-	IF_SELINUX("K") "] [FILE]..."
-#define ls_full_usage "\n\n" \
-       "List directory contents\n" \
-     "\nOptions:" \
-     "\n	-1	List in a single column" \
-     "\n	-A	Don't list . and .." \
-     "\n	-a	Don't hide entries starting with ." \
-     "\n	-C	List by columns" \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-c	With -l: sort by ctime") \
-	IF_FEATURE_LS_COLOR( \
-     "\n	--color[={always,never,auto}]	Control coloring") \
-     "\n	-d	List directory entries instead of contents" \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-e	List full date and time") \
-	IF_FEATURE_LS_FILETYPES( \
-     "\n	-F	Append indicator (one of */=@|) to entries") \
-     "\n	-i	List inode numbers" \
-     "\n	-l	Long listing format" \
-     "\n	-n	List numeric UIDs and GIDs instead of names" \
-	IF_FEATURE_LS_FILETYPES( \
-     "\n	-p	Append indicator (one of /=@|) to entries") \
-	IF_FEATURE_LS_FOLLOWLINKS( \
-     "\n	-L	List entries pointed to by symlinks") \
-	IF_FEATURE_LS_RECURSIVE( \
-     "\n	-R	Recurse") \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-r	Sort in reverse order") \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-S	Sort by file size") \
-     "\n	-s	List the size of each file, in blocks" \
-	IF_FEATURE_AUTOWIDTH( \
-     "\n	-T N	Assume tabstop every N columns") \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-t	With -l: sort by modification time") \
-	IF_FEATURE_LS_TIMESTAMPS( \
-     "\n	-u	With -l: sort by access time") \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-v	Sort by version") \
-	IF_FEATURE_AUTOWIDTH( \
-     "\n	-w N	Assume the terminal is N columns wide") \
-     "\n	-x	List by lines" \
-	IF_FEATURE_LS_SORTFILES( \
-     "\n	-X	Sort by extension") \
-	IF_FEATURE_HUMAN_READABLE( \
-     "\n	-h	List sizes in human readable format (1K 243M 2G)") \
-	IF_SELINUX( \
-     "\n	-k	List security context") \
-	IF_SELINUX( \
-     "\n	-K	List security context in long format") \
-	IF_SELINUX( \
-     "\n	-Z	List security context and permission") \
-
 #define lsattr_trivial_usage \
        "[-Radlv] [FILE]..."
 #define lsattr_full_usage "\n\n" \
diff --git a/testsuite/ls.tests b/testsuite/ls.tests
--- a/testsuite/ls.tests
+++ b/testsuite/ls.tests
@@ -251,6 +251,16 @@ test x"$CONFIG_UNICODE_SUPPORT" = x"y" \
 0110_5.3.2__U+FFFF_=_ef_bf_bf_=_"?"_______________________________________|
 ' "" ""
 
+rm -rf ls.testdir 2>/dev/null
+mkdir ls.testdir || exit 1
+
+# testing "test name" "command" "expected result" "file input" "stdin"
+
+testing "ls symlink_to_dir" \
+"touch ls.testdir/A ls.testdir/B; ln -s ls.testdir ls.link; ls ls.link; ls -1 ls.link/; ls -1 ls.link; rm -f ls.link" \
+"A\nB\nA\nB\nA\nB\n" \
+"" ""
+
 # Clean up
 rm -rf ls.testdir 2>/dev/null
 
-- 
