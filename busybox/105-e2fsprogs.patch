diff -BurpN busybox-1.17.1/Makefile busybox/Makefile
--- busybox-1.17.1/Makefile	2010-07-25 18:29:20.000000000 +0000
+++ busybox/Makefile	2010-07-25 18:48:26.000000000 +0000
@@ -465,6 +465,8 @@ libs-y		:= \
 		coreutils/libcoreutils/ \
 		debianutils/ \
 		e2fsprogs/ \
+		e2fsprogs/e2p/ \
+		e2fsprogs/ext2fs/ \
 		editors/ \
 		findutils/ \
 		init/ \
diff -BurpN busybox-1.17.1/e2fsprogs/Config.src busybox/e2fsprogs/Config.src
--- busybox-1.17.1/e2fsprogs/Config.src	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/Config.src	2010-07-25 18:48:32.000000000 +0000
@@ -16,6 +16,7 @@ config CHATTR
 config E2FSCK
 	bool "e2fsck"
 	default n
+	select VOLUMEID
 	help
 	  e2fsck is used to check Linux second extended file systems (ext2fs).
 	  e2fsck also supports ext2 filesystems countaining a journal (ext3).
@@ -39,6 +40,7 @@ config LSATTR
 config MKE2FS
 	bool "mke2fs"
 	default n
+	select VOLUMEID
 	help
 	  mke2fs is used to create an ext2/ext3 filesystem. The normal compat
 	  symlinks 'mkfs.ext2' and 'mkfs.ext3' are also provided.
@@ -46,6 +48,7 @@ config MKE2FS
 config TUNE2FS
 	bool "tune2fs"
 	default n
+	select VOLUMEID
 	help
 	  tune2fs allows the system administrator to adjust various tunable
 	  filesystem parameters on Linux ext2/ext3 filesystems.
@@ -61,12 +61,4 @@ config E2LABEL
 	  e2label will display or change the filesystem label on the ext2
 	  filesystem located on device.
 
-config FINDFS
-	bool "findfs"
-	default n
-	depends on TUNE2FS
-	help
-	  findfs will search the disks in the system looking for a filesystem
-	  which has a label matching label or a UUID equal to uuid.
-
 endmenu
diff -BurpN busybox-1.17.1/e2fsprogs/Kbuild.src busybox/e2fsprogs/Kbuild.src
--- busybox-1.17.1/e2fsprogs/Kbuild.src	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/Kbuild.src	2010-07-25 18:48:32.000000000 +0000
@@ -8,11 +8,11 @@ lib-y:=
 
 INSERT
 
-lib-$(CONFIG_CHATTR)     += chattr.o
-lib-$(CONFIG_E2FSCK)     += e2fsck.o util.o
-lib-$(CONFIG_FSCK)       += fsck.o util.o
-lib-$(CONFIG_LSATTR)     += lsattr.o
-lib-$(CONFIG_MKE2FS)     += mke2fs.o util.o
-lib-$(CONFIG_TUNE2FS)    += tune2fs.o util.o
+lib-$(CONFIG_CHATTR)     += chattr.o e2fs_lib.o
+lib-$(CONFIG_E2FSCK)     += e2fsck.o util.o e2fs_lib.o
+lib-$(CONFIG_FSCK)       += fsck.o
+lib-$(CONFIG_LSATTR)     += lsattr.o e2fs_lib.o
+lib-$(CONFIG_MKE2FS)     += mke2fs.o util.o e2fs_lib.o
+lib-$(CONFIG_TUNE2FS)    += tune2fs.o util.o e2fs_lib.o
 
 CFLAGS += -include $(srctree)/e2fsprogs/e2fsbb.h
diff -BurpN busybox-1.17.1/e2fsprogs/e2fs_lib.h busybox/e2fsprogs/e2fs_lib.h
--- busybox-1.17.1/e2fsprogs/e2fs_lib.h	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/e2fs_lib.h	2010-07-25 18:48:32.000000000 +0000
@@ -44,4 +44,9 @@ extern const char e2attr_flags_sname[];
 #define e2attr_flags_sname_chattr (&e2attr_flags_sname[1])
 #endif
 
+/* uuid helpers */
+#define uuid_clear(uu) memset(uu, 0, sizeof(uu))
+#define uuid_copy(dst,src) memcpy(dst, src, sizeof(dst))
+#define uuid_is_null(uu) (!memcmp(uu, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sizeof(uu)))
+
 POP_SAVED_FUNCTION_VISIBILITY
diff -BurpN busybox-1.17.1/e2fsprogs/e2fsck.c busybox/e2fsprogs/e2fsck.c
--- busybox-1.17.1/e2fsprogs/e2fsck.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/e2fsck.c	2010-07-25 18:48:32.000000000 +0000
@@ -41,7 +41,7 @@
 static void e2fsck_pass1_dupblocks(e2fsck_t ctx, char *block_buf);
 
 /* pass1.c */
-static void e2fsck_use_inode_shortcuts(e2fsck_t ctx, int bool);
+static void e2fsck_use_inode_shortcuts(e2fsck_t ctx, int fl_bool);
 
 /* pass2.c */
 static int e2fsck_process_bad_inode(e2fsck_t ctx, ext2_ino_t dir,
@@ -996,8 +996,6 @@ static void e2fsck_free_context(e2fsck_t
 		return;
 
 	e2fsck_reset_context(ctx);
-	if (ctx->blkid)
-		blkid_put_cache(ctx->blkid);
 
 	ext2fs_free_mem(&ctx);
 }
@@ -1642,11 +1640,10 @@ static errcode_t e2fsck_get_journal(e2fs
 		if (!ctx->journal_name) {
 			char uuid[37];
 
-			uuid_unparse(sb->s_journal_uuid, uuid);
-			ctx->journal_name = blkid_get_devname(ctx->blkid,
-							      "UUID", uuid);
+			unparse_uuid(sb->s_journal_uuid, uuid);
+			ctx->journal_name = get_devname_from_uuid(uuid);
 			if (!ctx->journal_name)
-				ctx->journal_name = blkid_devno_to_devname(sb->s_journal_dev);
+				ctx->journal_name = get_devname_from_device(sb->s_journal_dev);
 		}
 		journal_name = ctx->journal_name;
 
@@ -1871,7 +1868,7 @@ static void e2fsck_journal_reset_super(e
 {
 	char *p;
 	union {
-		uuid_t uuid;
+		__u8  uuid[16];
 		__u32 val[4];
 	} u;
 	__u32 new_seq = 0;
@@ -1901,7 +1898,7 @@ static void e2fsck_journal_reset_super(e
 	 * This avoids the need to zero the whole journal (slow to do,
 	 * and risky when we are just recovering the filesystem).
 	 */
-	uuid_generate(u.uuid);
+	generate_uuid(u.uuid);
 	for (i = 0; i < 4; i ++)
 		new_seq ^= u.val[i];
 	jsb->s_sequence = htonl(new_seq);
@@ -2540,7 +2537,7 @@ static void expand_inode_expression(char
 		if (do_gmt == -1) {
 			time_str = getenv("TZ");
 			if (!time_str)
-				time_str = "";
+				time_str = (char *)"";
 			do_gmt = !strcmp(time_str, "GMT");
 		}
 		t = inode->i_mtime;
@@ -4409,7 +4406,7 @@ static int process_bad_block(ext2_filsys
  * out, so we can try to allocate new block(s) to replace the bad
  * blocks.
  */
-static void handle_fs_bad_blocks(e2fsck_t ctx)
+static void handle_fs_bad_blocks(e2fsck_t ctx EXT2FS_ATTR((unused)))
 {
 	printf("Bad blocks detected on your filesystem\n"
 		"You should get your data off as the device will soon die\n");
@@ -4547,11 +4544,11 @@ static errcode_t pass1_check_directory(e
 	return 0;
 }
 
-void e2fsck_use_inode_shortcuts(e2fsck_t ctx, int bool)
+void e2fsck_use_inode_shortcuts(e2fsck_t ctx, int fl_bool)
 {
 	ext2_filsys fs = ctx->fs;
 
-	if (bool) {
+	if (fl_bool) {
 		fs->get_blocks = pass1_get_blocks;
 		fs->check_directory = pass1_check_directory;
 		fs->read_inode = pass1_read_inode;
@@ -11884,7 +11881,7 @@ static void check_super_block(e2fsck_t c
 	 */
 	if (!(ctx->options & E2F_OPT_READONLY) && uuid_is_null(sb->s_uuid)) {
 		if (fix_problem(ctx, PR_0_ADD_UUID, &pctx)) {
-			uuid_generate(sb->s_uuid);
+			generate_uuid(sb->s_uuid);
 			ext2fs_mark_super_dirty(fs);
 			fs->flags &= ~EXT2_FLAG_MASTER_SB_ONLY;
 		}
@@ -12183,11 +12180,10 @@ static void swap_filesys(e2fsck_t ctx)
  */
 
 
-void *e2fsck_allocate_memory(e2fsck_t ctx, unsigned int size,
-			     const char *description)
+void *e2fsck_allocate_memory(e2fsck_t ctx EXT2FS_ATTR((unused)), unsigned int size,
+			     const char *description EXT2FS_ATTR((unused)))
 {
 	void *ret;
-	char buf[256];
 
 	ret = xzalloc(size);
 	return ret;
@@ -12989,7 +12985,6 @@ static errcode_t PRS(int argc, char **ar
 	}
 	memset(bar, '=', sizeof(bar)-1);
 	memset(spaces, ' ', sizeof(spaces)-1);
-	blkid_get_cache(&ctx->blkid, NULL);
 
 	if (argc && *argv)
 		ctx->program_name = *argv;
@@ -13111,8 +13106,9 @@ static errcode_t PRS(int argc, char **ar
 	ctx->io_options = strchr(argv[optind], '?');
 	if (ctx->io_options)
 		*ctx->io_options++ = 0;
-	ctx->filesystem_name = blkid_get_devname(ctx->blkid, argv[optind], 0);
-	if (!ctx->filesystem_name) {
+	ctx->filesystem_name = argv[optind];
+	if (resolve_mount_spec(&ctx->filesystem_name) < 0 ||
+	    !ctx->filesystem_name) {
 		bb_error_msg(_("Unable to resolve '%s'"), argv[optind]);
 		bb_error_msg_and_die(0);
 	}
diff -BurpN busybox-1.17.1/e2fsprogs/e2fsck.h busybox/e2fsprogs/e2fsck.h
--- busybox-1.17.1/e2fsprogs/e2fsck.h	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/e2fsck.h	2010-07-25 18:48:32.000000000 +0000
@@ -36,9 +36,9 @@
 #include "fsck.h"
 
 #include "ext2fs/ext2_fs.h"
-#include "blkid/blkid.h"
+#include "volume_id.h"
 #include "ext2fs/ext2_ext_attr.h"
-#include "uuid/uuid.h"
+#include "e2fs_lib.h"
 #include "libbb.h"
 
 #ifdef HAVE_CONIO_H
@@ -505,7 +505,6 @@ struct e2fsck_struct {
 	int     blocksize;      /* blocksize */
 	blk_t   num_blocks;     /* Total number of blocks */
 	int     mount_flags;
-	blkid_cache blkid;      /* blkid cache */
 
 	jmp_buf abort_loc;
 
diff -BurpN busybox-1.17.1/e2fsprogs/e2p/Kbuild.src busybox/e2fsprogs/e2p/Kbuild.src
--- busybox-1.17.1/e2fsprogs/e2p/Kbuild.src	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/e2p/Kbuild.src	2010-07-25 18:48:32.000000000 +0000
@@ -13,6 +13,6 @@ lib-y:=
 
 INSERT
 
-lib-$(NEEDED-y) += fgetsetflags.o fgetsetversion.o pf.o iod.o mntopts.o \
-           feature.o ls.o uuid.o pe.o ostype.o ps.o hashstr.o \
+lib-$(NEEDED-y) += mntopts.o \
+           feature.o ls.o pe.o ostype.o ps.o hashstr.o \
            parse_num.o
diff -BurpN busybox-1.17.1/e2fsprogs/e2p/e2p.h busybox/e2fsprogs/e2p/e2p.h
--- busybox-1.17.1/e2fsprogs/e2p/e2p.h	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/e2p/e2p.h	2010-07-25 18:48:32.000000000 +0000
@@ -17,40 +17,17 @@
 
 #define PFOPT_LONG  1 /* Must be 1 for compatibility with `int long_format'. */
 
-/*int fgetversion (const char * name, unsigned long * version);*/
-/*int fsetversion (const char * name, unsigned long version);*/
-int fgetsetversion(const char * name, unsigned long * get_version, unsigned long set_version);
-#define fgetversion(name, version) fgetsetversion(name, version, 0)
-#define fsetversion(name, version) fgetsetversion(name, NULL, version)
-
-/*int fgetflags (const char * name, unsigned long * flags);*/
-/*int fsetflags (const char * name, unsigned long flags);*/
-int fgetsetflags(const char * name, unsigned long * get_flags, unsigned long set_flags);
-#define fgetflags(name, flags) fgetsetflags(name, flags, 0)
-#define fsetflags(name, flags) fgetsetflags(name, NULL, flags)
-
-int getflags (int fd, unsigned long * flags);
-int getversion (int fd, unsigned long * version);
-int iterate_on_dir (const char * dir_name,
-		    int (*func) (const char *, struct dirent *, void *),
-		    void * private);
+
 /*void list_super(struct ext2_super_block * s);*/
 void list_super2(struct ext2_super_block * s, FILE *f);
 #define list_super(s) list_super2(s, stdout)
 void print_fs_errors (FILE *f, unsigned short errors);
-void print_flags (FILE *f, unsigned long flags, unsigned options);
 void print_fs_state (FILE *f, unsigned short state);
-int setflags (int fd, unsigned long flags);
-int setversion (int fd, unsigned long version);
 
 const char *e2p_feature2string(int compat, unsigned int mask);
 int e2p_string2feature(char *string, int *compat, unsigned int *mask);
 int e2p_edit_feature(const char *str, __u32 *compat_array, __u32 *ok_array);
 
-int e2p_is_null_uuid(void *uu);
-void e2p_uuid_to_str(void *uu, char *out);
-const char *e2p_uuid2str(void *uu);
-
 const char *e2p_hash2string(int num);
 int e2p_string2hash(char *string);
 
diff -BurpN busybox-1.17.1/e2fsprogs/e2p/ls.c busybox/e2fsprogs/e2p/ls.c
--- busybox-1.17.1/e2fsprogs/e2p/ls.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/e2p/ls.c	2010-07-25 18:48:32.000000000 +0000
@@ -21,6 +21,7 @@
 #include <time.h>
 
 #include "e2p.h"
+#include "../e2fs_lib.h"
 
 static void print_user(unsigned short uid, FILE *f)
 {
@@ -141,7 +142,7 @@ static void print_mntopts(struct ext2_su
 void list_super2(struct ext2_super_block * sb, FILE *f)
 {
 	int inode_blocks_per_group;
-	char buf[80], *str;
+	char buf[80], uuid_buf[37], *str;
 	time_t	tm;
 
 	inode_blocks_per_group = (((sb->s_inodes_per_group *
@@ -164,7 +165,7 @@ void list_super2(struct ext2_super_block
 		"Filesystem UUID:          %s\n"
 		"Filesystem magic number:  0x%04X\n"
 		"Filesystem revision #:    %d",
-		buf, e2p_uuid2str(sb->s_uuid), sb->s_magic, sb->s_rev_level);
+		buf, unparse_uuid(sb->s_uuid, uuid_buf), sb->s_magic, sb->s_rev_level);
 	if (sb->s_rev_level == EXT2_GOOD_OLD_REV) {
 		fprintf(f, " (original)\n");
 #ifdef EXT2_DYNAMIC_REV
@@ -244,9 +245,9 @@ void list_super2(struct ext2_super_block
 			"Inode size:		  %d\n",
 			sb->s_first_ino, sb->s_inode_size);
 	}
-	if (!e2p_is_null_uuid(sb->s_journal_uuid))
+	if (!uuid_is_null(sb->s_journal_uuid))
 		fprintf(f, "Journal UUID:             %s\n",
-			e2p_uuid2str(sb->s_journal_uuid));
+			unparse_uuid(sb->s_journal_uuid, uuid_buf));
 	if (sb->s_journal_inum)
 		fprintf(f, "Journal inode:            %u\n",
 			sb->s_journal_inum);
@@ -260,9 +261,9 @@ void list_super2(struct ext2_super_block
 	    sb->s_def_hash_version)
 		fprintf(f, "Default directory hash:   %s\n",
 			e2p_hash2string(sb->s_def_hash_version));
-	if (!e2p_is_null_uuid(sb->s_hash_seed))
+	if (!uuid_is_null(sb->s_hash_seed))
 		fprintf(f, "Directory Hash Seed:      %s\n",
-			e2p_uuid2str(sb->s_hash_seed));
+			unparse_uuid((unsigned char *)sb->s_hash_seed, uuid_buf));
 	if (sb->s_jnl_backup_type) {
 		fprintf(f, "Journal backup:           ");
 		if (sb->s_jnl_backup_type == 1)
diff -BurpN busybox-1.17.1/e2fsprogs/e2p/pe.c busybox/e2fsprogs/e2p/pe.c
--- busybox-1.17.1/e2fsprogs/e2p/pe.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/e2p/pe.c	2010-07-25 18:48:32.000000000 +0000
@@ -21,7 +21,7 @@
 
 void print_fs_errors(FILE *f, unsigned short errors)
 {
-	char *disp = NULL;
+	const char *disp = NULL;
 	switch (errors) {
 	case EXT2_ERRORS_CONTINUE: disp = "Continue"; break;
 	case EXT2_ERRORS_RO:       disp = "Remount read-only"; break;
diff -BurpN busybox-1.17.1/e2fsprogs/ext2fs/bitops.c busybox/e2fsprogs/ext2fs/bitops.c
--- busybox-1.17.1/e2fsprogs/ext2fs/bitops.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/ext2fs/bitops.c	2010-07-25 18:48:32.000000000 +0000
@@ -67,7 +67,8 @@ int ext2fs_test_bit(unsigned int nr, con
 
 #endif	/* !_EXT2_HAVE_ASM_BITOPS_ */
 
-void ext2fs_warn_bitmap(errcode_t errcode, unsigned long arg,
+void ext2fs_warn_bitmap(errcode_t errcode EXT2FS_ATTR((unused)),
+			unsigned long arg,
 			const char *description)
 {
 #ifndef OMIT_COM_ERR
@@ -79,7 +80,7 @@ void ext2fs_warn_bitmap(errcode_t errcod
 }
 
 void ext2fs_warn_bitmap2(ext2fs_generic_bitmap bitmap,
-			    int code, unsigned long arg)
+			    int code EXT2FS_ATTR((unused)), unsigned long arg)
 {
 #ifndef OMIT_COM_ERR
 	if (bitmap->description)
diff -BurpN busybox-1.17.1/e2fsprogs/ext2fs/ext2fs.h busybox/e2fsprogs/ext2fs/ext2fs.h
--- busybox-1.17.1/e2fsprogs/ext2fs/ext2fs.h	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/ext2fs/ext2fs.h	2010-07-25 18:48:32.000000000 +0000
@@ -13,7 +13,11 @@
 #define EXT2FS_EXT2FS_H 1
 
 
-#define EXT2FS_ATTR(x)
+#ifdef __GNUC__
+# define EXT2FS_ATTR(x) __attribute__(x)
+#else
+# define EXT2FS_ATTR(x)
+#endif
 
 #ifdef __cplusplus
 extern "C" {
diff -BurpN busybox-1.17.1/e2fsprogs/ext2fs/getsize.c busybox/e2fsprogs/ext2fs/getsize.c
--- busybox-1.17.1/e2fsprogs/ext2fs/getsize.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/ext2fs/getsize.c	2010-07-25 18:48:32.000000000 +0000
@@ -212,6 +212,7 @@ errcode_t ext2fs_get_device_size(const c
 	    off_t ms;
 	    u_int bs;
 	    if (ioctl(fd, DIOCGMEDIASIZE, &ms) >= 0) {
+		close(fd);
 		*retblocks = ms / blocksize;
 		return 0;
 	    }
diff -BurpN busybox-1.17.1/e2fsprogs/ext2fs/ismounted.c busybox/e2fsprogs/ext2fs/ismounted.c
--- busybox-1.17.1/e2fsprogs/ext2fs/ismounted.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/ext2fs/ismounted.c	2010-07-25 18:48:32.000000000 +0000
@@ -176,8 +176,7 @@ static errcode_t check_mntent(const char
 #ifdef __linux__
 	retval = check_mntent_file("/proc/mounts", file, mount_flags,
 				   mtpt, mtlen);
-	if (retval == 0 && (*mount_flags != 0))
-		return 0;
+	return retval;
 #endif /* __linux__ */
 #if defined(MOUNTED) || defined(_PATH_MOUNTED)
 #ifndef MOUNTED
diff -BurpN busybox-1.17.1/e2fsprogs/ext2fs/unix_io.c busybox/e2fsprogs/ext2fs/unix_io.c
--- busybox-1.17.1/e2fsprogs/ext2fs/unix_io.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/ext2fs/unix_io.c	2010-07-25 18:48:32.000000000 +0000
@@ -419,7 +419,7 @@ static errcode_t unix_open(const char *n
 
 #ifdef __linux__
 #undef RLIM_INFINITY
-#if (defined(__alpha__) || ((defined(__sparc__) || defined(__mips__)) && (SIZEOF_LONG == 4)))
+#if (defined(__alpha__) || (defined(__sparc__) && (__WORDSIZE == 32)) || (defined(__mips__) && (_MIPS_SZLONG == 32)))
 #define RLIM_INFINITY	((unsigned long)(~0UL>>1))
 #else
 #define RLIM_INFINITY  (~0UL)
diff -BurpN busybox-1.17.1/e2fsprogs/mke2fs.c busybox/e2fsprogs/mke2fs.c
--- busybox-1.17.1/e2fsprogs/mke2fs.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/mke2fs.c	2010-07-25 18:48:32.000000000 +0000
@@ -29,7 +29,7 @@
 
 #include "e2fsbb.h"
 #include "ext2fs/ext2_fs.h"
-#include "uuid/uuid.h"
+#include "e2fs_lib.h"
 #include "e2p/e2p.h"
 #include "ext2fs/ext2fs.h"
 #include "util.h"
@@ -201,8 +201,8 @@ static void mke2fs_verbose_done(void)
 	mke2fs_verbose("done\n");
 }
 
-static void mke2fs_warning_msg(int retval, char *fmt, ... ) __attribute__ ((format (printf, 2, 3)));
-static void mke2fs_warning_msg(int retval, char *fmt, ... )
+static void mke2fs_warning_msg(int retval, const char *fmt, ... ) __attribute__ ((format (printf, 2, 3)));
+static void mke2fs_warning_msg(int retval, const char *fmt, ... )
 {
 	va_list ap;
 
@@ -485,7 +485,7 @@ static void create_lost_and_found(ext2_f
 	ext2_ino_t		ino;
 	const char		*name = "lost+found";
 	int			i = 1;
-	char			*msg = "create";
+	const char		*msg = "create";
 	int			lpf_size = 0;
 
 	fs->umask = 077;
@@ -542,7 +542,7 @@ static void reserve_inodes(ext2_filsys f
 static void zap_sector(ext2_filsys fs, int sect, int nsect)
 {
 	char *buf;
-	char *fmt = "could not %s %d";
+	const char *fmt = "could not %s %d";
 	int retval;
 	unsigned int *magic;
 
@@ -574,7 +574,7 @@ static void create_journal_dev(ext2_fils
 	struct progress_struct	progress;
 	errcode_t		retval;
 	char			*buf;
-	char			*fmt = "%s journal superblock";
+	const char		*fmt = "%s journal superblock";
 	blk_t			blk;
 	int			count;
 
@@ -1174,8 +1174,8 @@ static void mke2fs_clean_up(void)
 	if (ENABLE_FEATURE_CLEAN_UP && journal_device) free(journal_device);
 }
 
-int mke2fs_main (int argc, char **argv);
-int mke2fs_main (int argc, char **argv)
+int mkfs_ext2_main (int argc, char **argv);
+int mkfs_ext2_main (int argc, char **argv)
 {
 	errcode_t	retval;
 	ext2_filsys	fs;
@@ -1212,13 +1212,13 @@ int mke2fs_main (int argc, char **argv)
 	/*
 	 * Generate a UUID for it...
 	 */
-	uuid_generate(fs->super->s_uuid);
+	generate_uuid(fs->super->s_uuid);
 
 	/*
 	 * Initialize the directory index variables
 	 */
 	fs->super->s_def_hash_version = EXT2_HASH_TEA;
-	uuid_generate((unsigned char *) fs->super->s_hash_seed);
+	generate_uuid((uint8_t *) fs->super->s_hash_seed);
 
 	/*
 	 * Add "jitter" to the superblock's check interval so that we
diff -BurpN busybox-1.17.1/e2fsprogs/tune2fs.c busybox/e2fsprogs/tune2fs.c
--- busybox-1.17.1/e2fsprogs/tune2fs.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/tune2fs.c	2010-07-25 18:48:32.000000000 +0000
@@ -35,11 +35,11 @@
 #include "e2fsbb.h"
 #include "ext2fs/ext2_fs.h"
 #include "ext2fs/ext2fs.h"
-#include "uuid/uuid.h"
+#include "e2fs_lib.h"
 #include "e2p/e2p.h"
 #include "ext2fs/kernel-jbd.h"
 #include "util.h"
-#include "blkid/blkid.h"
+#include "volume_id.h"
 
 #include "libbb.h"
 
@@ -87,8 +87,8 @@ static void remove_journal_device(ext2_f
 	if (f_flag)
 		commit_remove_journal = 1; /* force removal even if error */
 
-	uuid_unparse(fs->super->s_journal_uuid, buf);
-	journal_path = blkid_get_devname(NULL, "UUID", buf);
+	unparse_uuid(fs->super->s_journal_uuid, buf);
+	journal_path = get_devname_from_uuid(buf);
 
 	if (!journal_path) {
 		journal_path =
@@ -182,8 +182,8 @@ static void remove_journal_inode(ext2_fi
 	struct ext2_inode	inode;
 	errcode_t		retval;
 	ino_t			ino = fs->super->s_journal_inum;
-	char *msg = "to read";
-	char *s = "journal inode";
+	const char *msg = "to read";
+	const char *s = "journal inode";
 
 	retval = ext2fs_read_inode(fs, ino,  &inode);
 	if (retval)
@@ -298,7 +298,7 @@ static void update_feature_set(ext2_fils
 		if (!sb->s_def_hash_version)
 			sb->s_def_hash_version = EXT2_HASH_TEA;
 		if (uuid_is_null((unsigned char *) sb->s_hash_seed))
-			uuid_generate((unsigned char *) sb->s_hash_seed);
+			generate_uuid((unsigned char *) sb->s_hash_seed);
 	}
 
 	if (sb->s_rev_level == EXT2_GOOD_OLD_REV &&
@@ -344,9 +344,9 @@ static void add_journal(ext2_filsys fs)
  */
 static char * x_blkid_get_devname(const char *token)
 {
-	char * dev_name;
+	char *dev_name = (char *)token;
 
-	if (!(dev_name = blkid_get_devname(NULL, token, NULL)))
+	if (resolve_mount_spec(&dev_name) != 1 || !dev_name)
 		bb_error_msg_and_die("Unable to resolve '%s'", token);
 	return dev_name;
 }
@@ -694,11 +694,13 @@ int tune2fs_main(int argc, char **argv)
 		if ((strcasecmp(new_UUID, "null") == 0) ||
 		    (strcasecmp(new_UUID, "clear") == 0)) {
 			uuid_clear(sb->s_uuid);
+/*
 		} else if (strcasecmp(new_UUID, "time") == 0) {
 			uuid_generate_time(sb->s_uuid);
+*/
 		} else if (strcasecmp(new_UUID, "random") == 0) {
-			uuid_generate(sb->s_uuid);
-		} else if (uuid_parse(new_UUID, sb->s_uuid)) {
+			generate_uuid(sb->s_uuid);
+		} else if (parse_uuid(new_UUID, sb->s_uuid)) {
 			bb_error_msg_and_die("Invalid UUID format");
 		}
 		ext2fs_mark_super_dirty(fs);
diff -BurpN busybox-1.17.1/e2fsprogs/util.c busybox/e2fsprogs/util.c
--- busybox-1.17.1/e2fsprogs/util.c	2010-07-06 02:25:53.000000000 +0000
+++ busybox/e2fsprogs/util.c	2010-07-25 18:48:32.000000000 +0000
@@ -17,7 +17,7 @@
 #include "e2p/e2p.h"
 #include "ext2fs/ext2_fs.h"
 #include "ext2fs/ext2fs.h"
-#include "blkid/blkid.h"
+#include "volume_id.h"
 #include "util.h"
 
 void proceed_question(void)
@@ -72,7 +72,7 @@ void check_plausibility(const char *devi
 #endif
 }
 
-void check_mount(const char *device, int force, const char *type)
+void check_mount(const char *device, int force, const char *type UNUSED_PARAM)
 {
 	errcode_t retval;
 	int mount_flags;
@@ -117,8 +117,9 @@ void parse_journal_opts(char **journal_d
 			arg++;
 		}
 		if (strcmp(token, "device") == 0) {
-			*journal_device = blkid_get_devname(NULL, arg, NULL);
-			if (!journal_device) {
+			*journal_device = arg;
+			if (resolve_mount_spec(journal_device) < 0 ||
+			    !(*journal_device)) {
 				journal_usage++;
 				continue;
 			}
@@ -258,7 +259,7 @@ char *e2fs_set_sbin_path(void)
 	if (oldpath)
 		oldpath = xasprintf("%s:%s", PATH_SET, oldpath);
 	 else
-		oldpath = PATH_SET;
+		oldpath = (char *)PATH_SET;
 	putenv(oldpath);
 	return oldpath;
 }
diff -BurpN busybox-1.17.1/include/applets.src.h busybox/include/applets.src.h
--- busybox-1.17.1/include/applets.src.h	2010-07-25 18:32:16.000000000 +0000
+++ busybox/include/applets.src.h	2010-07-25 18:48:26.000000000 +0000
@@ -133,8 +133,8 @@ IF_DPKG_DEB(APPLET_ODDNAME(dpkg-deb, dpk
 IF_DU(APPLET(du, _BB_DIR_USR_BIN, _BB_SUID_DROP))
 IF_DUMPKMAP(APPLET(dumpkmap, _BB_DIR_BIN, _BB_SUID_DROP))
 IF_DUMPLEASES(APPLET(dumpleases, _BB_DIR_USR_BIN, _BB_SUID_DROP))
-//IF_E2FSCK(APPLET(e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP))
-//IF_E2LABEL(APPLET_ODDNAME(e2label, tune2fs, _BB_DIR_SBIN, _BB_SUID_DROP, e2label))
+IF_E2FSCK(APPLET(e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP))
+IF_E2LABEL(APPLET_ODDNAME(e2label, tune2fs, _BB_DIR_SBIN, _BB_SUID_DROP, e2label))
 IF_ECHO(APPLET_NOFORK(echo, echo, _BB_DIR_BIN, _BB_SUID_DROP, echo))
 IF_ED(APPLET(ed, _BB_DIR_BIN, _BB_SUID_DROP))
 IF_EJECT(APPLET(eject, _BB_DIR_USR_BIN, _BB_SUID_DROP))
@@ -162,8 +162,8 @@ IF_FOLD(APPLET(fold, _BB_DIR_USR_BIN, _B
 IF_FREE(APPLET(free, _BB_DIR_USR_BIN, _BB_SUID_DROP))
 IF_FREERAMDISK(APPLET(freeramdisk, _BB_DIR_SBIN, _BB_SUID_DROP))
 IF_FSCK(APPLET(fsck, _BB_DIR_SBIN, _BB_SUID_DROP))
-//IF_E2FSCK(APPLET_ODDNAME(fsck.ext2, e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_ext2))
-//IF_E2FSCK(APPLET_ODDNAME(fsck.ext3, e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_ext3))
+IF_E2FSCK(APPLET_ODDNAME(fsck.ext2, e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_ext2))
+IF_E2FSCK(APPLET_ODDNAME(fsck.ext3, e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_ext3))
 IF_FSCK_MINIX(APPLET_ODDNAME(fsck.minix, fsck_minix, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_minix))
 IF_FSYNC(APPLET_NOFORK(fsync, fsync, _BB_DIR_BIN, _BB_SUID_DROP, fsync))
 IF_FTPD(APPLET(ftpd, _BB_DIR_USR_SBIN, _BB_SUID_DROP))
@@ -257,10 +257,10 @@ IF_MESG(APPLET(mesg, _BB_DIR_USR_BIN, _B
 IF_MICROCOM(APPLET(microcom, _BB_DIR_USR_BIN, _BB_SUID_DROP))
 IF_MKDIR(APPLET_NOFORK(mkdir, mkdir, _BB_DIR_BIN, _BB_SUID_DROP, mkdir))
 IF_MKFS_VFAT(APPLET_ODDNAME(mkdosfs, mkfs_vfat, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_vfat))
-IF_MKFS_EXT2(APPLET_ODDNAME(mke2fs, mkfs_ext2, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_ext2))
+IF_MKE2FS(APPLET_ODDNAME(mke2fs, mkfs_ext2, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_ext2))
 IF_MKFIFO(APPLET_NOEXEC(mkfifo, mkfifo, _BB_DIR_USR_BIN, _BB_SUID_DROP, mkfifo))
-IF_MKFS_EXT2(APPLET_ODDNAME(mkfs.ext2, mkfs_ext2, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_ext2))
-//IF_MKE2FS(APPLET_ODDNAME(mkfs.ext3, mke2fs, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_ext3))
+IF_MKE2FS(APPLET_ODDNAME(mkfs.ext2, mkfs_ext2, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_ext2))
+IF_MKE2FS(APPLET_ODDNAME(mkfs.ext3, mkfs_ext2, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_ext3))
 IF_MKFS_MINIX(APPLET_ODDNAME(mkfs.minix, mkfs_minix, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_minix))
 IF_MKFS_REISER(APPLET_ODDNAME(mkfs.reiser, mkfs_reiser, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_reiser))
 IF_MKFS_VFAT(APPLET_ODDNAME(mkfs.vfat, mkfs_vfat, _BB_DIR_SBIN, _BB_SUID_DROP, mkfs_vfat))
diff -BurpN busybox-1.17.1/include/libbb.h busybox/include/libbb.h
--- busybox-1.17.1/include/libbb.h	2010-07-25 18:29:36.000000000 +0000
+++ busybox/include/libbb.h	2010-07-25 18:48:26.000000000 +0000
@@ -757,6 +757,10 @@ char* hex2bin(char *dst, const char *str
 
 /* Generate a UUID */
 void generate_uuid(uint8_t *buf) FAST_FUNC;
+/* expand UUID to human readable format */
+char *unparse_uuid(const uint8_t *uu, char *out) FAST_FUNC;
+/* parse UUID */
+int parse_uuid(const char *in, uint8_t *uuid) FAST_FUNC;
 
 /* Last element is marked by mult == 0 */
 struct suffix_mult {
diff -BurpN busybox-1.17.1/include/usage.src.h busybox/include/usage.src.h
--- busybox-1.17.1/include/usage.src.h	2010-07-24 22:12:43.000000000 +0000
+++ busybox/include/usage.src.h	2010-07-25 18:48:26.000000000 +0000
@@ -1075,7 +1075,6 @@ INSERT
      "\n	-a	Show expiration time" \
 	)
 
-/*
 #define e2fsck_trivial_usage \
        "[-panyrcdfvstDFSV] [-b superblock] [-B blocksize] " \
        "[-I inode_buffer_blocks] [-P process_inode_size] " \
@@ -1095,7 +1094,10 @@ INSERT
      "\n	-j journal	Set location of the external journal" \
      "\n	-l file		Add to badblocks list" \
      "\n	-L file		Set badblocks list" \
-*/
+
+
+#define e2label_trivial_usage NOUSAGE_STR
+#define e2label_full_usage ""
 
 #define echo_trivial_usage \
 	IF_FEATURE_FANCY_ECHO("[-neE] ") "[ARG]..."
@@ -1372,6 +1374,12 @@ INSERT
      "\n	-C n	Write status information to specified filedescriptor" \
      "\n	-t TYPE	List of filesystem types to check" \
 
+#define fsck_ext2_trivial_usage NOUSAGE_STR
+#define fsck_ext2_full_usage ""
+
+#define fsck_ext3_trivial_usage NOUSAGE_STR
+#define fsck_ext3_full_usage ""
+
 #define fsck_minix_trivial_usage \
        "[-larvsmf] BLOCKDEV"
 #define fsck_minix_full_usage "\n\n" \
@@ -2723,41 +2731,44 @@ INSERT
 
 #define mkfs_ext2_trivial_usage \
        "[-Fn] " \
-       /* "[-c|-l filename] " */ \
+       "[-c|-l filename] " \
        "[-b BLK_SIZE] " \
-       /* "[-f fragment-size] [-g blocks-per-group] " */ \
+       "[-f fragment-size] [-g blocks-per-group] " \
        "[-i INODE_RATIO] [-I INODE_SIZE] " \
-       /* "[-j] [-J journal-options] [-N number-of-inodes] " */ \
+       "[-j] [-J journal-options] [-N number-of-inodes] " \
        "[-m RESERVED_PERCENT] " \
-       /* "[-o creator-os] [-O feature[,...]] [-q] " */ \
-       /* "[r fs-revision-level] [-E extended-options] [-v] [-F] " */ \
+       "[-o creator-os] [-O feature[,...]] [-q] " \
+       "[r fs-revision-level] [-E extended-options] [-v] [-F] " \
        "[-L LABEL] " \
-       /* "[-M last-mounted-directory] [-S] [-T filesystem-type] " */ \
+       "[-M last-mounted-directory] [-S] [-T filesystem-type] " \
        "BLOCKDEV [KBYTES]"
 #define mkfs_ext2_full_usage "\n\n" \
        "	-b BLK_SIZE	Block size, bytes" \
-/*   "\n	-c		Check device for bad blocks" */ \
-/*   "\n	-E opts		Set extended options" */ \
-/*   "\n	-f size		Fragment size in bytes" */ \
+     "\n	-c		Check device for bad blocks" \
+     "\n	-E opts		Set extended options" \
+     "\n	-f size		Fragment size in bytes" \
      "\n	-F		Force" \
-/*   "\n	-g N		Number of blocks in a block group" */ \
+     "\n	-g N		Number of blocks in a block group" \
      "\n	-i RATIO	Max number of files is filesystem_size / RATIO" \
      "\n	-I BYTES	Inode size (min 128)" \
-/*   "\n	-j		Create a journal (ext3)" */ \
-/*   "\n	-J opts		Set journal options (size/device)" */ \
-/*   "\n	-l file		Read bad blocks list from file" */ \
+     "\n	-j		Create a journal (ext3)" \
+     "\n	-J opts		Set journal options (size/device)" \
+     "\n	-l file		Read bad blocks list from file" \
      "\n	-L LBL		Volume label" \
      "\n	-m PERCENT	Percent of blocks to reserve for admin" \
-/*   "\n	-M dir		Set last mounted directory" */ \
+     "\n	-M dir		Set last mounted directory" \
      "\n	-n		Dry run" \
-/*   "\n	-N N		Number of inodes to create" */ \
-/*   "\n	-o os		Set the 'creator os' field" */ \
-/*   "\n	-O features	Dir_index/filetype/has_journal/journal_dev/sparse_super" */ \
-/*   "\n	-q		Quiet" */ \
-/*   "\n	-r rev		Set filesystem revision" */ \
-/*   "\n	-S		Write superblock and group descriptors only" */ \
-/*   "\n	-T fs-type	Set usage type (news/largefile/largefile4)" */ \
-/*   "\n	-v		Verbose" */ \
+     "\n	-N N		Number of inodes to create" \
+     "\n	-o os		Set the 'creator os' field" \
+     "\n	-O features	Dir_index/filetype/has_journal/journal_dev/sparse_super" \
+     "\n	-q		Quiet" \
+     "\n	-r rev		Set filesystem revision" \
+     "\n	-S		Write superblock and group descriptors only" \
+     "\n	-T fs-type	Set usage type (news/largefile/largefile4)" \
+     "\n	-v		Verbose" \
+
+#define mkfs_ext3_trivial_usage NOUSAGE_STR
+#define mkfs_ext3_full_usage ""
 
 #define mkfs_minix_trivial_usage \
        "[-c | -l FILE] [-nXX] [-iXX] BLOCKDEV [KBYTES]"
diff -BurpN busybox-1.17.1/include/volume_id.h busybox/include/volume_id.h
--- busybox-1.17.1/include/volume_id.h	2010-04-29 08:39:27.000000000 +0000
+++ busybox/include/volume_id.h	2010-07-25 18:48:26.000000000 +0000
@@ -20,6 +20,7 @@
 
 char *get_devname_from_label(const char *spec);
 char *get_devname_from_uuid(const char *spec);
+char *get_devname_from_device(dev_t dev);
 void display_uuid_cache(void);
 
 /* Returns:
diff -BurpN busybox-1.17.1/libbb/xfuncs.c busybox/libbb/xfuncs.c
--- busybox-1.17.1/libbb/xfuncs.c	2010-07-06 02:25:54.000000000 +0000
+++ busybox/libbb/xfuncs.c	2010-07-25 18:48:26.000000000 +0000
@@ -302,3 +302,49 @@ int FAST_FUNC wait4pid(pid_t pid)
 		return WTERMSIG(status) + 0x180;
 	return 0;
 }
+
+char * FAST_FUNC unparse_uuid(const uint8_t *uu, char *out)
+{
+        char uuid_string[32];
+
+        bin2hex(uuid_string, (char*)uu, 16);
+	/* f.e. UUID=dfd9c173-be52-4d27-99a5-c34c6c2ff55f */
+        sprintf(out, "%.8s-%.4s-%.4s-%.4s-%.12s",
+                uuid_string,
+                uuid_string+8,
+                uuid_string+8+4,
+                uuid_string+8+4+4,
+                uuid_string+8+4+4+4
+        );
+        return out;
+}
+
+static unsigned char fromhex(char c)
+{
+        if (isdigit(c))
+                return (c - '0');
+        return ((c|0x20) - 'a' + 10);
+}
+
+/* Parse & verify UUID string */
+int FAST_FUNC parse_uuid(const char *s, uint8_t *uuid)
+{
+	int i;
+
+	if (strlen(s) != 36 || s[8] != '-' || s[13] != '-'
+	 || s[18] != '-' || s[23] != '-'
+	) {
+		return -1;
+	}
+	for (i = 0; i < 16; i++) {
+		if (*s == '-')
+			s++;
+		if (!isxdigit(s[0]) || !isxdigit(s[1]))
+			return -2;
+		uuid[i] = ((fromhex(s[0]) << 4) | fromhex(s[1]));
+		s += 2;
+	}
+
+	return 0;
+}
+
diff -BurpN busybox-1.17.1/util-linux/mkswap.c busybox/util-linux/mkswap.c
--- busybox-1.17.1/util-linux/mkswap.c	2010-07-06 02:25:54.000000000 +0000
+++ busybox/util-linux/mkswap.c	2010-07-25 18:48:26.000000000 +0000
@@ -59,7 +59,7 @@ struct swap_header_v1 {
 	uint32_t version;        /* second kbyte, word 0 */
 	uint32_t last_page;      /* 1 */
 	uint32_t nr_badpages;    /* 2 */
-	char     sws_uuid[16];   /* 3,4,5,6 */
+	uint8_t  sws_uuid[16];   /* 3,4,5,6 */
 	char     sws_volume[16]; /* 7,8,9,10 */
 	uint32_t padding[117];   /* 11..127 */
 	uint32_t badpages[1];    /* 128 */
@@ -107,17 +107,9 @@ int mkswap_main(int argc UNUSED_PARAM, c
 	hdr->last_page = (uoff_t)len / pagesize;
 
 	if (ENABLE_FEATURE_MKSWAP_UUID) {
-		char uuid_string[32];
+		char uuid_string[37];
 		generate_uuid((void*)hdr->sws_uuid);
-		bin2hex(uuid_string, hdr->sws_uuid, 16);
-		/* f.e. UUID=dfd9c173-be52-4d27-99a5-c34c6c2ff55f */
-		printf("UUID=%.8s"  "-%.4s-%.4s-%.4s-%.12s\n",
-			uuid_string,
-			uuid_string+8,
-			uuid_string+8+4,
-			uuid_string+8+4+4,
-			uuid_string+8+4+4+4
-		);
+		printf("UUID=%s\n", unparse_uuid(hdr->sws_uuid, uuid_string));
 	}
 	safe_strncpy(hdr->sws_volume, label, 16);
 
diff -BurpN busybox-1.17.1/util-linux/volume_id/get_devname.c busybox/util-linux/volume_id/get_devname.c
--- busybox-1.17.1/util-linux/volume_id/get_devname.c	2010-05-11 09:54:36.000000000 +0000
+++ busybox/util-linux/volume_id/get_devname.c	2010-07-25 18:48:26.000000000 +0000
@@ -15,7 +15,7 @@
 
 static struct uuidCache_s {
 	struct uuidCache_s *next;
-//	int major, minor;
+	dev_t devno;
 	char *device;
 	char *label;
 	char *uc_uuid; /* prefix makes it easier to grep for */
@@ -54,7 +54,7 @@ get_label_uuid(int fd, char **label, cha
 
 /* NB: we take ownership of (malloc'ed) label and uuid */
 static void
-uuidcache_addentry(char *device, /*int major, int minor,*/ char *label, char *uuid)
+uuidcache_addentry(char *device, dev_t devno, char *label, char *uuid)
 {
 	struct uuidCache_s *last;
 
@@ -67,8 +67,7 @@ uuidcache_addentry(char *device, /*int m
 		last = last->next;
 	}
 	/*last->next = NULL; - xzalloc did it*/
-//	last->major = major;
-//	last->minor = minor;
+	last->devno = devno;
 	last->device = device;
 	last->label = label;
 	last->uc_uuid = uuid;
@@ -106,7 +105,7 @@ uuidcache_check_device(const char *devic
 	/* get_label_uuid() closes fd in all cases (success & failure) */
 	if (get_label_uuid(fd, &label, &uuid) == 0) {
 		/* uuidcache_addentry() takes ownership of all three params */
-		uuidcache_addentry(xstrdup(device), /*ma, mi,*/ label, uuid);
+		uuidcache_addentry(xstrdup(device), statbuf->st_rdev, label, uuid);
 	}
 	return TRUE;
 }
@@ -137,10 +136,10 @@ uuidcache_init(void)
 
 #define UUID   1
 #define VOL    2
+#define DEVNO  3
 
-#ifdef UNUSED
 static char *
-get_spec_by_x(int n, const char *t, int *majorPtr, int *minorPtr)
+get_spec_by_x(int n, const char *t, dev_t *devnoPtr)
 {
 	struct uuidCache_s *uc;
 
@@ -150,66 +149,29 @@ get_spec_by_x(int n, const char *t, int 
 	while (uc) {
 		switch (n) {
 		case UUID:
-			if (strcmp(t, uc->uc_uuid) == 0) {
-				*majorPtr = uc->major;
-				*minorPtr = uc->minor;
-				return uc->device;
-			}
+			/* case of hex numbers doesn't matter */
+			if (strcasecmp(t, uc->uc_uuid) == 0)
+				goto found;
 			break;
 		case VOL:
-			if (strcmp(t, uc->label) == 0) {
-				*majorPtr = uc->major;
-				*minorPtr = uc->minor;
-				return uc->device;
-			}
+			if (uc->label[0] && strcmp(t, uc->label) == 0)
+				goto found;
+			break;
+		case DEVNO:
+			if (uc->devno == (*devnoPtr))
+				goto found;
 			break;
 		}
 		uc = uc->next;
 	}
 	return NULL;
-}
 
-static unsigned char
-fromhex(char c)
-{
-	if (isdigit(c))
-		return (c - '0');
-	return ((c|0x20) - 'a' + 10);
+found:
+	if (devnoPtr)
+		*devnoPtr = uc->devno;
+	return xstrdup(uc->device);
 }
 
-static char *
-get_spec_by_uuid(const char *s, int *major, int *minor)
-{
-	unsigned char uuid[16];
-	int i;
-
-	if (strlen(s) != 36 || s[8] != '-' || s[13] != '-'
-	 || s[18] != '-' || s[23] != '-'
-	) {
-		goto bad_uuid;
-	}
-	for (i = 0; i < 16; i++) {
-		if (*s == '-')
-			s++;
-		if (!isxdigit(s[0]) || !isxdigit(s[1]))
-			goto bad_uuid;
-		uuid[i] = ((fromhex(s[0]) << 4) | fromhex(s[1]));
-		s += 2;
-	}
-	return get_spec_by_x(UUID, (char *)uuid, major, minor);
-
- bad_uuid:
-	fprintf(stderr, _("mount: bad UUID"));
-	return 0;
-}
-
-static char *
-get_spec_by_volume_label(const char *s, int *major, int *minor)
-{
-	return get_spec_by_x(VOL, s, major, minor);
-}
-#endif // UNUSED
-
 /* Used by blkid */
 void display_uuid_cache(void)
 {
@@ -228,37 +190,21 @@ void display_uuid_cache(void)
 	}
 }
 
-/* Used by mount and findfs */
+/* Used by mount and findfs & old_e2fsprogs */
 
 char *get_devname_from_label(const char *spec)
 {
-	struct uuidCache_s *uc;
-
-	uuidcache_init();
-	uc = uuidCache;
-	while (uc) {
-		if (uc->label[0] && strcmp(spec, uc->label) == 0) {
-			return xstrdup(uc->device);
-		}
-		uc = uc->next;
-	}
-	return NULL;
+	return get_spec_by_x(VOL, spec, NULL);
 }
 
 char *get_devname_from_uuid(const char *spec)
 {
-	struct uuidCache_s *uc;
+	return get_spec_by_x(UUID, spec, NULL);
+}
 
-	uuidcache_init();
-	uc = uuidCache;
-	while (uc) {
-		/* case of hex numbers doesn't matter */
-		if (strcasecmp(spec, uc->uc_uuid) == 0) {
-			return xstrdup(uc->device);
-		}
-		uc = uc->next;
-	}
-	return NULL;
+char *get_devname_from_device(dev_t dev)
+{
+	return get_spec_by_x(DEVNO, NULL, &dev);
 }
 
 int resolve_mount_spec(char **fsname)
