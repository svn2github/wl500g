From: Denys Vlasenko
Date: Mon, 10 Jan 2011 15:10:29 +0000

 0f44c08560a5287fb927c15a3cce54302a0b80e5 libbb: progress indicator: use unicode support funcs instead of open-coding it
 84dba9c5bbd99cb80c0e201bbffa27a51766c63f tftp: fix bad interaction betweel poll() and alarm(). Closes bug 3061
 
---
diff --git a/libbb/progress.c b/libbb/progress.c
index 74e80a3..3c7355f 100644
--- a/libbb/progress.c
+++ b/libbb/progress.c
@@ -93,22 +93,9 @@ void FAST_FUNC bb_progress_update(bb_progress_t *p,
 
 #if ENABLE_UNICODE_SUPPORT
 	init_unicode();
-	/* libbb candidate? */
 	{
-		wchar_t wbuf21[21];
-		char *buf = xstrdup(curfile);
-		unsigned len;
-
-		/* trim to 20 wide chars max (sets wbuf21[20] to 0)
-		 * also, in case mbstowcs fails, we at least
-		 * dont get garbage */
-		memset(wbuf21, 0, sizeof(wbuf21));
-		/* convert to wide chars, no more than 20 */
-		len = mbstowcs(wbuf21, curfile, 20); /* NB: may return -1 */
-		/* back to multibyte; cant overflow */
-		wcstombs(buf, wbuf21, INT_MAX);
-		len = (len > 20) ? 0 : 20 - len;
-		fprintf(stderr, "\r%s%*s%4d%% ", buf, len, "", ratio);
+		char *buf = unicode_conv_to_printable_fixedwidth(NULL, curfile, 20);
+		fprintf(stderr, "\r%s%4u%% ", buf, ratio);
 		free(buf);
 	}
 #else
@@ -158,10 +145,11 @@ void FAST_FUNC bb_progress_update(bb_progress_t *p,
 			fprintf(stderr, "--:--:-- ETA");
 		} else {
 			/* to_download / (transferred/elapsed) - elapsed: */
-			int eta = (int) ((unsigned long long)to_download*elapsed/transferred - elapsed);
 			/* (long long helps to have working ETA even if !LFS) */
-			i = eta % 3600;
-			fprintf(stderr, "%02d:%02d:%02d ETA", eta / 3600, i / 60, i % 60);
+			unsigned eta = (unsigned long long)to_download*elapsed/(uoff_t)transferred - elapsed;
+ 			unsigned secs = eta % 3600;
+			unsigned hours = eta / 3600;
+			fprintf(stderr, "%02u:%02u:%02u ETA", hours, secs / 60, secs % 60);
 		}
 	}
 }
diff --git a/networking/tftp.c b/networking/tftp.c
index 04c8f0e..fcd933f 100644
--- a/networking/tftp.c
+++ b/networking/tftp.c
@@ -105,39 +105,22 @@ struct BUG_G_too_big {
 #define error_pkt_str    (error_pkt + 4)
 
 #if ENABLE_FEATURE_TFTP_PROGRESS_BAR
-/* SIGALRM logic nicked from the wget applet */
-static void progress_meter(int flag)
+static void tftp_progress_update(void)
 {
-	/* We can be called from signal handler */
-	int save_errno = errno;
-
-	if (flag == -1) { /* first call to progress_meter */
-		bb_progress_init(&G.pmt);
-	}
-
 	bb_progress_update(&G.pmt, G.file, 0, G.pos, G.size);
-
-	if (flag == 0) {
-		/* last call to progress_meter */
-		alarm(0);
-		bb_putchar_stderr('\n');
-	} else {
-		if (flag == -1) { /* first call to progress_meter */
-			signal_SA_RESTART_empty_mask(SIGALRM, progress_meter);
-		}
-		alarm(1);
-	}
-
-	errno = save_errno;
 }
 static void tftp_progress_init(void)
 {
-	progress_meter(-1);
+	bb_progress_init(&G.pmt);
+	tftp_progress_update();
 }
 static void tftp_progress_done(void)
 {
-	if (G.pmt.inited)
-		progress_meter(0);
+	if (G.pmt.inited) {
+		tftp_progress_update();
+		bb_putchar_stderr('\n');
+		G.pmt.inited = 0;
+	}
 }
 #else
 # define tftp_progress_init() ((void)0)
@@ -460,9 +443,10 @@ static int tftp_protocol(
 		xsendto(socket_fd, xbuf, send_len, &peer_lsa->u.sa, peer_lsa->len);
 
 #if ENABLE_FEATURE_TFTP_PROGRESS_BAR
-		if (ENABLE_TFTP && remote_file) { /* tftp */
+		if (ENABLE_TFTP && remote_file) /* tftp */
 			G.pos = (block_nr - 1) * (uoff_t)blksize;
-		}
+		if (G.pmt.inited)
+			tftp_progress_update();
 #endif
 		/* Was it final ACK? then exit */
 		if (finished && (opcode == TFTP_ACK))
@@ -479,6 +463,7 @@ static int tftp_protocol(
 		case 0:
 			retries--;
 			if (retries == 0) {
+				tftp_progress_done();
 				bb_error_msg("timeout");
 				goto ret; /* no err packet sent */
 			}
--
cgit v0.8.2.1
