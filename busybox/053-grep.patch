 3ba2df874ca27f075a0897210d8dce6c56646e60 grep: properly handle grep -w "^str" in !EXTRA_COMPAT case too
 83e49ade5724f5b3744660e45179461fe2a1b0f8 grep: fix -w match if first match isn't a word, but second is. Closes 4520
 34cc6c91a286411a8275d9d61aa80397fe1e5fa3 grep: fix "grep -r PATTRN SYMLINK_TO_DIR"

diff --git a/findutils/grep.c b/findutils/grep.c
--- a/findutils/grep.c
+++ b/findutils/grep.c
@@ -375,6 +375,8 @@ static int grep_file(FILE *file)
 			} else {
 #if ENABLE_EXTRA_COMPAT
 				unsigned start_pos;
+#else
+				int match_flg;
 #endif
 				char *match_at;
 
@@ -392,6 +394,7 @@ static int grep_file(FILE *file)
 #if !ENABLE_EXTRA_COMPAT
 				gl->matched_range.rm_so = 0;
 				gl->matched_range.rm_eo = 0;
+				match_flg = 0;
 #else
 				start_pos = 0;
 #endif
@@ -400,7 +403,7 @@ static int grep_file(FILE *file)
 //bb_error_msg("'%s' start_pos:%d line_len:%d", match_at, start_pos, line_len);
 				if (
 #if !ENABLE_EXTRA_COMPAT
-					regexec(&gl->compiled_regex, match_at, 1, &gl->matched_range, 0) == 0
+					regexec(&gl->compiled_regex, match_at, 1, &gl->matched_range, match_flg) == 0
 #else
 					re_search(&gl->compiled_regex, match_at, line_len,
 							start_pos, /*range:*/ line_len,
@@ -415,13 +418,15 @@ static int grep_file(FILE *file)
 						found = 1;
 					} else {
 						char c = ' ';
-						if (gl->matched_range.rm_so)
+						if (match_at > line || gl->matched_range.rm_so != 0) {
 							c = match_at[gl->matched_range.rm_so - 1];
+						}
 						if (!isalnum(c) && c != '_') {
 							c = match_at[gl->matched_range.rm_eo];
-							if (!c || (!isalnum(c) && c != '_')) {
-								found = 1;
-							} else {
+						}
+						if (!isalnum(c) && c != '_') {
+							found = 1;
+						} else {
 			/*
 			 * Why check gl->matched_range.rm_eo?
 			 * Zero-length match makes -w skip the line:
@@ -430,17 +435,17 @@ static int grep_file(FILE *file)
 			 * Without such check, we can loop forever.
 			 */
 #if !ENABLE_EXTRA_COMPAT
-								if (gl->matched_range.rm_eo != 0) {
-									match_at += gl->matched_range.rm_eo;
-									goto opt_w_again;
-								}
+							if (gl->matched_range.rm_eo != 0) {
+								match_at += gl->matched_range.rm_eo;
+								match_flg |= REG_NOTBOL;
+								goto opt_w_again;
+							}
 #else
-								if (gl->matched_range.rm_eo > start_pos) {
-									start_pos = gl->matched_range.rm_eo;
-									goto opt_w_again;
-								}
-#endif
+							if (gl->matched_range.rm_eo > start_pos) {
+								start_pos = gl->matched_range.rm_eo;
+								goto opt_w_again;
 							}
+#endif
 						}
 					}
 				}
@@ -668,7 +668,7 @@ static int grep_dir(const char *dir)
 	int matched = 0;
 	recursive_action(dir,
 		/* recurse=yes */ ACTION_RECURSE |
-		/* followLinks=no */
+		/* followLinks=command line only */ ACTION_FOLLOWLINKS_L0 |
 		/* depthFirst=yes */ ACTION_DEPTHFIRST,
 		/* fileAction= */ file_action_grep,
 		/* dirAction= */ NULL,
diff --git a/testsuite/grep.tests b/testsuite/grep.tests
--- a/testsuite/grep.tests
+++ b/testsuite/grep.tests
@@ -159,6 +159,38 @@ testing "grep -w ^ doesn't hang" \
 	"anything\n" \
 	""
 
+testing "grep -w word doesn't match wordword" \
+	"grep -w word input" \
+	"" \
+	"wordword\n" \
+	""
+
+testing "grep -w word match second word" \
+	"grep -w word input" \
+	"bword,word\n""wordb,word\n""bwordb,word\n" \
+	"bword,word\n""wordb,word\n""bwordb,word\n" \
+	""
+
+# -r on symlink to dir should recurse into dir
+mkdir -p grep.testdir/foo
+echo bar > grep.testdir/foo/file
+ln -s foo grep.testdir/symfoo
+testing "grep -r on symlink to dir" \
+	"grep -r . grep.testdir/symfoo" \
+	"grep.testdir/symfoo/file:bar\n" \
+	"" ""
+rm -Rf grep.testdir
+
+# But -r on dir/symlink_to_dir should not recurse into symlink_to_dir
+mkdir -p grep.testdir/foo
+echo bar > grep.testdir/foo/file
+ln -s foo grep.testdir/symfoo
+testing "grep -r on dir/symlink to dir" \
+	"grep -r . grep.testdir" \
+	"grep.testdir/foo/file:bar\n" \
+	"" ""
+rm -Rf grep.testdir
+
 # testing "test name" "commands" "expected result" "file input" "stdin"
 #   file input will be file called "input"
 #   test can create a file "actual" instead of writing to stdout
-- 
