printf: accept negative numbers for %x; ash: overflowed numbers are 0

diff -urBp busybox-1.20.1/libbb/bb_strtonum.c busybox/libbb/bb_strtonum.c
--- busybox-1.20.1/libbb/bb_strtonum.c
+++ busybox/libbb/bb_strtonum.c
@@ -56,13 +56,16 @@ unsigned long long FAST_FUNC bb_strtoull
 {
 	unsigned long long v;
 	char *endptr;
+	char first;
 
 	if (!endp) endp = &endptr;
 	*endp = (char*) arg;
 
 	/* strtoul("  -4200000000") returns 94967296, errno 0 (!) */
 	/* I don't think that this is right. Preventing this... */
-	if (!isalnum(arg[0])) return ret_ERANGE();
+	//if (!isalnum(arg[0])) return ret_ERANGE();
+	first = (arg[0] != '-' ? arg[0] : arg[1]);
+	if (!isalnum(first)) return ret_ERANGE();
 
 	/* not 100% correct for lib func, but convenient for the caller */
 	errno = 0;
@@ -95,11 +98,14 @@ unsigned long FAST_FUNC bb_strtoul(const
 {
 	unsigned long v;
 	char *endptr;
+	char first;
 
 	if (!endp) endp = &endptr;
 	*endp = (char*) arg;
 
-	if (!isalnum(arg[0])) return ret_ERANGE();
+	first = (arg[0] != '-' ? arg[0] : arg[1]);
+	if (!isalnum(first)) return ret_ERANGE();
+
 	errno = 0;
 	v = strtoul(arg, endp, base);
 	return handle_errors(v, endp);
@@ -128,11 +134,14 @@ unsigned FAST_FUNC bb_strtou(const char 
 {
 	unsigned long v;
 	char *endptr;
+	char first;
 
 	if (!endp) endp = &endptr;
 	*endp = (char*) arg;
 
-	if (!isalnum(arg[0])) return ret_ERANGE();
+	first = (arg[0] != '-' ? arg[0] : arg[1]);
+	if (!isalnum(first)) return ret_ERANGE();
+
 	errno = 0;
 	v = strtoul(arg, endp, base);
 	if (v > UINT_MAX) return ret_ERANGE();
