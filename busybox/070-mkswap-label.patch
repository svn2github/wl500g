From db67a20595be279e7db9f5f8e27bd94534efb8d4 Mon Sep 17 00:00:00 2001
From: Vladimir Dronnikov <dronnikov@gmail.com>
Date: Thu, 15 Oct 2009 07:24:25 +0000
Subject: move generate_uuid from mkswap to libbb

From f5a295d5a82297a5c13289c2e43256f20c172ddf Mon Sep 17 00:00:00 2001
From: Denys Vlasenko <vda.linux@googlemail.com>
Date: Thu, 15 Oct 2009 20:43:07 +0000
Subject: util-linux/mkswap.c: fix warning

From 68c67469aabe112cc0ef90bd87700370d96a4085 Mon Sep 17 00:00:00 2001
From: Denys Vlasenko <vda.linux@googlemail.com>
Date: Tue, 03 Nov 2009 04:51:20 +0000
Subject: mkswap: add -L LABEL option. closes bug 689.

diff -BurpN busybox.1.15.3/include/libbb.h busybox/include/libbb.h
--- busybox.1.15.3/include/libbb.h	2009-07-22 14:53:46.000000000 +0000
+++ busybox/include/libbb.h	2010-01-23 08:58:05.000000000 +0000
@@ -694,6 +694,9 @@ const char *make_human_readable_str(unsi
 /* Put a string of hex bytes ("1b2e66fe"...), return advanced pointer */
 char *bin2hex(char *buf, const char *cp, int count) FAST_FUNC;
 
+/* Generate a UUID */
+void generate_uuid(uint8_t *buf) FAST_FUNC;
+
 /* Last element is marked by mult == 0 */
 struct suffix_mult {
 	char suffix[4];
diff -BurpN busybox.1.15.3/include/usage.h busybox/include/usage.h
--- busybox.1.15.3/include/usage.h	2010-01-23 08:54:42.000000000 +0000
+++ busybox/include/usage.h	2010-01-23 08:58:18.000000000 +0000
@@ -2820,17 +2820,11 @@
        "$ mknod -m 644 /tmp/pipe p\n"
 
 #define mkswap_trivial_usage \
-       "DEVICE"
+       "[OPTIONS] BLOCKDEV" /* [SIZE_IN_KB] */
 #define mkswap_full_usage "\n\n" \
-       "Prepare block device to be used as swap partition"
-#if 0
-       "[-c] [-v0|-v1] DEVICE [BLOCKS]"
-     "\nOptions:"
-     "\n	-c	Check for readability"
-     "\n	-v0	Make swap version 0 (max 128M)"
-     "\n	-v1	Make swap version 1 (default for kernels > 2.1.117)"
-     "\n	BLOCKS	Number of blocks to use (default is entire partition)"
-#endif
+       "Prepare BLOCKDEV to be used as swap partition\n" \
+     "\nOptions:" \
+     "\n	-L LBL	Label" \
 
 #define mktemp_trivial_usage \
        "[-dt] [-p DIR] [TEMPLATE]"
diff -BurpN busybox.1.15.3/libbb/xfuncs.c busybox/libbb/xfuncs.c
--- busybox.1.15.3/libbb/xfuncs.c	2009-12-12 21:13:28.000000000 +0000
+++ busybox/libbb/xfuncs.c	2010-01-23 08:58:05.000000000 +0000
@@ -313,3 +313,66 @@ int FAST_FUNC tcsetattr_stdin_TCSANOW(co
 {
 	return tcsetattr(STDIN_FILENO, TCSANOW, tp);
 }
+
+void FAST_FUNC generate_uuid(uint8_t *buf)
+{
+	/* http://www.ietf.org/rfc/rfc4122.txt
+	 *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+	 * |                          time_low                             |
+	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+	 * |       time_mid                |         time_hi_and_version   |
+	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+	 * |clk_seq_and_variant            |         node (0-1)            |
+	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+	 * |                         node (2-5)                            |
+	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+	 * IOW, uuid has this layout:
+	 * uint32_t time_low (big endian)
+	 * uint16_t time_mid (big endian)
+	 * uint16_t time_hi_and_version (big endian)
+	 *  version is a 4-bit field:
+	 *   1 Time-based
+	 *   2 DCE Security, with embedded POSIX UIDs
+	 *   3 Name-based (MD5)
+	 *   4 Randomly generated
+	 *   5 Name-based (SHA-1)
+	 * uint16_t clk_seq_and_variant (big endian)
+	 *  variant is a 3-bit field:
+	 *   0xx Reserved, NCS backward compatibility
+	 *   10x The variant specified in rfc4122
+	 *   110 Reserved, Microsoft backward compatibility
+	 *   111 Reserved for future definition
+	 * uint8_t node[6]
+	 *
+	 * For version 4, these bits are set/cleared:
+	 * time_hi_and_version & 0x0fff | 0x4000
+	 * clk_seq_and_variant & 0x3fff | 0x8000
+	 */
+	pid_t pid;
+	int i;
+
+	i = open("/dev/urandom", O_RDONLY);
+	if (i >= 0) {
+		read(i, buf, 16);
+		close(i);
+	}
+	/* Paranoia. /dev/urandom may be missing.
+	 * rand() is guaranteed to generate at least [0, 2^15) range,
+	 * but lowest bits in some libc are not so "random".  */
+	srand(monotonic_us());
+	pid = getpid();
+	while (1) {
+		for (i = 0; i < 16; i++)
+			buf[i] ^= rand() >> 5;
+		if (pid == 0)
+			break;
+		srand(pid);
+		pid = 0;
+	}
+
+	/* version = 4 */
+	buf[4 + 2    ] = (buf[4 + 2    ] & 0x0f) | 0x40;
+	/* variant = 10x */
+	buf[4 + 2 + 2] = (buf[4 + 2 + 2] & 0x3f) | 0x80;
+}
diff -BurpN busybox.1.15.3/util-linux/mkswap.c busybox/util-linux/mkswap.c
--- busybox.1.15.3/util-linux/mkswap.c	2010-01-23 08:54:42.000000000 +0000
+++ busybox/util-linux/mkswap.c	2010-01-23 08:58:18.000000000 +0000
@@ -50,157 +50,91 @@ static void mkswap_selinux_setcontext(in
 # define mkswap_selinux_setcontext(fd, path) ((void)0)
 #endif
 
-#if ENABLE_FEATURE_MKSWAP_UUID
-static void mkswap_generate_uuid(uint8_t *buf)
-{
-	/* http://www.ietf.org/rfc/rfc4122.txt
-	 *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
-	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
-	 * |                          time_low                             |
-	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
-	 * |       time_mid                |         time_hi_and_version   |
-	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
-	 * |clk_seq_and_variant            |         node (0-1)            |
-	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
-	 * |                         node (2-5)                            |
-	 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
-	 * IOW, uuid has this layout:
-	 * uint32_t time_low (big endian)
-	 * uint16_t time_mid (big endian)
-	 * uint16_t time_hi_and_version (big endian)
-	 *  version is a 4-bit field:
-	 *   1 Time-based
-	 *   2 DCE Security, with embedded POSIX UIDs
-	 *   3 Name-based (MD5)
-	 *   4 Randomly generated
-	 *   5 Name-based (SHA-1)
-	 * uint16_t clk_seq_and_variant (big endian)
-	 *  variant is a 3-bit field:
-	 *   0xx Reserved, NCS backward compatibility
-	 *   10x The variant specified in rfc4122
-	 *   110 Reserved, Microsoft backward compatibility
-	 *   111 Reserved for future definition
-	 * uint8_t node[6]
-	 *
-	 * For version 4, these bits are set/cleared:
-	 * time_hi_and_version & 0x0fff | 0x4000
-	 * clk_seq_and_variant & 0x3fff | 0x8000
-	 */
-	pid_t pid;
-	int i;
-	char uuid_string[32];
-
-	i = open("/dev/urandom", O_RDONLY);
-	if (i >= 0) {
-		read(i, buf, 16);
-		close(i);
-	}
-	/* Paranoia. /dev/urandom may be missing.
-	 * rand() is guaranteed to generate at least [0, 2^15) range,
-	 * but lowest bits in some libc are not so "random".  */
-	srand(monotonic_us());
-	pid = getpid();
-	while (1) {
-		for (i = 0; i < 16; i++)
-			buf[i] ^= rand() >> 5;
-		if (pid == 0)
-			break;
-		srand(pid);
-		pid = 0;
-	}
-
-	/* version = 4 */
-	buf[4 + 2    ] = (buf[4 + 2    ] & 0x0f) | 0x40;
-	/* variant = 10x */
-	buf[4 + 2 + 2] = (buf[4 + 2 + 2] & 0x3f) | 0x80;
-
-	bin2hex(uuid_string, (void*) buf, 16);
-	/* f.e. UUID=dfd9c173-be52-4d27-99a5-c34c6c2ff55f */
-	printf("UUID=%.8s"  "-%.4s-%.4s-%.4s-%.12s\n",
-		uuid_string,
-		uuid_string+8,
-		uuid_string+8+4,
-		uuid_string+8+4+4,
-		uuid_string+8+4+4+4
-	);
-}
-#else
-# define mkswap_generate_uuid(buf) ((void)0)
-#endif
-
-#if 0 /* from Linux 2.6.23 */
+/* from Linux 2.6.23 */
 /*
- * Magic header for a swap area. The first part of the union is
- * what the swap magic looks like for the old (limited to 128MB)
- * swap area format, the second part of the union adds - in the
- * old reserved area - some extra information. Note that the first
- * kilobyte is reserved for boot loader or disk label stuff...
+ * Magic header for a swap area. ... Note that the first
+ * kilobyte is reserved for boot loader or disk label stuff.
  */
-union swap_header {
-	struct {
-		char reserved[PAGE_SIZE - 10];
-		char magic[10];			/* SWAP-SPACE or SWAPSPACE2 */
-	} magic;
-	struct {
-		char            bootbits[1024];	/* Space for disklabel etc. */
-		__u32           version;        /* second kbyte, word 0 */
-		__u32           last_page;      /* 1 */
-		__u32           nr_badpages;    /* 2 */
-		unsigned char   sws_uuid[16];   /* 3,4,5,6 */
-		unsigned char   sws_volume[16]; /* 7,8,9,10  */
-		__u32           padding[117];   /* 11..127 */
-		__u32           badpages[1];    /* 128, total 129 32-bit words */
-	} info;
+struct swap_header_v1 {
+/*	char     bootbits[1024];    Space for disklabel etc. */
+	uint32_t version;        /* second kbyte, word 0 */
+	uint32_t last_page;      /* 1 */
+	uint32_t nr_badpages;    /* 2 */
+	char     sws_uuid[16];   /* 3,4,5,6 */
+	char     sws_volume[16]; /* 7,8,9,10 */
+	uint32_t padding[117];   /* 11..127 */
+	uint32_t badpages[1];    /* 128 */
+	/* total 129 32-bit words in 2nd kilobyte */
 };
-#endif
 
 #define NWORDS 129
-#define hdr ((uint32_t*)(&bb_common_bufsiz1))
+#define hdr ((struct swap_header_v1*)bb_common_bufsiz1)
 
-struct BUG_bufsiz1_is_too_small {
-	char BUG_bufsiz1_is_too_small[COMMON_BUFSIZE < (NWORDS * 4) ? -1 : 1];
+struct BUG_sizes {
+	char swap_header_v1_wrong[sizeof(*hdr)  != (NWORDS * 4) ? -1 : 1];
+	char bufsiz1_is_too_small[COMMON_BUFSIZE < (NWORDS * 4) ? -1 : 1];
 };
 
 /* Stored without terminating NUL */
 static const char SWAPSPACE2[sizeof("SWAPSPACE2")-1] ALIGN1 = "SWAPSPACE2";
 
 int mkswap_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int mkswap_main(int argc, char **argv)
+int mkswap_main(int argc UNUSED_PARAM, char **argv)
 {
-	int fd, pagesize;
+	int fd;
+	unsigned pagesize;
 	off_t len;
+	const char *label = "";
 
-	// No options supported.
-
-	if (argc != 2) bb_show_usage();
+	opt_complementary = "=1";
+	/* TODO: -p PAGESZ, -U UUID,
+	 * optional SIZE_IN_KB 2nd param
+	 */
+	getopt32(argv, "L:", &label);
+	argv += optind;
 
-	// Figure out how big the device is and announce our intentions.
+	fd = xopen(argv[0], O_WRONLY);
 
-	fd = xopen(argv[1], O_RDWR);
+	/* Figure out how big the device is and announce our intentions */
 	/* fdlength was reported to be unreliable - use seek */
 	len = xlseek(fd, 0, SEEK_END);
-#if ENABLE_SELINUX
-	xlseek(fd, 0, SEEK_SET);
-#endif
+	if (ENABLE_SELINUX)
+		xlseek(fd, 0, SEEK_SET);
+
 	pagesize = getpagesize();
-	printf("Setting up swapspace version 1, size = %"OFF_FMT"u bytes\n",
-			len - pagesize);
-	mkswap_selinux_setcontext(fd, argv[1]);
-
-	// Make a header. hdr is zero-filled so far...
-	hdr[0] = 1;
-	hdr[1] = (len / pagesize) - 1;
-	mkswap_generate_uuid((void*) &hdr[3]);
+	len -= pagesize;
+	printf("Setting up swapspace version 1, size = %"OFF_FMT"u bytes\n", len);
+	mkswap_selinux_setcontext(fd, argv[0]);
+
+	/* Make a header. hdr is zero-filled so far... */
+	hdr->version = 1;
+	hdr->last_page = (uoff_t)len / pagesize;
+
+	if (ENABLE_FEATURE_MKSWAP_UUID) {
+		char uuid_string[32];
+		generate_uuid((void*)hdr->sws_uuid);
+		bin2hex(uuid_string, hdr->sws_uuid, 16);
+		/* f.e. UUID=dfd9c173-be52-4d27-99a5-c34c6c2ff55f */
+		printf("UUID=%.8s"  "-%.4s-%.4s-%.4s-%.12s\n",
+			uuid_string,
+			uuid_string+8,
+			uuid_string+8+4,
+			uuid_string+8+4+4,
+			uuid_string+8+4+4+4
+		);
+	}
+	safe_strncpy(hdr->sws_volume, label, 16);
 
-	// Write the header.  Sync to disk because some kernel versions check
-	// signature on disk (not in cache) during swapon.
+	/* Write the header.  Sync to disk because some kernel versions check
+	 * signature on disk (not in cache) during swapon. */
 	xlseek(fd, 1024, SEEK_SET);
 	xwrite(fd, hdr, NWORDS * 4);
 	xlseek(fd, pagesize - 10, SEEK_SET);
 	xwrite(fd, SWAPSPACE2, 10);
 	fsync(fd);
 
-	if (ENABLE_FEATURE_CLEAN_UP) close(fd);
+	if (ENABLE_FEATURE_CLEAN_UP)
+		close(fd);
 
 	return 0;
 }
