 af4a07a24408667fa77a9a9bcc9fc773e0364e77 ping[6]: accept and ignore -n. Code shrink
 59f46676a9c03303809f40d1a27c4d2e9e640697 Move create_icmp[6]_socket to its only user, and simplify it
 26a7e2ecbf76db06cf0754a0664eaa68e3cae53a ping: code shrink

---
 include/libbb.h             |    3 
 libbb/Kbuild.src            |    2 
 libbb/create_icmp6_socket.c |   38 -----------
 libbb/create_icmp_socket.c  |   36 ----------
 networking/ping.c           |  148 ++++++++++++++++++++++++++------------------
 5 files changed, 90 insertions(+), 137 deletions(-)

diff --git a/include/libbb.h b/include/libbb.h
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -1109,9 +1109,6 @@ void bb_displayroutes(int noresolve, int netstatfmt) FAST_FUNC;
 
 
 /* Networking */
-int create_icmp_socket(void) FAST_FUNC;
-int create_icmp6_socket(void) FAST_FUNC;
-/* interface.c */
 /* This structure defines protocol families and their handlers. */
 struct aftype {
 	const char *name;
diff --git a/libbb/Kbuild.src b/libbb/Kbuild.src
--- a/libbb/Kbuild.src
+++ b/libbb/Kbuild.src
@@ -27,8 +27,6 @@ lib-y += concat_subpath_file.o
 lib-y += copy_file.o
 lib-y += copyfd.o
 lib-y += crc32.o
-lib-y += create_icmp6_socket.o
-lib-y += create_icmp_socket.o
 lib-y += default_error_retval.o
 lib-y += device_open.o
 lib-y += dump.o
diff --git a/libbb/create_icmp6_socket.c b/libbb/create_icmp6_socket.c
deleted file mode 100644
--- a/libbb/create_icmp6_socket.c
+++ /dev/null
@@ -1,38 +0,0 @@
-/* vi: set sw=4 ts=4: */
-/*
- * Utility routines.
- *
- * create raw socket for icmp (IPv6 version) protocol
- * and drop root privileges if running setuid
- *
- * Licensed under GPLv2, see file LICENSE in this source tree.
- */
-
-#include "libbb.h"
-
-#if ENABLE_FEATURE_IPV6
-int FAST_FUNC create_icmp6_socket(void)
-{
-	int sock;
-#if 0
-	struct protoent *proto;
-	proto = getprotobyname("ipv6-icmp");
-	/* if getprotobyname failed, just silently force
-	 * proto->p_proto to have the correct value for "ipv6-icmp" */
-	sock = socket(AF_INET6, SOCK_RAW,
-			(proto ? proto->p_proto : IPPROTO_ICMPV6));
-#else
-	sock = socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);
-#endif
-	if (sock < 0) {
-		if (errno == EPERM)
-			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
-		bb_perror_msg_and_die(bb_msg_can_not_create_raw_socket);
-	}
-
-	/* drop root privs if running setuid */
-	xsetuid(getuid());
-
-	return sock;
-}
-#endif
diff --git a/libbb/create_icmp_socket.c b/libbb/create_icmp_socket.c
deleted file mode 100644
--- a/libbb/create_icmp_socket.c
+++ /dev/null
@@ -1,36 +0,0 @@
-/* vi: set sw=4 ts=4: */
-/*
- * Utility routines.
- *
- * create raw socket for icmp protocol
- * and drop root privileges if running setuid
- *
- * Licensed under GPLv2, see file LICENSE in this source tree.
- */
-
-#include "libbb.h"
-
-int FAST_FUNC create_icmp_socket(void)
-{
-	int sock;
-#if 0
-	struct protoent *proto;
-	proto = getprotobyname("icmp");
-	/* if getprotobyname failed, just silently force
-	 * proto->p_proto to have the correct value for "icmp" */
-	sock = socket(AF_INET, SOCK_RAW,
-			(proto ? proto->p_proto : 1)); /* 1 == ICMP */
-#else
-	sock = socket(AF_INET, SOCK_RAW, 1); /* 1 == ICMP */
-#endif
-	if (sock < 0) {
-		if (errno == EPERM)
-			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
-		bb_perror_msg_and_die(bb_msg_can_not_create_raw_socket);
-	}
-
-	/* drop root privs if running setuid */
-	xsetuid(getuid());
-
-	return sock;
-}
diff --git a/networking/ping.c b/networking/ping.c
--- a/networking/ping.c
+++ b/networking/ping.c
@@ -89,7 +89,9 @@
 //usage:       "[OPTIONS] HOST"
 //usage:# define ping_full_usage "\n\n"
 //usage:       "Send ICMP ECHO_REQUEST packets to network hosts\n"
+//usage:	IF_PING6(
 //usage:     "\n	-4,-6		Force IP or IPv6 name resolution"
+//usage:	)
 //usage:     "\n	-c CNT		Send only CNT pings"
 //usage:     "\n	-s SIZE		Send SIZE data bytes in packets (default:56)"
 //usage:     "\n	-t TTL		Set TTL"
@@ -147,8 +149,33 @@ enum {
 	MAX_DUP_CHK = (8 * 128),
 	MAXWAIT = 10,
 	PINGINTERVAL = 1, /* 1 second */
+	pingsock = 0,
 };
 
+static void
+#if ENABLE_PING6
+create_icmp_socket(len_and_sockaddr *lsa)
+#else
+create_icmp_socket(void)
+#define create_icmp_socket(lsa) create_icmp_socket()
+#endif
+{
+	int sock;
+#if ENABLE_PING6
+	if (lsa->u.sa.sa_family == AF_INET6)
+		sock = socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);
+	else
+#endif
+		sock = socket(AF_INET, SOCK_RAW, 1); /* 1 == ICMP */
+	if (sock < 0) {
+		if (errno == EPERM)
+			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+		bb_perror_msg_and_die(bb_msg_can_not_create_raw_socket);
+	}
+
+	xmove_fd(sock, pingsock);
+}
+
 #if !ENABLE_FEATURE_FANCY_PING
 
 /* Simple version */
@@ -169,12 +196,10 @@ static void noresp(int ign UNUSED_PARAM)
 static void ping4(len_and_sockaddr *lsa)
 {
 	struct icmp *pkt;
-	int pingsock, c;
-
-	pingsock = create_icmp_socket();
+	int c;
 
 	pkt = (struct icmp *) G.packet;
-	memset(pkt, 0, sizeof(G.packet));
+	/*memset(pkt, 0, sizeof(G.packet)); already is */
 	pkt->icmp_type = ICMP_ECHO;
 	pkt->icmp_cksum = inet_cksum((uint16_t *) pkt, sizeof(G.packet));
 
@@ -182,11 +207,15 @@ static void ping4(len_and_sockaddr *lsa)
 
 	/* listen for replies */
 	while (1) {
+#if 0
 		struct sockaddr_in from;
 		socklen_t fromlen = sizeof(from);
 
 		c = recvfrom(pingsock, G.packet, sizeof(G.packet), 0,
 				(struct sockaddr *) &from, &fromlen);
+#else
+		c = recv(pingsock, G.packet, sizeof(G.packet), 0);
+#endif
 		if (c < 0) {
 			if (errno != EINTR)
 				bb_perror_msg("recvfrom");
@@ -208,13 +237,11 @@ static void ping4(len_and_sockaddr *lsa)
 static void ping6(len_and_sockaddr *lsa)
 {
 	struct icmp6_hdr *pkt;
-	int pingsock, c;
+	int c;
 	int sockopt;
 
-	pingsock = create_icmp6_socket();
-
 	pkt = (struct icmp6_hdr *) G.packet;
-	memset(pkt, 0, sizeof(G.packet));
+	/*memset(pkt, 0, sizeof(G.packet)); already is */
 	pkt->icmp6_type = ICMP6_ECHO_REQUEST;
 
 	sockopt = offsetof(struct icmp6_hdr, icmp6_cksum);
@@ -224,18 +251,21 @@ static void ping6(len_and_sockaddr *lsa)
 
 	/* listen for replies */
 	while (1) {
+#if 0
 		struct sockaddr_in6 from;
 		socklen_t fromlen = sizeof(from);
 
 		c = recvfrom(pingsock, G.packet, sizeof(G.packet), 0,
 				(struct sockaddr *) &from, &fromlen);
+#else
+		c = recv(pingsock, G.packet, sizeof(G.packet), 0);
+#endif
 		if (c < 0) {
 			if (errno != EINTR)
 				bb_perror_msg("recvfrom");
 			continue;
 		}
-		if (c >= ICMP_MINLEN) {			/* icmp6_hdr */
-			pkt = (struct icmp6_hdr *) G.packet;
+		if (c >= ICMP_MINLEN) {	/* icmp6_hdr */
 			if (pkt->icmp6_type == ICMP6_ECHO_REPLY)
 				break;
 		}
@@ -283,6 +313,7 @@ static int common_ping_main(sa_family_t 
 	signal(SIGALRM, noresp);
 	alarm(5); /* give the host 5000ms to respond */
 
+	create_icmp_socket(lsa);
 #if ENABLE_PING6
 	if (lsa->u.sa.sa_family == AF_INET6)
 		ping6(lsa);
@@ -299,7 +330,7 @@ static int common_ping_main(sa_family_t 
 
 /* Full(er) version */
 
-#define OPT_STRING ("qvc:s:t:w:W:I:4" IF_PING6("6"))
+#define OPT_STRING ("qvc:s:t:w:W:I:n4" IF_PING6("6"))
 enum {
 	OPT_QUIET = 1 << 0,
 	OPT_VERBOSE = 1 << 1,
@@ -309,13 +340,13 @@ enum {
 	OPT_w = 1 << 5,
 	OPT_W = 1 << 6,
 	OPT_I = 1 << 7,
-	OPT_IPV4 = 1 << 8,
-	OPT_IPV6 = (1 << 9) * ENABLE_PING6,
+	/*OPT_n = 1 << 8, - ignored */
+	OPT_IPV4 = 1 << 9,
+	OPT_IPV6 = (1 << 10) * ENABLE_PING6,
 };
 
 
 struct globals {
-	int pingsock;
 	int if_index;
 	char *str_I;
 	len_and_sockaddr *source_lsa;
@@ -341,17 +372,13 @@ struct globals {
 		struct sockaddr_in6 sin6;
 #endif
 	} pingaddr;
-	char rcvd_tbl[MAX_DUP_CHK / 8];
+	unsigned char rcvd_tbl[MAX_DUP_CHK / 8];
 } FIX_ALIASING;
 #define G (*(struct globals*)&bb_common_bufsiz1)
-#define pingsock     (G.pingsock    )
 #define if_index     (G.if_index    )
 #define source_lsa   (G.source_lsa  )
 #define str_I        (G.str_I       )
 #define datalen      (G.datalen     )
-#define ntransmitted (G.ntransmitted)
-#define nreceived    (G.nreceived   )
-#define nrepeats     (G.nrepeats    )
 #define pingcount    (G.pingcount   )
 #define opt_ttl      (G.opt_ttl     )
 #define myid         (G.myid        )
@@ -369,51 +396,55 @@ void BUG_ping_globals_too_big(void);
 #define INIT_G() do { \
 	if (sizeof(G) > COMMON_BUFSIZE) \
 		BUG_ping_globals_too_big(); \
-	pingsock = -1; \
 	datalen = DEFDATALEN; \
 	timeout = MAXWAIT; \
 	tmin = UINT_MAX; \
 } while (0)
 
 
-#define A(bit)		rcvd_tbl[(bit)>>3]	/* identify byte in array */
-#define B(bit)		(1 << ((bit) & 0x07))	/* identify bit in byte */
-#define SET(bit)	(A(bit) |= B(bit))
-#define CLR(bit)	(A(bit) &= (~B(bit)))
-#define TST(bit)	(A(bit) & B(bit))
-
-/**************************************************************************/
+#define BYTE(bit)	rcvd_tbl[(bit)>>3]
+#define MASK(bit)	(1 << ((bit) & 7))
+#define SET(bit)	(BYTE(bit) |= MASK(bit))
+#define CLR(bit)	(BYTE(bit) &= (~MASK(bit)))
+#define TST(bit)	(BYTE(bit) & MASK(bit))
 
 static void print_stats_and_exit(int junk) NORETURN;
 static void print_stats_and_exit(int junk UNUSED_PARAM)
 {
+	unsigned long ul;
+	unsigned long nrecv;
+
 	signal(SIGINT, SIG_IGN);
 
-	printf("\n--- %s ping statistics ---\n", hostname);
-	printf("%lu packets transmitted, ", ntransmitted);
-	printf("%lu packets received, ", nreceived);
-	if (nrepeats)
-		printf("%lu duplicates, ", nrepeats);
-	if (ntransmitted)
-		ntransmitted = (ntransmitted - nreceived) * 100 / ntransmitted;
-	printf("%lu%% packet loss\n", ntransmitted);
+	nrecv = G.nreceived;
+	printf("\n--- %s ping statistics ---\n"
+		"%lu packets transmitted, "
+		"%lu packets received, ",
+		hostname, G.ntransmitted, nrecv
+	);
+	if (G.nrepeats)
+		printf("%lu duplicates, ", G.nrepeats);
+	ul = G.ntransmitted;
+	if (ul != 0)
+		ul = (ul - nrecv) * 100 / ul;
+	printf("%lu%% packet loss\n", ul);
 	if (tmin != UINT_MAX) {
-		unsigned tavg = tsum / (nreceived + nrepeats);
+		unsigned tavg = tsum / (nrecv + G.nrepeats);
 		printf("round-trip min/avg/max = %u.%03u/%u.%03u/%u.%03u ms\n",
 			tmin / 1000, tmin % 1000,
 			tavg / 1000, tavg % 1000,
 			tmax / 1000, tmax % 1000);
 	}
 	/* if condition is true, exit with 1 -- 'failure' */
-	exit(nreceived == 0 || (deadline && nreceived < pingcount));
+	exit(nrecv == 0 || (deadline && nrecv < pingcount));
 }
 
 static void sendping_tail(void (*sp)(int), int size_pkt)
 {
 	int sz;
 
-	CLR((uint16_t)ntransmitted % MAX_DUP_CHK);
-	ntransmitted++;
+	CLR((uint16_t)G.ntransmitted % MAX_DUP_CHK);
+	G.ntransmitted++;
 
 	size_pkt += datalen;
 
@@ -423,7 +454,7 @@ static void sendping_tail(void (*sp)(int
 	if (sz != size_pkt)
 		bb_error_msg_and_die(bb_msg_write_error);
 
-	if (pingcount == 0 || deadline || ntransmitted < pingcount) {
+	if (pingcount == 0 || deadline || G.ntransmitted < pingcount) {
 		/* Didn't send all pings yet - schedule next in 1s */
 		signal(SIGALRM, sp);
 		if (deadline) {
@@ -439,7 +470,7 @@ static void sendping_tail(void (*sp)(int
 		 * otherwise ping waits for two RTTs. */
 		unsigned expire = timeout;
 
-		if (nreceived) {
+		if (G.nreceived) {
 			/* approx. 2*tmax, in seconds (2 RTT) */
 			expire = tmax / (512*1024);
 			if (expire == 0)
@@ -458,7 +489,7 @@ static void sendping4(int junk UNUSED_PA
 	pkt->icmp_type = ICMP_ECHO;
 	/*pkt->icmp_code = 0;*/
 	pkt->icmp_cksum = 0; /* cksum is calculated with this field set to 0 */
-	pkt->icmp_seq = htons(ntransmitted); /* don't ++ here, it can be a macro */
+	pkt->icmp_seq = htons(G.ntransmitted); /* don't ++ here, it can be a macro */
 	pkt->icmp_id = myid;
 
 	/* If datalen < 4, we store timestamp _past_ the packet,
@@ -481,7 +512,7 @@ static void sendping6(int junk UNUSED_PA
 	pkt->icmp6_type = ICMP6_ECHO_REQUEST;
 	/*pkt->icmp6_code = 0;*/
 	/*pkt->icmp6_cksum = 0;*/
-	pkt->icmp6_seq = htons(ntransmitted); /* don't ++ here, it can be a macro */
+	pkt->icmp6_seq = htons(G.ntransmitted); /* don't ++ here, it can be a macro */
 	pkt->icmp6_id = myid;
 
 	/*if (datalen >= 4)*/
@@ -545,11 +576,10 @@ static void unpack_tail(int sz, uint32_t
 		const char *from_str,
 		uint16_t recv_seq, int ttl)
 {
+	unsigned char *b, m;
 	const char *dupmsg = " (DUP!)";
 	unsigned triptime = triptime; /* for gcc */
 
-	++nreceived;
-
 	if (tp) {
 		/* (int32_t) cast is for hypothetical 64-bit unsigned */
 		/* (doesn't hurt 32-bit real-world anyway) */
@@ -561,11 +591,15 @@ static void unpack_tail(int sz, uint32_t
 			tmax = triptime;
 	}
 
-	if (TST(recv_seq % MAX_DUP_CHK)) {
-		++nrepeats;
-		--nreceived;
+	b = &BYTE(recv_seq % MAX_DUP_CHK);
+	m = MASK(recv_seq % MAX_DUP_CHK);
+	/*if TST(recv_seq % MAX_DUP_CHK):*/
+	if (*b & m) {
+		++G.nrepeats;
 	} else {
-		SET(recv_seq % MAX_DUP_CHK);
+		/*SET(recv_seq % MAX_DUP_CHK):*/
+		*b |= m;
+		++G.nreceived;
 		dupmsg += 7;
 	}
 
@@ -648,7 +682,6 @@ static void ping4(len_and_sockaddr *lsa)
 {
 	int sockopt;
 
-	pingsock = create_icmp_socket();
 	pingaddr.sin = lsa->u.sin;
 	if (source_lsa) {
 		if (setsockopt(pingsock, IPPROTO_IP, IP_MULTICAST_IF,
@@ -656,8 +689,6 @@ static void ping4(len_and_sockaddr *lsa)
 			bb_error_msg_and_die("can't set multicast source interface");
 		xbind(pingsock, &source_lsa->u.sa, source_lsa->len);
 	}
-	if (str_I)
-		setsockopt_bindtodevice(pingsock, str_I);
 
 	/* enable broadcast pings */
 	setsockopt_broadcast(pingsock);
@@ -692,7 +723,7 @@ static void ping4(len_and_sockaddr *lsa)
 			continue;
 		}
 		unpack4(G.rcv_packet, c, &from);
-		if (pingcount && nreceived >= pingcount)
+		if (pingcount && G.nreceived >= pingcount)
 			break;
 	}
 }
@@ -706,13 +737,9 @@ static void ping6(len_and_sockaddr *lsa)
 	struct iovec iov;
 	char control_buf[CMSG_SPACE(36)];
 
-	pingsock = create_icmp6_socket();
 	pingaddr.sin6 = lsa->u.sin6;
-	/* untested whether "-I addr" really works for IPv6: */
 	if (source_lsa)
 		xbind(pingsock, &source_lsa->u.sa, source_lsa->len);
-	if (str_I)
-		setsockopt_bindtodevice(pingsock, str_I);
 
 #ifdef ICMP6_FILTER
 	{
@@ -784,7 +811,7 @@ static void ping6(len_and_sockaddr *lsa)
 			}
 		}
 		unpack6(G.rcv_packet, c, &from, hoplimit);
-		if (pingcount && nreceived >= pingcount)
+		if (pingcount && G.nreceived >= pingcount)
 			break;
 	}
 }
@@ -799,6 +826,11 @@ static void ping(len_and_sockaddr *lsa)
 	}
 	printf(": %d data bytes\n", datalen);
 
+	create_icmp_socket(lsa);
+	/* untested whether "-I addr" really works for IPv6: */
+	if (str_I)
+		setsockopt_bindtodevice(pingsock, str_I);
+
 	G.sizeof_rcv_packet = datalen + MAXIPLEN + MAXICMPLEN;
 	G.rcv_packet = xzalloc(G.sizeof_rcv_packet);
 #if ENABLE_PING6
-- 
