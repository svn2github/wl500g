Subject: Explicitly set DHCP_MAX_SIZE (option 57) for request packets, like for discover.

--- busybox.orig/networking/udhcp/common.h	2010-10-13 00:00:00.000000000 +0000
+++ busybox/networking/udhcp/common.h	2010-10-13 19:10:29.684347002 +0000
@@ -68,6 +68,8 @@ enum {
 	DHCP_SIZE        = sizeof(struct dhcp_packet) - CONFIG_UDHCPC_SLACK_FOR_BUGGY_SERVERS,
 };
 
+#define DHCP_MIN_SIZE 300
+
 /* Let's see whether compiler understood us right */
 struct BUG_bad_sizeof_struct_ip_udp_dhcp_packet {
 	char c[IP_UDP_DHCP_SIZE == 576 ? 1 : -1];
@@ -294,7 +294,7 @@ void udhcp_sp_setup(void) FAST_FUNC;
 int udhcp_sp_fd_set(fd_set *rfds, int extra_fd) FAST_FUNC;
 int udhcp_sp_read(const fd_set *rfds) FAST_FUNC;
 
-int udhcp_read_interface(const char *interface, int *ifindex, uint32_t *nip, uint8_t *mac) FAST_FUNC;
+int udhcp_read_interface(const char *interface, int *ifindex, uint32_t *nip, uint8_t *mac, uint16_t *mtu) FAST_FUNC;
 
 int udhcp_listen_socket(/*uint32_t ip,*/ int port, const char *inf) FAST_FUNC;
 
--- busybox.orig/networking/udhcp/dhcpc.c	2010-10-13 19:03:43.534347002 +0000
+++ busybox/networking/udhcp/dhcpc.c	2010-10-13 19:52:03.864347002 +0000
@@ -361,7 +361,10 @@ static void add_client_options(struct dh
 	uint8_t c;
 	int i, end, len;
 
-	udhcp_add_simple_option(packet, DHCP_MAX_SIZE, htons(IP_UDP_DHCP_SIZE));
+	len = sizeof(struct ip_udp_dhcp_packet);
+	if (client_config.client_mtu > 0)
+		len = MIN(client_config.client_mtu, len);
+	udhcp_add_simple_option(packet, DHCP_MAX_SIZE, htons(len));
 
 	/* Add a "param req" option with the list of options we'd like to have
 	 * from stubborn DHCP servers. Pull the data from the struct in common.c.
@@ -923,7 +932,8 @@ int udhcpc_main(int argc UNUSED_PARAM, c
 	if (udhcp_read_interface(client_config.interface,
 			&client_config.ifindex,
 			NULL,
-			client_config.client_mac)
+			client_config.client_mac,
+			&client_config.client_mtu)
 	) {
 		return 1;
 	}
@@ -1207,7 +1207,8 @@ int udhcpc_main(int argc UNUSED_PARAM, c
 			if (udhcp_read_interface(client_config.interface,
 					&client_config.ifindex,
 					NULL,
-					client_config.client_mac)
+					client_config.client_mac,
+					&client_config.client_mtu)
 			) {
 				return 1; /* iface is gone? */
 			}
--- busybox.orig/networking/udhcp/dhcpc.h	2010-10-09 19:57:14.000000000 +0000
+++ busybox/networking/udhcp/dhcpc.h	2010-10-13 18:20:36.324347002 +0000
@@ -9,6 +9,7 @@ PUSH_AND_SET_FUNCTION_VISIBILITY_TO_HIDD
 
 struct client_config_t {
 	uint8_t client_mac[6];          /* Our mac address */
+	uint16_t client_mtu;		/* Our mtu */
 	IF_FEATURE_UDHCP_PORT(uint16_t port;)
 	int ifindex;                    /* Index number of the interface to use */
 
--- busybox.orig/networking/udhcp/dhcpd.c	2010-09-16 23:05:35.000000000 +0000
+++ busybox/networking/udhcp/dhcpd.c	2010-10-13 18:19:07.024347002 +0000
@@ -357,7 +357,8 @@ int udhcpd_main(int argc UNUSED_PARAM, c
 	if (udhcp_read_interface(server_config.interface,
 			&server_config.ifindex,
 			&server_config.server_nip,
-			server_config.server_mac)
+			server_config.server_mac,
+			NULL)
 	) {
 		retval = 1;
 		goto ret;
--- busybox.orig/networking/udhcp/dhcprelay.c	2010-10-09 19:57:14.000000000 +0000
+++ busybox/networking/udhcp/dhcprelay.c	2010-10-13 18:19:07.024347002 +0000
@@ -267,7 +267,7 @@ int dhcprelay_main(int argc, char **argv
 	max_socket = init_sockets(iface_list, num_sockets, fds);
 
 	/* Get our IP on server_iface */
-	if (udhcp_read_interface(argv[2], NULL, &our_nip, NULL))
+	if (udhcp_read_interface(argv[2], NULL, &our_nip, NULL, NULL))
 		return 1;
 
 	/* Main loop */
@@ -351,7 +351,7 @@ int dhcprelay_main(int argc, char **argv
 //   of the 'giaddr' field does not match one of the relay agent's
 //   directly-connected logical interfaces, the BOOTREPLY messsage MUST be
 //   silently discarded.
-				if (udhcp_read_interface(iface_list[i], NULL, &dhcp_msg.gateway_nip, NULL)) {
+				if (udhcp_read_interface(iface_list[i], NULL, &dhcp_msg.gateway_nip, NULL, NULL)) {
 					/* Fall back to our IP on server iface */
 // this makes more sense!
 					dhcp_msg.gateway_nip = our_nip;
--- busybox.orig/networking/udhcp/packet.c	2010-09-16 23:05:35.000000000 +0000
+++ busybox/networking/udhcp/packet.c	2010-10-13 18:19:07.024347002 +0000
@@ -145,6 +145,7 @@ int FAST_FUNC udhcp_send_raw_packet(struct dhcp_packet *dhcp_pkt,
 	 * we truncate packets after end option byte.
 	 */
 	padding = DHCP_OPTIONS_BUFSIZE - 1 - udhcp_end_option(packet.data.options);
+	padding = MIN(DHCP_SIZE - DHCP_MIN_SIZE, padding);
 
 	packet.ip.protocol = IPPROTO_UDP;
 	packet.ip.saddr = source_nip;
@@ -215,6 +216,7 @@ int FAST_FUNC udhcp_send_kernel_packet(struct dhcp_packet *dhcp_pkt,
 
 	udhcp_dump_packet(dhcp_pkt);
 	padding = DHCP_OPTIONS_BUFSIZE - 1 - udhcp_end_option(dhcp_pkt->options);
+	padding = MIN(DHCP_SIZE - DHCP_MIN_SIZE, padding);
 	result = safe_write(fd, dhcp_pkt, DHCP_SIZE - padding);
 	msg = "write";
  ret_close:
--- busybox.orig/networking/udhcp/socket.c	2010-09-16 23:05:35.000000000 +0000
+++ busybox/networking/udhcp/socket.c	2010-10-13 18:19:07.024347002 +0000
@@ -34,7 +34,7 @@
 
 #include "common.h"
 
-int FAST_FUNC udhcp_read_interface(const char *interface, int *ifindex, uint32_t *nip, uint8_t *mac)
+int FAST_FUNC udhcp_read_interface(const char *interface, int *ifindex, uint32_t *nip, uint8_t *mac, uint16_t *mtu)
 {
 	int fd;
 	struct ifreq ifr;
@@ -76,6 +76,15 @@ int FAST_FUNC udhcp_read_interface(const
 			mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 	}
 
+	if (mtu) {
+		if (ioctl_or_warn(fd, SIOCGIFMTU, ifr) != 0) {
+			close(fd);
+			return -1;
+		}
+		log1("Adapter mtu %d", ifr->ifr_mtu);
+		*mtu = ifr->ifr_mtu;
+	}
+
 	close(fd);
 	return 0;
 }
