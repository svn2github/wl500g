diff -BurpN gateway/rp-l2tp-0.4/l2tp.h gateway/rp-l2tp/l2tp.h
--- gateway/rp-l2tp-0.4/l2tp.h	2004-07-01 14:58:55.000000000 +0000
+++ gateway/rp-l2tp/l2tp.h	2009-08-31 05:52:54.000000000 +0000
@@ -16,6 +16,7 @@
 #include <stdint.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <net/route.h>
 
 #include "hash.h"
 #include "event.h"
@@ -132,6 +133,7 @@ typedef struct l2tp_tunnel_t {
     unsigned char response[MD5LEN]; /* Our response to challenge */
     unsigned char expected_response[MD5LEN]; /* Expected resp. to challenge */
     int state;			/* Tunnel state */
+    struct rtentry rt;		/* Route added to destination */
 } l2tp_tunnel;
 
 /* A session within a tunnel */
diff -BurpN gateway/rp-l2tp-0.4/tunnel.c gateway/rp-l2tp/tunnel.c
--- gateway/rp-l2tp-0.4/tunnel.c	2009-08-31 05:52:33.000000000 +0000
+++ gateway/rp-l2tp/tunnel.c	2009-08-31 05:52:54.000000000 +0000
@@ -5,6 +5,8 @@
 * Functions for manipulating L2TP tunnel objects.
 *
 * Copyright (C) 2002 Roaring Penguin Software Inc.
+* Copyright (C) 2005-2007 Oleg I. Vdovikin (oleg@cs.msu.su)
+*	Persist fixes, route manipulation
 *
 * This software may be distributed under the terms of the GNU General
 * Public License, Version 2, or (at your option) any later version.
@@ -21,6 +23,8 @@ static char const RCSID[] =
 #include <stdarg.h>
 #include <stdio.h>
 #include <string.h>
+#include <errno.h>
+#include <sys/ioctl.h>
 
 /* Hash tables of all tunnels */
 static hash_table tunnels_by_my_id;
@@ -81,6 +85,11 @@ static char *state_names[] = {
 #define SERIAL_LT(a, b) \
 (((a) < (b) && (b) - (a) < 32768) || ((a) > (b) && (a) - (b) > 32768))
 
+/* Route manipulation */
+#define sin_addr(s) (((struct sockaddr_in *)(s))->sin_addr)
+static int route_add(const struct in_addr inetaddr, struct rtentry *rt);
+static int route_del(struct rtentry *rt);
+
 /**********************************************************************
 * %FUNCTION: tunnel_set_state
 * %ARGUMENTS:
@@ -483,6 +492,7 @@ tunnel_free(l2tp_tunnel *tunnel)
     while(tunnel->xmit_queue_head) {
 	tunnel_dequeue_head(tunnel);
     }
+    route_del(&tunnel->rt);
     memset(tunnel, 0, sizeof(l2tp_tunnel));
     free(tunnel);
 }
@@ -508,6 +518,9 @@ tunnel_establish(l2tp_peer *peer, EventS
     tunnel->peer = peer;
     tunnel->peer_addr = peer->addr;
 
+    memset(&tunnel->rt, 0, sizeof(tunnel->rt));
+    route_add(tunnel->peer_addr.sin_addr, &tunnel->rt);
+
     hash_insert(&tunnels_by_peer_address, tunnel);
     tunnel_send_SCCRQ(tunnel);
     tunnel_set_state(tunnel, TUNNEL_WAIT_CTL_REPLY);
@@ -1922,3 +1935,99 @@ l2tp_tunnel_next_session(l2tp_tunnel *tu
 {
     return hash_next(&tunnel->sessions_by_my_id, cursor);
 }
+
+/*** route manipulation ************************************************/
+
+static int
+route_ctrl(int ctrl, struct rtentry *rt)
+{
+	int s;
+
+	/* Open a raw socket to the kernel */
+	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ||	ioctl(s, ctrl, rt) < 0)
+	        l2tp_set_errmsg("route_ctrl: %s", strerror(errno));
+	else errno = 0;
+
+	close(s);
+	return errno;
+}
+
+static int
+route_del(struct rtentry *rt)
+{
+	if (rt->rt_dev) {
+		route_ctrl(SIOCDELRT, rt);
+		free(rt->rt_dev), rt->rt_dev = NULL;
+	}
+	
+	return 0;
+}
+
+static int
+route_add(const struct in_addr inetaddr, struct rtentry *rt)
+{
+	char buf[256], dev[64];
+	int metric, flags;
+	u_int32_t dest, mask;
+	
+	FILE *f = fopen("/proc/net/route", "r");
+	if (f == NULL) {
+	        l2tp_set_errmsg("/proc/net/route: %s", strerror(errno));
+		return -1;
+	}
+
+	while (fgets(buf, sizeof(buf), f)) 
+	{
+		if (sscanf(buf, "%63s %x %x %X %*s %*s %d %x", dev, &dest,
+		    	&sin_addr(&rt->rt_gateway).s_addr, &flags, &metric, &mask) != 6)
+			continue;
+		if ((flags & RTF_UP) == RTF_UP && (inetaddr.s_addr & mask) == dest)
+		{
+			rt->rt_metric = metric + 1;
+			rt->rt_gateway.sa_family = AF_INET;
+			break;
+		}
+	}
+	
+	fclose(f);
+
+	/* check for no route */
+	if (rt->rt_gateway.sa_family != AF_INET) 
+	{
+	        l2tp_set_errmsg("route_add: no route to host");
+		return -1;
+	}
+
+	/* check for existing route to this host, 
+	add if missing based on the existing routes */
+	if (mask == INADDR_BROADCAST) {
+	        /*l2tp_set_errmsg("route_add: not adding existing route");*/
+		return -1;
+	}
+
+	sin_addr(&rt->rt_dst) = inetaddr;
+	rt->rt_dst.sa_family = AF_INET;
+
+	sin_addr(&rt->rt_genmask).s_addr = INADDR_BROADCAST;
+	rt->rt_genmask.sa_family = AF_INET;
+
+	rt->rt_flags = RTF_UP | RTF_HOST;
+	if (sin_addr(&rt->rt_gateway).s_addr)
+		rt->rt_flags |= RTF_GATEWAY;
+
+	rt->rt_metric++;
+	rt->rt_dev = strdup(dev);
+
+	if (!rt->rt_dev)
+	{
+	        l2tp_set_errmsg("route_add: no memory");
+		return -1;
+	}
+	
+	if (!route_ctrl(SIOCADDRT, rt))
+		return 0;
+
+	free(rt->rt_dev), rt->rt_dev = NULL;
+
+	return -1;
+}
