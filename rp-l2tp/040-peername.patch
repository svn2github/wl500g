diff -BurpN rp-l2tp-0.4/tunnel.c rp-l2tp/tunnel.c
--- rp-l2tp-0.4/tunnel.c	2009-08-31 05:54:41.000000000 +0000
+++ rp-l2tp/tunnel.c	2009-08-31 05:55:06.000000000 +0000
@@ -25,6 +25,7 @@ static char const RCSID[] =
 #include <string.h>
 #include <errno.h>
 #include <sys/ioctl.h>
+#include <netdb.h>
 
 /* Hash tables of all tunnels */
 static hash_table tunnels_by_my_id;
@@ -511,12 +512,32 @@ static l2tp_tunnel *
 tunnel_establish(l2tp_peer *peer, EventSelector *es)
 {
     l2tp_tunnel *tunnel;
+    struct sockaddr_in peer_addr = peer->addr;
+    struct hostent *he;
 
+    /* check peer_addr and resolv it based on the peername if needed */
+    if (peer_addr.sin_addr.s_addr == INADDR_ANY) {
+	he = gethostbyname(peer->peername);
+	if (!he) {
+            l2tp_set_errmsg("tunnel_establish: gethostbyname failed for '%s'", peer->peername);
+	    if (peer->persist && (peer->maxfail == 0 || peer->fail++ < peer->maxfail)) 
+	    {
+		struct timeval t;
+
+		t.tv_sec = peer->holdoff;
+		t.tv_usec = 0;
+		Event_AddTimerHandler(es, t, l2tp_tunnel_reestablish, peer);
+	    }
+	    return NULL;
+	}
+	memcpy(&peer_addr.sin_addr, he->h_addr, sizeof(peer_addr.sin_addr));
+    }
+    
     tunnel = tunnel_new(es);
     if (!tunnel) return NULL;
 
     tunnel->peer = peer;
-    tunnel->peer_addr = peer->addr;
+    tunnel->peer_addr = peer_addr;
 
     memset(&tunnel->rt, 0, sizeof(tunnel->rt));
     route_add(tunnel->peer_addr.sin_addr, &tunnel->rt);
@@ -1372,7 +1393,8 @@ tunnel_set_params(l2tp_tunnel *tunnel,
                            l2tp_debug_tunnel_to_str(tunnel), tunnel->peer_hostname));
 
     /* Find peer */
-    tunnel->peer = l2tp_peer_find(&tunnel->peer_addr, tunnel->peer_hostname);
+    if (tunnel->peer == NULL || tunnel->peer->addr.sin_addr.s_addr != INADDR_ANY)
+	tunnel->peer = l2tp_peer_find(&tunnel->peer_addr, tunnel->peer_hostname);
 
     /* Get assigned tunnel ID */
     val = l2tp_dgram_search_avp(dgram, tunnel, &mandatory, &hidden, &len,
@@ -1643,7 +1665,18 @@ l2tp_tunnel *
 l2tp_tunnel_find_for_peer(l2tp_peer *peer,
 		     EventSelector *es)
 {
-    l2tp_tunnel *tunnel = tunnel_find_bypeer(peer->addr);
+    l2tp_tunnel *tunnel;
+    void *cursor;
+    
+    if (peer->addr.sin_addr.s_addr == INADDR_ANY)
+    {
+	for (tunnel = hash_start(&tunnels_by_my_id, &cursor);
+	    tunnel && tunnel->peer != peer; 
+	    tunnel = hash_next(&tunnels_by_my_id, &cursor));
+    } else {
+	tunnel = tunnel_find_bypeer(peer->addr);
+    }
+
     if (tunnel) {
 	if (tunnel->state == TUNNEL_WAIT_CTL_REPLY ||
 	    tunnel->state == TUNNEL_WAIT_CTL_CONN ||
