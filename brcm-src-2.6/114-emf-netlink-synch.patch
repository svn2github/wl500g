diff -urBp a/emf/emf/emf_linux.c b/emf/emf/emf_linux.c
--- a/emf/emf/emf_linux.c
+++ b/emf/emf/emf_linux.c
@@ -945,55 +945,38 @@ emf_cfg_request_process(emf_cfg_request_
  *              dequeues the message, calls the functions to process
  *              the commands and sends the result back to user.
  *
- * Input:       sk  - Kernel socket structure
- *              len - Length of the message received from user app.
+ * Input:       skb  - Kernel socket structure
  */
 static void
-emf_netlink_sock_cb(struct sock *sk, int32 len)
+emf_netlink_sock_cb(struct sk_buff *skb)
 {
-	struct sk_buff	*skb;
-	struct nlmsghdr	*nlh = NULL;
-	uint8 *data = NULL;
-
-	EMF_DEBUG("Length of the command buffer %d\n", len);
-
-	/* Dequeue the message from netlink socket */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
-	while ((skb = skb_dequeue(&sk->sk_receive_queue)) != NULL)
-#else
-	while ((skb = skb_dequeue(&sk->receive_queue)) != NULL)
-#endif
-	{
-		/* Check the buffer for min size */
-		if (skb->len < sizeof(emf_cfg_request_t))
-		{
-			EMF_ERROR("Configuration request size not > %d\n",
-			          sizeof(emf_cfg_request_t));
-			return;
-		}
-
-		/* Buffer contains netlink header followed by data */
-		nlh = (struct nlmsghdr *)skb->data;
-		data = NLMSG_DATA(nlh);
-
-		/* Process the message */
-		emf_cfg_request_process((emf_cfg_request_t *)data);
-
-		/* Send the result to user process */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
-		NETLINK_CB(skb).pid = nlh->nlmsg_pid;
-		NETLINK_CB(skb).dst_group = 0;
-#else
-		NETLINK_CB(skb).groups = 0;
-		NETLINK_CB(skb).pid = 0;
-		NETLINK_CB(skb).dst_groups = 0;
-		NETLINK_CB(skb).dst_pid = nlh->nlmsg_pid;
-#endif
+	struct nlmsghdr	*nlh;
 
-		netlink_unicast(emf->nl_sk, skb, nlh->nlmsg_pid, MSG_DONTWAIT);
+	nlh = nlmsg_hdr(skb);
+	EMF_DEBUG("Length of the command buffer %d\n", nlh->nlmsg_len);
+
+	/* Check the buffer for min size */
+	if (skb->len < NLMSG_SPACE(0) || skb->len < nlh->nlmsg_len ||
+		nlh->nlmsg_len < NLMSG_LENGTH(sizeof(emf_cfg_request_t)))
+	{
+		EMF_ERROR("Configuration request size not > %d\n",
+		          sizeof(emf_cfg_request_t));
+		return;
 	}
 
-	return;
+	skb = skb_clone(skb, GFP_KERNEL);
+	if (skb == NULL)
+		return;
+	nlh = nlmsg_hdr(skb);
+
+	/* Process the message */
+	emf_cfg_request_process((emf_cfg_request_t *)NLMSG_DATA(nlh));
+
+	/* Send the result to user process */
+	NETLINK_CB(skb).pid = nlh->nlmsg_pid;
+	NETLINK_CB(skb).dst_group = 0;
+
+	netlink_unicast(emf->nl_sk, skb, nlh->nlmsg_pid, MSG_DONTWAIT);
 }
 
 static void
@@ -1040,12 +1023,8 @@ emf_module_init(void)
 
 	/* Create a Netlink socket in kernel-space */
 #define NETLINK_EMFC 17
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 	emf->nl_sk = netlink_kernel_create(NETLINK_EMFC, 0, emf_netlink_sock_cb,
 	                                   NULL, THIS_MODULE);
-#else
-	emf->nl_sk = netlink_kernel_create(NETLINK_EMFC, emf_netlink_sock_cb);
-#endif
 
 	if (emf->nl_sk == NULL)
 	{
@@ -1059,11 +1038,7 @@ emf_module_init(void)
 	if (emf->lock == NULL)
 	{
 		EMF_ERROR("EMF instance list lock create failed\n");
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 		sock_release(emf->nl_sk->sk_socket);
-#else
-		sock_release(emf->nl_sk->socket);
-#endif
 		MFREE(NULL, emf, sizeof(emf_struct_t));
 		return (FAILURE);
 	}
@@ -1088,11 +1063,7 @@ emf_module_exit(void)
 	emfc_module_exit();
 
 	/* Clean up the instances and exit */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 	sock_release(emf->nl_sk->sk_socket);
-#else
-	sock_release(emf->nl_sk->socket);
-#endif
 	emf_instances_clear(emf);
 	OSL_LOCK_DESTROY(emf->lock);
 	MFREE(NULL, emf, sizeof(emf_struct_t));
@@ -1103,7 +1074,6 @@ emf_module_exit(void)
 module_init(emf_module_init);
 module_exit(emf_module_exit);
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 EXPORT_SYMBOL(emfc_init);
 EXPORT_SYMBOL(emfc_exit);
 EXPORT_SYMBOL(emfc_input);
@@ -1114,4 +1084,3 @@ EXPORT_SYMBOL(emfc_rtport_add);
 EXPORT_SYMBOL(emfc_rtport_del);
 EXPORT_SYMBOL(emfc_igmp_snooper_register);
 EXPORT_SYMBOL(emfc_igmp_snooper_unregister);
-#endif
diff -urBp a/emf/igs/igs_linux.c b/emf/igs/igs_linux.c
--- a/emf/igs/igs_linux.c
+++ b/emf/igs/igs_linux.c
@@ -479,56 +479,38 @@ igs_cfg_request_process(igs_cfg_request_
  *              dequeues the message, calls the functions to process
  *              the commands and sends the result back to user.
  *
- * Input:       sk  - Kernel socket structure
- *              len - Length of the message received from user app.
+ * Input:       skb  - Kernel socket structure
  */
 static void
-igs_netlink_sock_cb(struct sock *sk, int32 len)
+igs_netlink_sock_cb(struct sk_buff *skb)
 {
-	struct sk_buff	*skb;
-	struct nlmsghdr	*nlh = NULL;
-	uint8 *data = NULL;
-
-	IGS_DEBUG("Length of the command buffer %d\n", len);
-
-	/* Dequeue the message from netlink socket */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
-	while ((skb = skb_dequeue(&sk->sk_receive_queue)) != NULL)
-#else
-	while ((skb = skb_dequeue(&sk->receive_queue)) != NULL)
-#endif
-	{
-		/* Check the buffer for min size */
-		if (skb->len < sizeof(igs_cfg_request_t))
-		{
-			IGS_ERROR("Configuration request size not > %d\n",
-			          sizeof(igs_cfg_request_t));
-			return;
-		}
-
-
-		/* Buffer contains netlink header followed by data */
-		nlh = (struct nlmsghdr *)skb->data;
-		data = NLMSG_DATA(nlh);
-
-		/* Process the message */
-		igs_cfg_request_process((igs_cfg_request_t *)data);
-
-		/* Send the result to user process */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
-		NETLINK_CB(skb).pid = nlh->nlmsg_pid;
-		NETLINK_CB(skb).dst_group = 0;
-#else
-		NETLINK_CB(skb).groups = 0;
-		NETLINK_CB(skb).pid = 0;
-		NETLINK_CB(skb).dst_groups = 0;
-		NETLINK_CB(skb).dst_pid = nlh->nlmsg_pid;
-#endif
+	struct nlmsghdr	*nlh;
+
+	nlh = nlmsg_hdr(skb);
+	IGS_DEBUG("Length of the command buffer %d\n", nlh->nlmsg_len);
 
-		netlink_unicast(igs.nl_sk, skb, nlh->nlmsg_pid, MSG_DONTWAIT);
+	/* Check the buffer for min size */
+	if (skb->len < NLMSG_SPACE(0) || skb->len < nlh->nlmsg_len ||
+		nlh->nlmsg_len < NLMSG_LENGTH(sizeof(igs_cfg_request_t)))
+	{
+		IGS_ERROR("Configuration request size not > %d\n",
+		          sizeof(igs_cfg_request_t));
+		return;
 	}
 
-	return;
+	skb = skb_clone(skb, GFP_KERNEL);
+	if (skb == NULL)
+		return;
+	nlh = nlmsg_hdr(skb);
+
+	/* Process the message */
+	igs_cfg_request_process((igs_cfg_request_t *)NLMSG_DATA(nlh));
+
+	/* Send the result to user process */
+	NETLINK_CB(skb).pid = nlh->nlmsg_pid;
+	NETLINK_CB(skb).dst_group = 0;
+
+	netlink_unicast(igs.nl_sk, skb, nlh->nlmsg_pid, MSG_DONTWAIT);
 }
 
 /*
@@ -540,12 +522,8 @@ static int32 __init
 igs_module_init(void)
 {
 #define NETLINK_IGSC 18
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 	igs.nl_sk = netlink_kernel_create(NETLINK_IGSC, 0, igs_netlink_sock_cb,
 	                                  NULL, THIS_MODULE);
-#else
-	igs.nl_sk = netlink_kernel_create(NETLINK_IGSC, igs_netlink_sock_cb);
-#endif
 
 	if (igs.nl_sk == NULL)
 	{
@@ -567,11 +545,7 @@ igs_module_init(void)
 static void __exit
 igs_module_exit(void)
 {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 	sock_release(igs.nl_sk->sk_socket);
-#else
-	sock_release(igs.nl_sk->socket);
-#endif
 	igs_instances_clear();
 	OSL_LOCK_DESTROY(igs.lock);
 
@@ -581,9 +555,7 @@ igs_module_exit(void)
 module_init(igs_module_init);
 module_exit(igs_module_exit);
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 0)
 EXPORT_SYMBOL(igsc_init);
 EXPORT_SYMBOL(igsc_exit);
 EXPORT_SYMBOL(igsc_sdb_interface_del);
 EXPORT_SYMBOL(igsc_interface_rtport_del);
-#endif
