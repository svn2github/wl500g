#ifdef BCMSMS4_TEST
/*
 * sms4_vectors.h
 * SMS4 block cipher test vectors
 *
 * Copyright (C) 2009, Broadcom Corporation
 * All Rights Reserved.
 * 
 * This is UNPUBLISHED PROPRIETARY SOURCE CODE of Broadcom Corporation;
 * the contents of this file may not be disclosed to third parties, copied
 * or duplicated in any form, in whole or in part, without the prior
 * written permission of Broadcom Corporation.
 *
 * $Id: sms4_vectors.h,v 1.1.1.1 2010/11/22 09:05:02 Exp $
 */

#include <typedefs.h>

/* Example 1 from SMS4 specification */
uint32 skey_00[] = {
	0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210
	};

uint32 sinput_00[] = {
	0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210
	};

uint32 sniter_00 = 1;

uint32 sref_00[] = {
	0x681edf34, 0xd206965e, 0x86b3e94f, 0x536e4246
	};

/* Example 2 from SMS4 specification */
uint32 skey_01[] = {
	0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210
	};

uint32 sinput_01[] = {
	0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210
	};

uint32 sniter_01 = 1000000;

uint32 sref_01[] = {
	0x595298c7, 0xc6fd271f, 0x0402f804, 0xc33d3f66
	};

typedef struct {
	uint32 *key;
	uint32 *input;
	uint32 *niter;
	uint32 *ref;
} sms4_vector_t;

#define SMS4_VECTOR_ENTRY(x)    \
	{ skey_##x, sinput_##x, &sniter_##x, sref_##x }

sms4_vector_t sms4_vec[] = {
    SMS4_VECTOR_ENTRY(00),
    SMS4_VECTOR_ENTRY(01)
    };

#define NUM_SMS4_VECTORS  (sizeof(sms4_vec)/sizeof(sms4_vec[0]))

/* Locally generated vectors for SMS4-WPI-CBC-MAC */
uint8 cmick_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 cmpn_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

/* Last two octets of AAD are the Data Len */
uint8 cmaad_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
	};

/* Buffer must be big enough to hold MAC */
uint8 cminput_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 cmref_00[] = {
	0x46, 0xab, 0x5a, 0x08, 0x5e, 0x9d, 0x85, 0xc5,
	0x8e, 0xcf, 0x47, 0x7a, 0x01, 0xb7, 0x6c, 0x63
	};

uint8 cmick_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

uint8 cmpn_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

/* Last two octets of AAD are the Data Len */
uint8 cmaad_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x10
	};

/* Buffer must be big enough to hold MAC */
uint8 cminput_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 cmref_01[] = {
	0x94, 0x4e, 0xd7, 0x4e, 0xe2, 0xd1, 0x0c, 0x3c,
	0xa4, 0xb3, 0x36, 0x1d, 0x09, 0x54, 0xee, 0x94
	};

uint8 cmick_02[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

uint8 cmpn_02[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

/* Last two octets of AAD are the Data Len */
uint8 cmaad_02[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x00, 0x01, 0x02, 0x00, 0x11
	};

/* Buffer must be big enough to hold MAC */
uint8 cminput_02[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00
	};

uint8 cmref_02[] = {
	0x4a, 0xd7, 0x6d, 0xb3, 0x7a, 0xdb, 0xb2, 0x3b,
	0x63, 0x58, 0x28, 0xb9, 0xae, 0x02, 0x2f, 0xdf
	};


/* from wmac_vhdl_b_11_s_820 */
uint8 cmick_04[] = {
	0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8,
	0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xbb
	};

uint8 cmpn_04[] = {
	0x99, 0x88, 0x77, 0x3f, 0x4f, 0x5f, 0x6f, 0x7f,
	0x8f, 0x9f, 0xaf, 0xbf, 0xcf, 0xdf, 0xef, 0xff
	};

/* Last two octets of AAD are the Data Len */
uint8 cmaad_04[] = {
	0x08, 0x41, 0x00, 0x10, 0x18, 0xff, 0xee, 0xdd,
	0x00, 0x10, 0x18, 0x01, 0x02, 0x03, 0x00, 0x00,
	0x00, 0x10, 0x18, 0xd1, 0xd2, 0xd3, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11
	};

/* Buffer must be big enough to hold MAC */
uint8 cminput_04[] = {
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00
	};

uint8 cmref_04[] = {
	0x54, 0xc0, 0x96, 0x95, 0x0d, 0x76, 0x4c, 0x13,
	0x87, 0x45, 0x87, 0x7a, 0x14, 0x91, 0x4b, 0x02
	};

typedef struct {
	uint8 *ick;
	uint8 *pn;
	size_t al;
	uint8 *aad;
	uint8 *input;
	uint8 *ref;
} sms4_cbc_mac_vector_t;

#define SMS4_CBC_MAC_VECTOR_ENTRY(x)    \
	{ cmick_##x, cmpn_##x, sizeof(cmaad_##x), cmaad_##x, cminput_##x, cmref_##x }

sms4_cbc_mac_vector_t sms4_cbc_mac_vec[] = {
    SMS4_CBC_MAC_VECTOR_ENTRY(00),
    SMS4_CBC_MAC_VECTOR_ENTRY(01),
    SMS4_CBC_MAC_VECTOR_ENTRY(02),
    SMS4_CBC_MAC_VECTOR_ENTRY(04)
    };

#define NUM_SMS4_CBC_MAC_VECTORS  (sizeof(sms4_cbc_mac_vec)/sizeof(sms4_cbc_mac_vec[0]))

/* Locally generated vectors for SMS4-OFB */
uint8 ofbek_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 ofbpn_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 ofbinput_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 ofbref_00[] = {
	0x9f, 0x1f, 0x7b, 0xff, 0x6f, 0x55, 0x11, 0x38,
	0x4d, 0x94, 0x30, 0x53, 0x1e, 0x53, 0x8f, 0xd3
	};

uint8 ofbek_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

uint8 ofbpn_01[] = {
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
	};

uint8 ofbinput_01[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 ofbref_01[] = {
	0x91, 0xfe, 0xe7, 0x82, 0xa9, 0xf5, 0xe8, 0xde,
	0xe2, 0x43, 0xd1, 0x53, 0x47, 0xbf, 0xe2, 0x7b
	};

uint8 ofbek_02[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

uint8 ofbpn_02[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 ofbinput_02[] = {
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
	};

uint8 ofbref_02[] = {
	0x0f, 0x87, 0x25, 0xa6, 0x61, 0xe8, 0xbf, 0xab,
	0xb8, 0x25, 0x5e, 0x4b, 0xee, 0x8e, 0x93, 0xb2
	};

uint8 ofbek_03[] = {
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
	0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
	};

uint8 ofbpn_03[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 ofbinput_03[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 ofbref_03[] = {
	0xf8, 0xd0, 0x68, 0x70, 0xb9, 0xea, 0x32, 0x1e,
	0xe9, 0x6a, 0x1d, 0x3b, 0x0e, 0x2f, 0xa5, 0xb5,
	0xac, 0x9a, 0xe7, 0xfc, 0xca, 0x01, 0x10, 0x3a,
	0x1c, 0x14, 0x10, 0x73, 0x7f, 0xc9, 0x78, 0xcf,
	0x71, 0xe1, 0xca, 0x81, 0xca, 0x92, 0x27, 0xe4
	};


/* from wmac_vhdl_b_11_s_820 */
uint8 ofbek_05[] = {
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x44
	};

uint8 ofbpn_05[] = {
	0xff, 0xef, 0xdf, 0xcf, 0xbf, 0xaf, 0x9f, 0x8f,
	0x7f, 0x6f, 0x5f, 0x4f, 0x3f, 0x77, 0x88, 0x99
	};

uint8 ofbinput_05[] = {
	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28
	};

uint8 ofbref_05[] = {
	0x12, 0x6b, 0x64, 0x45, 0x05, 0x92, 0xa2, 0x7e,
	0xc0, 0x3e, 0xbf, 0x72, 0x5c, 0x00, 0x39, 0x88,
	0xb3
	};

typedef struct {
	uint8 *ek;
	uint8 *pn;
	uint16 il;
	uint8 *input;
	uint8 *ref;
} sms4_ofb_vector_t;

#define SMS4_OFB_VECTOR_ENTRY(x)    \
	{ ofbek_##x, ofbpn_##x, sizeof(ofbinput_##x), ofbinput_##x, ofbref_##x }

sms4_ofb_vector_t sms4_ofb_vec[] = {
    SMS4_OFB_VECTOR_ENTRY(00),
    SMS4_OFB_VECTOR_ENTRY(01),
    SMS4_OFB_VECTOR_ENTRY(02),
    SMS4_OFB_VECTOR_ENTRY(03),
    SMS4_OFB_VECTOR_ENTRY(05)
    };

#define NUM_SMS4_OFB_VECTORS  (sizeof(sms4_ofb_vec)/sizeof(sms4_ofb_vec[0]))

/* Locally generated vectors for SMS4-WPI */
uint8 wpiek_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpiick_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpipn_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

/* Last two octets of AAD are the Data Len */
uint8 wpiaad_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
	};

/* Buffer must be big enough to hold MAC */
uint8 wpiinput_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpiref_00[] = {
	0xff, 0x7b, 0x1f, 0x9f, 0x38, 0x11, 0x55, 0x6f,
	0x53, 0x30, 0x94, 0x4d, 0xd3, 0x8f, 0x53, 0x1e,
	0x73, 0xec, 0x56, 0x43, 0xc5, 0x77, 0x8a, 0x6a,
	0x49, 0xac, 0x3b, 0x0c, 0x53, 0x3f, 0xaf, 0xa4
	};

uint8 wpiek_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

uint8 wpiick_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

uint8 wpipn_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};

/* Last two octets of AAD are the Data Len */
uint8 wpiaad_01[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x05, 0xdc
	};

/* Buffer must be big enough to hold MAC */
uint8 wpiinput_01[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
	};

uint8 wpiref_01[] = {
	0x47, 0x13, 0xc3, 0xee, 0xeb, 0x16, 0x7a, 0x7e,
	0x52, 0xcb, 0x58, 0xe8, 0xd7, 0x67, 0xaa, 0x3a,
	0x34, 0x43, 0x72, 0x9f, 0x8d, 0x1b, 0x38, 0xd8,
	0x66, 0xf2, 0x17, 0xe0, 0xc8, 0x21, 0x48, 0x72,
	0x5d, 0xe8, 0xf9, 0x93, 0x77, 0xf9, 0xea, 0xac,
	0xd8, 0xbc, 0x92, 0xad, 0xea, 0xae, 0xae, 0xaf,
	0xcd, 0x7b, 0xe3, 0xb6, 0x70, 0x62, 0xb9, 0x4f,
	0x20, 0x8f, 0xfd, 0x88, 0x35, 0x49, 0xe9, 0x01,
	0x45, 0x1e, 0x53, 0xaf, 0x89, 0xf8, 0xcb, 0x76,
	0xd0, 0x80, 0xf7, 0x9e, 0xdf, 0xcc, 0xfb, 0x6c,
	0x60, 0xe4, 0xdc, 0xb9, 0x80, 0x13, 0x7c, 0x8f,
	0xfb, 0xa5, 0xe8, 0x2a, 0xff, 0x41, 0x5d, 0x44,
	0x1e, 0xb5, 0xf0, 0x7f, 0x89, 0x4b, 0xe8, 0x8b,
	0x55, 0xf3, 0x9f, 0x35, 0x7a, 0x43, 0xdb, 0xb3,
	0xa7, 0x02, 0xb2, 0x19, 0x19, 0x0f, 0x72, 0xa6,
	0x31, 0x23, 0x3e, 0x37, 0x59, 0x29, 0x46, 0xd5,
	0xfa, 0x74, 0x15, 0xff, 0x78, 0x5c, 0x21, 0x19,
	0x46, 0x04, 0x57, 0x51, 0x69, 0x0a, 0x12, 0x7b,
	0x17, 0xc5, 0x45, 0x75, 0xae, 0x1c, 0x49, 0xcf,
	0xbb, 0xdd, 0x61, 0xbe, 0x04, 0x89, 0xbb, 0x54,
	0x52, 0x64, 0x84, 0x7c, 0xa7, 0x37, 0x08, 0x27,
	0xa0, 0xa4, 0xc4, 0x02, 0xed, 0x20, 0x0e, 0xe1,
	0x4c, 0x80, 0xd9, 0xa4, 0xf9, 0x63, 0xf5, 0xcc,
	0x3e, 0x3a, 0x5a, 0x27, 0x61, 0x63, 0xc8, 0xe1,
	0x0c, 0x6b, 0xcd, 0xd0, 0xac, 0xae, 0xb7, 0xc0,
	0x76, 0xa0, 0x80, 0x79, 0x78, 0xb0, 0x70, 0xc3,
	0xeb, 0x27, 0xc1, 0x9b, 0x7d, 0xd4, 0x9c, 0xdb,
	0xe2, 0xdd, 0x47, 0x60, 0x3f, 0x80, 0x03, 0x7e,
	0x06, 0xec, 0xc5, 0xf6, 0xe1, 0xa9, 0x28, 0x40,
	0xc9, 0xa0, 0xbb, 0x9a, 0x33, 0x5c, 0xcf, 0x0d,
	0x53, 0x9b, 0x86, 0x88, 0x7c, 0x83, 0x0b, 0x47,
	0xf2, 0x0c, 0xc0, 0x99, 0x74, 0xe1, 0x32, 0xba,
	0xaa, 0xff, 0x0d, 0xbc, 0x6e, 0xb3, 0x97, 0x4d,
	0x03, 0xdb, 0x17, 0xe0, 0x6b, 0x04, 0x3f, 0xbf,
	0x24, 0x31, 0xf9, 0x25, 0x0a, 0x93, 0xf9, 0xb1,
	0xf1, 0xda, 0xf4, 0x54, 0x5e, 0x44, 0xf8, 0x98,
	0x19, 0xc7, 0xfb, 0xbc, 0x72, 0xcd, 0x7f, 0x12,
	0x37, 0xe7, 0xed, 0xe4, 0x21, 0x9e, 0x69, 0x75,
	0x08, 0xda, 0x18, 0x0d, 0x37, 0x77, 0x37, 0x3e,
	0x77, 0x00, 0xf3, 0x95, 0xf2, 0xf2, 0x84, 0x00,
	0x7b, 0x4c, 0xea, 0x34, 0x73, 0xc4, 0x97, 0x9a,
	0xb2, 0x17, 0xc2, 0xc9, 0xde, 0xf5, 0xb3, 0x81,
	0x7c, 0x33, 0xad, 0x91, 0xc0, 0xf0, 0x3a, 0x6e,
	0x1b, 0x4a, 0x68, 0x6a, 0x48, 0x84, 0x6f, 0xe7,
	0x5e, 0xe8, 0x9e, 0xab, 0x14, 0xcc, 0xa0, 0xa2,
	0xd1, 0xb3, 0xc9, 0x3d, 0x87, 0xf1, 0xb1, 0x1e,
	0x8a, 0x0c, 0xda, 0x67, 0x61, 0xfa, 0x16, 0x5e,
	0xc9, 0xfb, 0x1a, 0xca, 0x8c, 0x80, 0x86, 0x43,
	0x3d, 0x78, 0x52, 0x53, 0x35, 0x5d, 0xdb, 0x39,
	0xdb, 0x88, 0x8d, 0x93, 0xe4, 0xe1, 0xd2, 0x3a,
	0x77, 0xb9, 0xab, 0xbd, 0x47, 0x05, 0xba, 0x76,
	0x19, 0x93, 0xd8, 0x40, 0x18, 0x9b, 0x68, 0x33,
	0xd9, 0x30, 0x43, 0xd1, 0x24, 0xf3, 0x84, 0x7d,
	0xe3, 0xe2, 0xd0, 0x56, 0x93, 0xd3, 0xbd, 0x11,
	0xe8, 0x8b, 0x21, 0xb0, 0x60, 0xcb, 0x0b, 0x38,
	0x68, 0x4e, 0xee, 0x14, 0x1e, 0x6a, 0x9b, 0xe7,
	0xe5, 0x8a, 0xff, 0xa5, 0x8d, 0x0c, 0x45, 0x45,
	0x96, 0x3b, 0x0b, 0x84, 0xbd, 0x30, 0xbe, 0xa1,
	0x2d, 0xcb, 0x9c, 0xd5, 0x58, 0x3e, 0x29, 0x63,
	0xb6, 0xac, 0xb4, 0x89, 0x7b, 0xb9, 0x9b, 0x2a,
	0x5c, 0xb5, 0xdc, 0x62, 0xc5, 0xf7, 0x2a, 0x78,
	0x75, 0x37, 0x3e, 0x93, 0x9d, 0x04, 0xae, 0x13,
	0x87, 0x7a, 0xb6, 0x22, 0xe8, 0x4b, 0x07, 0x82,
	0x31, 0xd1, 0x58, 0x2a, 0x33, 0x3b, 0x14, 0xcb,
	0x02, 0xe9, 0x53, 0x8c, 0xb9, 0x98, 0x9b, 0x82,
	0x98, 0x42, 0xb4, 0xf1, 0xe9, 0x4f, 0x2e, 0xe9,
	0x52, 0x40, 0xdb, 0x40, 0xf9, 0xbc, 0x15, 0x4f,
	0x99, 0x7d, 0xfc, 0x72, 0xbb, 0x76, 0x0e, 0x9c,
	0x15, 0x1e, 0xc5, 0x16, 0x2a, 0xe5, 0x1d, 0x42,
	0x84, 0x76, 0x92, 0x48, 0x97, 0xc2, 0xb7, 0x3d,
	0x08, 0xd5, 0xd2, 0xe9, 0x00, 0x4f, 0x9e, 0x90,
	0x3b, 0xc7, 0x88, 0xbb, 0x47, 0x74, 0x74, 0x6a,
	0xe5, 0xf8, 0x1c, 0x4b, 0x83, 0x20, 0xfc, 0xbf,
	0xd3, 0x28, 0x76, 0xdc, 0xc5, 0x09, 0x3a, 0x53,
	0x32, 0x84, 0x8b, 0xd5, 0x91, 0xdb, 0x3f, 0x97,
	0x3b, 0xa9, 0xe7, 0x95, 0x21, 0x5a, 0x77, 0x61,
	0xaa, 0x42, 0xff, 0x03, 0xd1, 0xbb, 0xbc, 0x09,
	0xc8, 0x5b, 0x96, 0x81, 0x7c, 0x61, 0x03, 0x5d,
	0xc5, 0x07, 0x07, 0xe3, 0x6f, 0x35, 0x0a, 0x8b,
	0x26, 0xeb, 0x02, 0x3e, 0x0e, 0x29, 0xc5, 0xcd,
	0xe3, 0x61, 0xe9, 0x43, 0xf7, 0xad, 0x77, 0x4f,
	0x42, 0x45, 0x82, 0x84, 0x08, 0xe4, 0x2e, 0xe9,
	0x09, 0xe2, 0x66, 0xe9, 0xd8, 0x4e, 0xb3, 0xe5,
	0x5c, 0xd1, 0x85, 0xa9, 0xe6, 0xfc, 0x5e, 0xfe,
	0xc2, 0x87, 0x1f, 0x48, 0x4a, 0x12, 0x02, 0xcd,
	0x33, 0xb9, 0x04, 0x84, 0xe2, 0x31, 0x63, 0xbe,
	0x45, 0x47, 0xd5, 0xb2, 0xec, 0x2d, 0x5d, 0x69,
	0x0c, 0x37, 0x54, 0x3a, 0x0c, 0x90, 0xc5, 0xef,
	0xa1, 0x02, 0x02, 0x92, 0x57, 0x33, 0x22, 0x86,
	0x13, 0x34, 0x7b, 0xe6, 0x59, 0x4d, 0x29, 0x78,
	0x4e, 0x7e, 0x00, 0x72, 0x28, 0x84, 0x3f, 0xb9,
	0xed, 0x61, 0xd4, 0x80, 0x35, 0xda, 0x8c, 0x7b,
	0x4a, 0xd2, 0x1d, 0x70, 0xa5, 0x7b, 0x64, 0x39,
	0x0a, 0xbc, 0x87, 0xca, 0x6e, 0x56, 0xb2, 0x97,
	0x0c, 0xdd, 0x59, 0xd6, 0x86, 0xe6, 0x9b, 0x3a,
	0x8f, 0xbd, 0x7c, 0x30, 0xe3, 0xae, 0x0d, 0x8b,
	0x3a, 0xcd, 0x99, 0x87, 0x8b, 0xd1, 0xfb, 0x6c,
	0x02, 0xf4, 0xf4, 0x17, 0xe7, 0x04, 0xe7, 0xb4,
	0xda, 0xff, 0x6d, 0x8e, 0x4e, 0x62, 0xd9, 0x83,
	0x3e, 0xc9, 0x4f, 0x19, 0x4c, 0x67, 0xf0, 0x46,
	0xd7, 0x48, 0xec, 0x60, 0x4e, 0x1f, 0x05, 0xba,
	0xb9, 0x00, 0x8d, 0x00, 0x83, 0x85, 0xbc, 0x14,
	0x20, 0xcc, 0xdb, 0x81, 0x5e, 0xd6, 0x8a, 0xc6,
	0x6d, 0xe4, 0x51, 0xd3, 0xad, 0x4c, 0xa3, 0xc4,
	0x89, 0x5e, 0x45, 0x8f, 0x24, 0xec, 0x06, 0x74,
	0x39, 0x86, 0x9c, 0x89, 0xd1, 0x3c, 0x73, 0xcd,
	0x61, 0xd0, 0xc8, 0xe7, 0xf5, 0x0c, 0xdc, 0xaa,
	0x53, 0x86, 0xf8, 0xb2, 0xcd, 0xae, 0x51, 0x6b,
	0x9f, 0x48, 0xba, 0x2e, 0x0c, 0x7e, 0xe2, 0x4b,
	0x3d, 0x29, 0xfa, 0xc4, 0x56, 0x8b, 0xc6, 0xe7,
	0x34, 0x6a, 0x90, 0x08, 0x9f, 0x76, 0x90, 0xa3,
	0xc4, 0x24, 0xe0, 0x7b, 0xf2, 0xbd, 0xb0, 0x37,
	0x03, 0x64, 0xfc, 0x68, 0xe4, 0x04, 0x5c, 0x17,
	0x63, 0x26, 0x6e, 0x41, 0x08, 0x52, 0xa2, 0x5d,
	0x6f, 0x8f, 0x0c, 0xc1, 0x9f, 0x25, 0x83, 0x70,
	0x7b, 0x02, 0x2f, 0x95, 0xfe, 0x52, 0x42, 0xbc,
	0xcb, 0x22, 0xe5, 0x0b, 0x3d, 0xd4, 0x5b, 0xcd,
	0xed, 0x5f, 0xe6, 0x15, 0xdc, 0x4f, 0xc8, 0xa2,
	0x4d, 0x16, 0xa4, 0xc5, 0x1d, 0x39, 0xf0, 0x97,
	0x86, 0x82, 0xc6, 0xeb, 0x37, 0x31, 0xab, 0x50,
	0x1f, 0x83, 0x5b, 0xb7, 0xab, 0x67, 0x31, 0xfa,
	0x5b, 0x10, 0x00, 0x5c, 0x11, 0x97, 0x96, 0xa5,
	0x88, 0x4c, 0x1a, 0xdc, 0x41, 0x4e, 0x7f, 0x01,
	0xbf, 0x76, 0xc3, 0x9d, 0x1d, 0x3a, 0x52, 0x7f,
	0xb5, 0x39, 0xf2, 0x55, 0xa1, 0x8f, 0x62, 0x09,
	0xf6, 0x30, 0x46, 0x0c, 0xf3, 0xbb, 0x07, 0xfa,
	0x35, 0xe6, 0xfc, 0x4f, 0xe8, 0x7e, 0x0b, 0x0f,
	0x4c, 0xa8, 0x6d, 0x40, 0x56, 0xaa, 0x89, 0xd4,
	0x5b, 0xef, 0x3b, 0x25, 0x8c, 0x92, 0x0d, 0xfb,
	0x60, 0x4e, 0x98, 0xa1, 0x68, 0xa9, 0xa7, 0xdb,
	0x79, 0xab, 0x23, 0xbb, 0xbd, 0x02, 0xbe, 0x19,
	0x2a, 0x98, 0xb6, 0xbf, 0x15, 0xc0, 0x89, 0xdc,
	0x63, 0xa6, 0xe4, 0xe2, 0x10, 0x4b, 0x01, 0xa2,
	0x53, 0xb5, 0xd8, 0x63, 0x28, 0xb8, 0xf8, 0x1d,
	0x64, 0xc3, 0x60, 0x9f, 0x89, 0x2f, 0x36, 0xe4,
	0x34, 0x09, 0x38, 0xf3, 0x22, 0xc7, 0x7f, 0x75,
	0xce, 0xed, 0x0c, 0x64, 0xec, 0x1b, 0x04, 0x14,
	0xaf, 0xdf, 0x73, 0xd3, 0x03, 0xe9, 0x0b, 0xd8,
	0xb6, 0xa3, 0x40, 0x18, 0x18, 0x11, 0x8d, 0x19,
	0x6d, 0xac, 0x70, 0xe1, 0xb0, 0x1a, 0xce, 0x12,
	0xff, 0xd8, 0xb8, 0xd6, 0xbf, 0x3a, 0x78, 0xc8,
	0x9e, 0x3a, 0x96, 0x67, 0xab, 0x6d, 0xc7, 0xa6,
	0x17, 0x50, 0x56, 0x53, 0xfc, 0xcd, 0x3e, 0xe8,
	0x78, 0x45, 0x60, 0x26, 0xdc, 0x03, 0xe5, 0xe7,
	0xdc, 0xb4, 0x16, 0xe2, 0xac, 0x39, 0xc8, 0x26,
	0xa0, 0x99, 0x0f, 0x1f, 0x82, 0xac, 0xeb, 0xda,
	0xa1, 0x4e, 0x2e, 0x3b, 0xa8, 0x93, 0xf7, 0xe6,
	0xf0, 0xde, 0x5c, 0x1c, 0xaf, 0xbb, 0x30, 0xb3,
	0x48, 0x91, 0xa3, 0xe1, 0x6b, 0x08, 0xbd, 0x32,
	0xdb, 0xaf, 0x37, 0xfa, 0xea, 0xd0, 0x8a, 0x09,
	0x4b, 0x87, 0xe3, 0x6a, 0x73, 0x03, 0xd4, 0x6e,
	0x65, 0x85, 0x23, 0x23, 0x9b, 0xb4, 0x6e, 0xc5,
	0xc0, 0x31, 0xcc, 0x7e, 0x15, 0xf5, 0x13, 0xcb,
	0x59, 0xab, 0x19, 0x22, 0xa2, 0x86, 0xd1, 0x62,
	0xf5, 0xa7, 0x6b, 0x3b, 0xae, 0x2d, 0x27, 0xa6,
	0xec, 0xf9, 0x67, 0x7f, 0x3d, 0x78, 0x66, 0x11,
	0x40, 0x99, 0xef, 0x1a, 0xe2, 0x57, 0x18, 0x9d,
	0xc1, 0x0d, 0xf1, 0x83, 0x8d, 0x04, 0xab, 0xb2,
	0x5f, 0x12, 0x48, 0x28, 0xc9, 0xcf, 0x89, 0xe9,
	0x03, 0xa8, 0xb9, 0x91, 0x55, 0xf9, 0x6d, 0x92,
	0xfb, 0x01, 0x1c, 0x6c, 0x9b, 0x3c, 0x31, 0xaf,
	0x19, 0x8c, 0x4e, 0xb9, 0x54, 0x34, 0xfd, 0x9a,
	0xb7, 0x25, 0x3f, 0x5e, 0x3c, 0xc2, 0xa9, 0xb5,
	0x65, 0x1f, 0x56, 0xbc, 0x9d, 0xe4, 0xfa, 0x2b,
	0x6f, 0x04, 0xdd, 0x18, 0x36, 0x31, 0xb2, 0x12,
	0xee, 0xd1, 0xe5, 0x8d, 0x99, 0x37, 0xcb, 0x29,
	0xe8, 0x13, 0xc1, 0x09, 0x60, 0xec, 0x24, 0x31,
	0x7b, 0xfe, 0x19, 0x5c, 0x2d, 0x7a, 0x30, 0x96,
	0x87, 0xb4, 0xca, 0x56, 0x27, 0x10, 0x28, 0xde,
	0xa9, 0xed, 0x9c, 0xf5, 0x11, 0x65, 0xac, 0xfc,
	0x5d, 0x6c, 0x17, 0x01, 0x96, 0x5b, 0xbb, 0x33,
	0x5e, 0x82, 0xe1, 0xe4, 0x63, 0x79, 0xbb, 0x15,
	0xb5, 0xbd, 0x87, 0xb4, 0x47, 0xde, 0x32, 0x00,
	0x1a, 0x56, 0x35, 0xe1, 0x0f, 0x8c, 0x82, 0x50,
	0x1b, 0x60, 0xf7, 0xe4, 0x3b, 0x1e, 0x81, 0xa7,
	0xbc, 0x85, 0xc0, 0x5b, 0x9c, 0x3a, 0xe9, 0x25,
	0x22, 0xdf, 0x46, 0x80, 0xdc, 0x05, 0x2c, 0xb2,
	0xf8, 0x0f, 0xce, 0xdf, 0xa0, 0x22, 0x22, 0x46,
	0xdb, 0xc2, 0xc3, 0xc0, 0xa3, 0x65, 0xa9, 0x61,
	0x50, 0xd6, 0x9e, 0xc8, 0x61, 0xef, 0x48, 0xf5,
	0xee, 0x9f, 0xd1, 0xe3, 0x8c, 0x56, 0x59, 0xcb,
	0x06, 0x6a, 0x3d, 0x3f, 0xdc, 0x71, 0x93, 0xb2,
	0x21, 0x0a, 0xa6, 0x76, 0x37, 0x99, 0x56, 0x34,
	0xa8, 0xd1, 0x2f, 0x81, 0x52, 0x1c, 0x5f, 0xe2,
	0x44, 0xec, 0x70, 0x92, 0x6d, 0xee, 0xc9, 0xce,
	0x88, 0xfe, 0xc8, 0x85, 0x16, 0xb1, 0xd2, 0xb2,
	0x45, 0x5d, 0xc2, 0xd8, 0x7e, 0x7e, 0xc0, 0xd5,
	0x03, 0x09, 0xea, 0x87, 0xa3, 0xd1, 0xea, 0x0b,
	0x06, 0x73, 0x6d, 0x61, 0x62, 0xe8, 0x6f, 0xf5,
	0x6b, 0xe1, 0x0c, 0xda
	};

typedef struct {
	uint8 *ek;
	uint8 *ick;
	uint8 *pn;
	size_t al;
	uint8 *aad;
	uint8 *input;
	uint8 *ref;
} sms4_wpi_vector_t;

#define SMS4_WPI_VECTOR_ENTRY(x)    \
	{ wpiek_##x, wpiick_##x, wpipn_##x, sizeof(wpiaad_##x), wpiaad_##x, \
		wpiinput_##x, wpiref_##x }

sms4_wpi_vector_t sms4_wpi_vec[] = {
    SMS4_WPI_VECTOR_ENTRY(00),
    SMS4_WPI_VECTOR_ENTRY(01)
    };

#define NUM_SMS4_WPI_VECTORS  (sizeof(sms4_wpi_vec)/sizeof(sms4_wpi_vec[0]))

/* Locally generated packet vectors for SMS4-WPI */
uint8 wpipek_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpipick_00[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

/* Buffer must be big enough to hold MAC */
uint8 wpipinput_00[] = {
	0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00
	};

uint8 wpipref_00[] = {
	0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x9f, 0x1f, 0x7b, 0xff, 0x6f, 0x55,
	0x11, 0x38, 0x4d, 0x94, 0x30, 0x53, 0x1e, 0x53,
	0x8f, 0xd3, 0x27, 0x8a, 0xe4, 0x93, 0xfa, 0x4f,
	0xc7, 0x34, 0x83, 0x3a, 0x28, 0xd2, 0xba, 0x57,
	0xf0, 0xc1
	};


/* from wmac_vhdl_b_11_s_820 */
uint8 wpipek_03[] = {
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x44
	};

uint8 wpipick_03[] = {
	0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8,
	0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xbb
	};

/* Buffer must be big enough to hold MAC */
uint8 wpipinput_03[] = {
	0x08, 0x41, 0x74, 0x00, 0x00, 0x10, 0x18, 0xff,
	0xee, 0xdd, 0x00, 0x10, 0x18, 0x01, 0x02, 0x03,
	0x00, 0x10, 0x18, 0xd1, 0xd2, 0xd3, 0x20, 0x0f,
	0x01, 0x00, 0x99, 0x88, 0x77, 0x3f, 0x4f, 0x5f,
	0x6f, 0x7f, 0x8f, 0x9f, 0xaf, 0xbf, 0xcf, 0xdf,
	0xef, 0xff, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
	0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
	0x26, 0x27, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00
	};

uint8 wpipref_03[] = {
	0x08, 0x41, 0x74, 0x00, 0x00, 0x10, 0x18, 0xff,
	0xee, 0xdd, 0x00, 0x10, 0x18, 0x01, 0x02, 0x03,
	0x00, 0x10, 0x18, 0xd1, 0xd2, 0xd3, 0x20, 0x0f,
	0x01, 0x00, 0x99, 0x88, 0x77, 0x3f, 0x4f, 0x5f,
	0x6f, 0x7f, 0x8f, 0x9f, 0xaf, 0xbf, 0xcf, 0xdf,
	0xef, 0xff, 0x12, 0x6b, 0x64, 0x45, 0x05, 0x92,
	0xa2, 0x7e, 0xc0, 0x3e, 0xbf, 0x72, 0x5c, 0x00,
	0x39, 0x88, 0xb3, 0x74, 0xda, 0xe7, 0x2b, 0x63,
	0x0f, 0xe6, 0x39, 0xd2, 0xa3, 0xa5, 0x43, 0xec,
	0xdf, 0xe5, 0xba
	};

/* 3 address, no QoS, unfragmented, key index 0 */
uint8 wpipek_04[] = {
	0xc9, 0x7c, 0x1f, 0x67, 0xce, 0x37, 0x11, 0x85,
	0x51, 0x4a, 0x8a, 0x19, 0xf2, 0xbd, 0xd5, 0x2f
	};

uint8 wpipick_04[] = {
	0x42, 0xa6, 0x43, 0xe4, 0x32, 0x46, 0xe8, 0x0c,
	0x3c, 0x04, 0xd0, 0x19, 0x78, 0x45, 0xce, 0x0b
	};

/* Buffer must be big enough to hold MAC */
uint8 wpipinput_04[] = {
	/* Data frame */
	0x08,
	/* From DS, Protected */
	0x42,
	/* Bogus Duration */
	0x12, 0x34,
	/* A1 */
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	/* A2 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* A3 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* SeqCtl, not fragmented */
	0x70, 0x07,
	/* KeyIndex 0 */
	0x00,
	/* Reserved */
	0x00,
	/* PN */
	0x37, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	/* Payload */
	0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xba,
	0x1a, 0x55, 0xd0, 0x2f, 0x85, 0xae, 0x96, 0x7b,
	0xb6, 0x2f, 0xb6, 0xcd, 0xa8, 0xeb, 0x7e, 0x78,
	0xa0, 0x50,
	/* Space for WAPI MIC */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpipref_04[] = {
	0x08, 0x42, 0x12, 0x34, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0, 0x70, 0x07,
	0x00, 0x00, 0x37, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x7b, 0x6a, 0x29, 0x38, 0xd9, 0xe1,
	0x4a, 0x45, 0x28, 0xd0, 0x27, 0x77, 0xeb, 0x33,
	0x7d, 0x02, 0xfc, 0x05, 0x0a, 0xa8, 0x86, 0x6e,
	0x11, 0x28, 0x65, 0x6f, 0x35, 0x63, 0x4f, 0x31,
	0xe6, 0x67, 0xe8, 0x0a, 0x5a, 0x94, 0xcd, 0x48,
	0xc1, 0x44, 0xfb, 0x5d
	};

/* 3 address, no QoS, not fragmented, key index 1 */
uint8 wpipek_05[] = {
	0xc9, 0x7c, 0x1f, 0x67, 0xce, 0x37, 0x11, 0x85,
	0x51, 0x4a, 0x8a, 0x19, 0xf2, 0xbd, 0xd5, 0x2f
	};

uint8 wpipick_05[] = {
	0x42, 0xa6, 0x43, 0xe4, 0x32, 0x46, 0xe8, 0x0c,
	0x3c, 0x04, 0xd0, 0x19, 0x78, 0x45, 0xce, 0x0b
	};

/* Buffer must be big enough to hold MAC */
uint8 wpipinput_05[] = {
	/* Data frame */
	0x08,
	/* From DS, Protected */
	0x42,
	/* Bogus Duration */
	0x12, 0x34,
	/* A1 */
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	/* A2 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* A3 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* SeqCtl, not fragmented */
	0x70, 0x07,
	/* KeyIndex 1 */
	0x01,
	/* Reserved */
	0x00,
	/* PN */
	0x37, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	/* Payload */
	0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xba,
	0x1a, 0x55, 0xd0, 0x2f, 0x85, 0xae, 0x96, 0x7b,
	0xb6, 0x2f, 0xb6, 0xcd, 0xa8, 0xeb, 0x7e, 0x78,
	0xa0, 0x50,
	/* Space for WAPI MIC */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpipref_05[] = {
	0x08, 0x42, 0x12, 0x34, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0, 0x70, 0x07,
	0x01, 0x00, 0x37, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x7b, 0x6a, 0x29, 0x38, 0xd9, 0xe1,
	0x4a, 0x45, 0x28, 0xd0, 0x27, 0x77, 0xeb, 0x33,
	0x7d, 0x02, 0xfc, 0x05, 0x0a, 0xa8, 0x86, 0x6e,
	0x11, 0x28, 0x65, 0x6f, 0xb3, 0xed, 0x92, 0xc4,
	0x2b, 0x66, 0x01, 0xfc, 0x86, 0x23, 0x1d, 0x79,
	0x51, 0x39, 0x25, 0x07
	};

/* 3 address, QoS, fragmented, key index 0 */
uint8 wpipek_06[] = {
	0xc9, 0x7c, 0x1f, 0x67, 0xce, 0x37, 0x11, 0x85,
	0x51, 0x4a, 0x8a, 0x19, 0xf2, 0xbd, 0xd5, 0x2f
	};

uint8 wpipick_06[] = {
	0x42, 0xa6, 0x43, 0xe4, 0x32, 0x46, 0xe8, 0x0c,
	0x3c, 0x04, 0xd0, 0x19, 0x78, 0x45, 0xce, 0x0b
	};

/* Buffer must be big enough to hold MAC */
uint8 wpipinput_06[] = {
	/* QoS Data frame */
	0x88,
	/* To DS, Protected */
	0x41,
	/* Bogus Duration */
	0x02, 0x46,
	/* A1 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* A2 */
	0x00, 0x10, 0x18, 0x09, 0xc9, 0x12,
	/* A3 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* SeqCtl, fragmented */
	0x73, 0x98,
	/* QoS, TID 7 */
	0x00, 0x07,
	/* KeyIndex 0 */
	0x00,
	/* Reserved */
	0x00,
	/* PN */
	0x38, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	/* Payload */
	0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xba,
	0x1a, 0x55, 0xd0, 0x2f, 0x85, 0xae, 0x96, 0x7b,
	0xb6, 0x2f, 0xb6, 0xcd, 0xa8, 0xeb, 0x7e, 0x78,
	0xa0, 0x50, 0x01,
	/* Space for WAPI MIC */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpipref_06[] = {
	0x88, 0x41, 0x02, 0x46, 0x00, 0x10, 0x18, 0x09,
	0xd5, 0xb0, 0x00, 0x10, 0x18, 0x09, 0xc9, 0x12,
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0, 0x73, 0x98,
	0x00, 0x07, 0x00, 0x00, 0x38, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x26, 0xae, 0x5c, 0x77,
	0x38, 0x08, 0x5c, 0xb3, 0xf7, 0x67, 0x99, 0x90,
	0x20, 0xf8, 0xb7, 0x8f, 0x79, 0x96, 0x03, 0x42,
	0xd4, 0x56, 0xf4, 0xac, 0x75, 0x08, 0xaa, 0x14,
	0x08, 0x5a, 0xa9, 0x06, 0x3b, 0xb1, 0xb5, 0xbd,
	0x65, 0x00, 0x6f, 0x93, 0x3f, 0x86, 0xed
	};

/* 4 address, no QoS, unfragmented, key index 0 */
uint8 wpipek_07[] = {
	0xc9, 0x7c, 0x1f, 0x67, 0xce, 0x37, 0x11, 0x85,
	0x51, 0x4a, 0x8a, 0x19, 0xf2, 0xbd, 0xd5, 0x2f
	};

uint8 wpipick_07[] = {
	0x42, 0xa6, 0x43, 0xe4, 0x32, 0x46, 0xe8, 0x0c,
	0x3c, 0x04, 0xd0, 0x19, 0x78, 0x45, 0xce, 0x0b
	};

/* Buffer must be big enough to hold MAC */
uint8 wpipinput_07[] = {
	/* Data + CF-Ack + CF-Poll frame */
	0x38,
	/* To DS, From DS, Protected */
	0x43,
	/* Bogus Duration */
	0xab, 0xcd,
	/* A1 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* A2 */
	0x00, 0x10, 0x18, 0x09, 0xc9, 0x12,
	/* A3 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* SeqCtl, unfragmented */
	0x12, 0x03,
	/* A4 */
	0x00, 0x10, 0x18, 0x08, 0x12, 0xa7,
	/* KeyIndex 0 */
	0x00,
	/* Reserved */
	0x00,
	/* PN */
	0x39, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	/* Payload */
	0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xba,
	0x1a, 0x55, 0xd0, 0x2f, 0x85, 0xae, 0x96, 0x7b,
	0xb6, 0x2f, 0xb6, 0xcd, 0xa8, 0xeb, 0x7e, 0x78,
	0xa0, 0x50, 0x01,
	/* Space for WAPI MIC */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpipref_07[] = {
	0x38, 0x43, 0xab, 0xcd, 0x00, 0x10, 0x18, 0x09,
	0xd5, 0xb0, 0x00, 0x10, 0x18, 0x09, 0xc9, 0x12,
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0, 0x12, 0x03,
	0x00, 0x10, 0x18, 0x08, 0x12, 0xa7, 0x00, 0x00,
	0x39, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x4f, 0xe4, 0x72, 0x34, 0x55, 0x42, 0x80, 0x92,
	0x62, 0x60, 0x0d, 0x7b, 0x47, 0xb4, 0x99, 0x37,
	0x3d, 0x81, 0xdd, 0x60, 0x3c, 0x6f, 0xfc, 0x20,
	0x8e, 0xb9, 0x7b, 0x48, 0x0b, 0xc0, 0xcb, 0x76,
	0xf1, 0x99, 0x68, 0xcb, 0xfb, 0xcb, 0x1f, 0x47,
	0x1e, 0x8d, 0xcf
	};

/* 4 address, QoS, unfragmented, key index 0 */
uint8 wpipek_08[] = {
	0xc9, 0x7c, 0x1f, 0x67, 0xce, 0x37, 0x11, 0x85,
	0x51, 0x4a, 0x8a, 0x19, 0xf2, 0xbd, 0xd5, 0x2f
	};

uint8 wpipick_08[] = {
	0x42, 0xa6, 0x43, 0xe4, 0x32, 0x46, 0xe8, 0x0c,
	0x3c, 0x04, 0xd0, 0x19, 0x78, 0x45, 0xce, 0x0b
	};

/* Buffer must be big enough to hold MAC */
uint8 wpipinput_08[] = {
	/* QoS Data + CF-Ack + CF-Poll frame */
	0xA8,
	/* To DS, From DS, Protected */
	0x43,
	/* Bogus Duration */
	0xab, 0xcd,
	/* A1 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* A2 */
	0x00, 0x10, 0x18, 0x09, 0xc9, 0x12,
	/* A3 */
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0,
	/* SeqCtl, unfragmented */
	0x12, 0x03,
	/* A4 */
	0x00, 0x10, 0x18, 0x08, 0x12, 0xa7,
	/* QoS, TID 7 */
	0x00, 0x07,
	/* KeyIndex 0 */
	0x00,
	/* Reserved */
	0x00,
	/* PN */
	0x39, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	/* Payload */
	0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xba,
	0x1a, 0x55, 0xd0, 0x2f, 0x85, 0xae, 0x96, 0x7b,
	0xb6, 0x2f, 0xb6, 0xcd, 0xa8, 0xeb, 0x7e, 0x78,
	0xa0, 0x50, 0x01,
	/* Space for WAPI MIC */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

uint8 wpipref_08[] = {
	0xa8, 0x43, 0xab, 0xcd, 0x00, 0x10, 0x18, 0x09,
	0xd5, 0xb0, 0x00, 0x10, 0x18, 0x09, 0xc9, 0x12,
	0x00, 0x10, 0x18, 0x09, 0xd5, 0xb0, 0x12, 0x03,
	0x00, 0x10, 0x18, 0x08, 0x12, 0xa7, 0x00, 0x07,
	0x00, 0x00, 0x39, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c, 0x36, 0x5c,
	0x36, 0x5c, 0x4f, 0xe4, 0x72, 0x34, 0x55, 0x42,
	0x80, 0x92, 0x62, 0x60, 0x0d, 0x7b, 0x47, 0xb4,
	0x99, 0x37, 0x3d, 0x81, 0xdd, 0x60, 0x3c, 0x6f,
	0xfc, 0x20, 0x8e, 0xb9, 0x7b, 0x98, 0x17, 0x56,
	0x6a, 0x28, 0xfd, 0x04, 0x95, 0x68, 0x36, 0xae,
	0x03, 0x74, 0x0f, 0x9d, 0x98
	};

typedef struct {
	uint8 *ek;
	uint8 *ick;
	uint16 il;	/* length of packet with MAC */
	uint8 *input;
	uint8 *ref;
} sms4_wpi_pkt_vector_t;

#define SMS4_WPI_PKT_VECTOR_ENTRY(x)    \
	{ wpipek_##x, wpipick_##x, sizeof(wpipinput_##x), \
		wpipinput_##x, wpipref_##x }

sms4_wpi_pkt_vector_t sms4_wpi_pkt_vec[] = {
    SMS4_WPI_PKT_VECTOR_ENTRY(00),
    SMS4_WPI_PKT_VECTOR_ENTRY(03),
    SMS4_WPI_PKT_VECTOR_ENTRY(04),
    SMS4_WPI_PKT_VECTOR_ENTRY(05),
    SMS4_WPI_PKT_VECTOR_ENTRY(06),
    SMS4_WPI_PKT_VECTOR_ENTRY(07),
    SMS4_WPI_PKT_VECTOR_ENTRY(08)
    };

#define NUM_SMS4_WPI_PKT_VECTORS  (sizeof(sms4_wpi_pkt_vec)/sizeof(sms4_wpi_pkt_vec[0]))

#endif /* BCMSMS4_TEST */
