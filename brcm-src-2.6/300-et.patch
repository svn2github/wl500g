diff -urBp '-x.*' src/et-5.10.56.46/sys/etc47xx.c src/et/sys/etc47xx.c
--- src/et-5.10.56.46/sys/etc47xx.c	2009-08-27 07:52:07.000000000 +0400
+++ src/et/sys/etc47xx.c	2009-10-10 19:52:56.000000000 +0400
@@ -98,7 +98,7 @@ static void chipphyforce(struct bcm4xxx
 static void chipphyadvertise(struct bcm4xxx *ch, uint phyaddr);
 
 /* chip interrupt bit error summary */
-#define	I_ERRORS	(I_PC | I_PD | I_DE | I_RU | I_RO | I_XU)
+#define	I_ERRORS	(I_PC | I_PD | I_DE | I_RU | I_RO | I_XU | I_TO)
 #define	DEF_INTMASK	(I_XI | I_RI | I_ERRORS)
 
 struct chops bcm47xx_et_chops = {
@@ -130,6 +130,8 @@ struct chops bcm47xx_et_chops = {
 
 static uint devices[] = {
 	BCM47XX_ENET_ID,
+	BCM4402_ENET_ID,
+	BCM4401_ENET_ID,
 	0x0000 };
 
 static bool
@@ -202,6 +204,10 @@ chipattach(etc_info_t *etc, void *osh, v
 	etc->nicmode = !(ch->sih->bustype == SI_BUS);
 	etc->coreunit = si_coreunit(ch->sih);
 	etc->boardflags = getintvar(ch->vars, "boardflags");
+
+	/* set boardflags for 5365 and 5350 */
+	if (etc->chip == BCM5365_CHIP_ID || etc->chip == BCM5350_CHIP_ID)
+		etc->boardflags |= BFL_ENETROBO | BFL_ENETVLAN;
 
 	boardflags = etc->boardflags;
 	boardtype = ch->sih->boardtype;
@@ -409,13 +415,16 @@ chiplongname(struct bcm4xxx *ch, char *b
 	char *s;
 
 	switch (ch->etc->deviceid) {
+	case BCM4402_ENET_ID:
+		s = "BCM4402";
+		break;
 	case BCM47XX_ENET_ID:
 	default:
-		s = "Broadcom BCM47xx 10/100 Mbps Ethernet Controller";
+		s = "BCM47xx";
 		break;
 	}
 
-	strncpy(buf, s, bufsize);
+	snprintf(buf, bufsize, "Broadcom %s 10/100 Mbps Ethernet Controller", s);
 	buf[bufsize - 1] = '\0';
 }
 
@@ -526,6 +535,9 @@ chipinreset:
 			          "using 100Mhz\n",
 			          ch->etc->unit));
 		}
+	} else if (ch->etc->deviceid == BCM4402_ENET_ID) {
+		/* 4402 has 62.5Mhz SB clock and internal phy */
+		W_REG(ch->osh, &regs->mdiocontrol, 0x8d);
 	}
 
 	/* some chips have internal phy, some don't */
@@ -601,6 +613,9 @@ chipinit(struct bcm4xxx *ch, uint option
 	/* set tx watermark */
 	W_REG(ch->osh, &regs->txwatermark, 56);
 
+	/* set tx duplex */
+	W_REG(ch->osh, &regs->txcontrol, etc->duplex ? EXC_FD : 0);
+
 	/*
 	 * Optionally, disable phy autonegotiation and force our speed/duplex
 	 * or constrain our advertised capabilities.
@@ -618,6 +633,9 @@ chipinit(struct bcm4xxx *ch, uint option
 		/* post dma receive buffers */
 		dma_rxfill(ch->di);
 
+		/* setup timer interrupt */
+		W_REG(ch->osh, &regs->gptimer, 0);
+
 		/* lastly, enable interrupts */
 		if (options & ET_INIT_INTRON)
 			et_intrson(etc->et);
@@ -730,6 +748,15 @@ chipgetintrevents(struct bcm4xxx *ch, bo
 	if (intstatus & I_TO)
 		events |= INTR_TO;
 
+	/* check for rx after tx for 3 seconds on the unit 1, */
+	/* schedule reset if it's missing - possible rx stuck */
+	if (ch->etc->chip == BCM4710_CHIP_ID && ch->etc->unit == 1) {
+		if (intstatus & I_RI)
+			W_REG(ch->osh, &regs->gptimer, 0);
+		else if (!R_REG(ch->osh, &regs->gptimer))
+			W_REG(ch->osh, &regs->gptimer, 3 * 125000000);
+	}
+
 	return (events);
 }
 
@@ -790,6 +817,10 @@ chiperrors(struct bcm4xxx *ch)
 		ET_ERROR(("et%d: receive fifo overflow\n", etc->unit));
 		etc->rxoflo++;
 	}
+
+	if (intstatus & I_TO) {
+                ET_ERROR(("et%d: rx stuck suspected\n", etc->unit));
+	}
 
 	if (intstatus & I_XU) {
 		ET_ERROR(("et%d: transmit fifo underflow\n", etc->unit));
@@ -1111,9 +1142,17 @@ chipphyinit(struct bcm4xxx *ch, uint phy
 
 	phyid = chipphyrd(ch, phyaddr, 0x2);
 	phyid |=  chipphyrd(ch, phyaddr, 0x3) << 16;
+
 	if (phyid == 0x55210022) {
+		chipphywr(ch, phyaddr, 28, (uint16) (chipphyrd(ch, phyaddr, 28) & 0x0fff));
 		chipphywr(ch, phyaddr, 30, (uint16) (chipphyrd(ch, phyaddr, 30) | 0x3000));
 		chipphywr(ch, phyaddr, 22, (uint16) (chipphyrd(ch, phyaddr, 22) & 0xffdf));
+
+		chipphywr(ch, phyaddr, 28, (uint16) ((chipphyrd(ch, phyaddr, 28) & 0x0fff) | 0x1000));
+		chipphywr(ch, phyaddr, 29, 1);
+		chipphywr(ch, phyaddr, 30, 4);
+
+		chipphywr(ch, phyaddr, 28, (uint16) (chipphyrd( ch, phyaddr, 28) & 0x0fff));
 	}
 }
 
@@ -1154,6 +1193,13 @@ chipphyforce(struct bcm4xxx *ch, uint ph
 	}
 
 	chipphywr(ch, phyaddr, 0, ctl);
+
+	/* force Auto MDI-X for the AC101L phy */
+	if (chipphyrd(ch, phyaddr, 2) == 0x0022 && 
+		chipphyrd(ch, phyaddr, 3) == 0x5521)
+	{
+		chipphywr(ch, phyaddr, 23, 0x8000);
+	}
 }
 
 /* set selected capability bits in autonegotiation advertisement */
diff -urBp '-x.*' src/et-5.10.56.46/sys/etcgmac.c src/et/sys/etcgmac.c
--- src/et-5.10.56.46/sys/etcgmac.c	2009-08-27 07:52:07.000000000 +0400
+++ src/et/sys/etcgmac.c	2009-10-10 19:55:29.000000000 +0400
@@ -835,8 +835,10 @@ gmac_mf_add(ch_t *ch, struct ether_addr
 
 	/* add multicast addresses only */
 	if (!ETHER_ISMULTI(mcaddr)) {
+		char eabuf[32];
+
 		ET_ERROR(("et%d: adding invalid multicast address %s\n",
-		          ch->etc->unit, bcm_ether_ntoa(mcaddr, mac)));
+		          ch->etc->unit, bcm_ether_ntoa(mcaddr, eabuf)));
 		return (FAILURE);
 	}
 
diff -urBp '-x.*' src/et-5.10.56.46/sys/et_dbg.h src/et/sys/et_dbg.h
--- src/et-5.10.56.46/sys/et_dbg.h	2009-08-27 07:52:06.000000000 +0400
+++ src/et/sys/et_dbg.h	2009-10-10 19:02:09.000000000 +0400
@@ -16,8 +16,8 @@
 #ifndef _et_dbg_
 #define _et_dbg_
 
-#define	ET_ERROR(args)
-#define	ET_TRACE(args)
+#define	ET_ERROR(args)		if (!(et_msg_level & 1)) ; else printf args
+#define	ET_TRACE(args)		if (!(et_msg_level & 2)) ; else printf args
 #define	ET_PRHDR(msg, eh, len, unit)
 #define	ET_PRPKT(msg, buf, len, unit)
 
diff -urBp '-x.*' src/et-5.10.56.46/sys/et_linux.c src/et/sys/et_linux.c
--- src/et-5.10.56.46/sys/et_linux.c	2009-08-27 07:52:07.000000000 +0400
+++ src/et/sys/et_linux.c	2009-10-10 21:15:19.000000000 +0400
@@ -35,6 +35,7 @@
 #include <linux/sockios.h>
 #ifdef SIOCETHTOOL
 #include <linux/ethtool.h>
+#include <linux/mii.h>
 #endif /* SIOCETHTOOL */
 #include <linux/ip.h>
 
@@ -220,6 +221,7 @@ et_probe(struct pci_dev *pdev, const str
 	dev->base_addr = pci_resource_start(pdev, 0);
 	if ((et->regsva = ioremap_nocache(dev->base_addr, PCI_BAR0_WINSZ)) == NULL) {
 		ET_ERROR(("et%d: ioremap() failed\n", unit));
+		et->dev = NULL;
 		goto fail;
 	}
 
@@ -232,6 +234,7 @@ et_probe(struct pci_dev *pdev, const str
 	if ((et->etc = etc_attach((void *)et, pdev->vendor, pdev->device, unit, osh, et->regsva)) ==
 	    NULL) {
 		ET_ERROR(("et%d: etc_attach() failed\n", unit));
+		et->dev = NULL;
 		goto fail;
 	}
 
@@ -250,6 +253,7 @@ et_probe(struct pci_dev *pdev, const str
 	/* register our interrupt handler */
 	if (request_irq(pdev->irq, et_isr, IRQF_SHARED, dev->name, et)) {
 		ET_ERROR(("et%d: request_irq() failed\n", unit));
+		et->dev = NULL;
 		goto fail;
 	}
 	dev->irq = pdev->irq;
@@ -779,6 +783,7 @@ et_ioctl(struct net_device *dev, struct
 	char *buf;
 	int size, ethtoolcmd;
 	bool get, set;
+	struct mii_ioctl_data *data = (struct mii_ioctl_data *)&ifr->ifr_data;
 
 	et = ET_INFO(dev);
 
@@ -813,6 +818,14 @@ et_ioctl(struct net_device *dev, struct
 		size = sizeof(int) * 2;
 		get = FALSE; set = TRUE;
 		break;
+	case SIOCGMIIPHY:
+		data->phy_id = et->etc->phyaddr;
+	case SIOCGMIIREG:
+		data->val_out = (*et->etc->chops->phyrd)(et->etc->ch, data->phy_id, data->reg_num);
+		return 0;
+	case SIOCSMIIREG:
+		(*et->etc->chops->phywr)(et->etc->ch, data->phy_id, data->reg_num, data->val_in);
+		return 0;
 	default:
 		size = sizeof(int);
 		get = FALSE; set = TRUE;
@@ -1194,6 +1207,25 @@ et_sendup(et_info_t *et, struct sk_buff
 	if (flags)
 		goto err;
 
+	/* check for invalid data on the unit 1, workaround hw bug */
+	if (etc->chip == BCM4710_CHIP_ID && etc->unit == 1) 
+	{
+		uint8 *ether_dhost = ((struct ether_header*)skb->data)->ether_dhost;
+		if (	!(flags & (RXF_MULT | RXF_BRDCAST)) != !ETHER_ISMULTI(ether_dhost) ||
+			!(flags & RXF_BRDCAST) != !ETHER_ISBCAST(ether_dhost) ||
+			((flags & (RXF_MULT | RXF_BRDCAST | RXF_MISS)) == 0 &&
+				ether_cmp(ether_dhost, &etc->cur_etheraddr)))
+		{
+			bcm_ether_ntoa((struct ether_addr*)ether_dhost, eabuf);
+			ET_ERROR(("et%d: rx: bad dest address %s [%c%c%c]\n", 
+				etc->unit, eabuf, (flags & RXF_MULT) ? 'M' : ' ', 
+				(flags & RXF_BRDCAST) ? 'B' : ' ', (flags & RXF_MISS) ? 'P' : ' '));
+			/* schedule reset */
+			et->events |= INTR_ERROR;
+			goto err;
+		}
+	}
+
 	/* Extract priority from payload and store it out-of-band in skb->priority */
 	if (et->etc->qos)
 		pktsetprio(skb, TRUE);
