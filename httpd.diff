diff -BurpN -x'*.o' -x'*.orig' router/httpd/Makefile gateway/httpd/Makefile
--- router/httpd/Makefile	2004-11-11 07:27:08.000000000 +0000
+++ gateway/httpd/Makefile	2009-09-23 12:12:27.000000000 +0000
@@ -8,7 +8,7 @@
 
 CFLAGS	+= -I. -I$(TOP)/shared -I$(SRCBASE)/include -Wall -DFLASH_EMULATOR -DLinux -DMIPS
 #CFLAGS	+= -g -DDEBUG
-CFLAGS	+= -s -O2
+CFLAGS	+= -g -O2 $(EXTRACFLAGS)
 LDFLAGS	+= -L$(TOP)/nvram -L$(TOP)/shared -L$(TOP)/netconf
 
 vpath %.c $(TOP)/shared
@@ -24,5 +24,7 @@ install: all
 	install -D httpd $(INSTALLDIR)/usr/sbin/httpd
 	$(STRIP) $(INSTALLDIR)/usr/sbin/httpd
 
-httpd: httpd.o ej.o cgi.o web_ex.o shutils.o common.o nvram_f.o nvmap.o broadcom.o ralink.o
+common.o: common.c variables.c
+
+httpd: httpd.o ej.o cgi.o web_ex.o common.o nvram_f.o nvmap.o broadcom.o ralink.o
 	$(CC) -o $@ $^ $(LDFLAGS) -lnvram -lshared -lnetconf
diff -BurpN -x'*.o' -x'*.orig' router/httpd/broadcom.c gateway/httpd/broadcom.c
--- router/httpd/broadcom.c	2004-11-11 07:27:09.000000000 +0000
+++ gateway/httpd/broadcom.c	2008-01-06 11:26:57.000000000 +0000
@@ -592,6 +592,7 @@ ej_wan_iflist(int eid, webs_t wp, int ar
 #endif
 
 
+#ifdef REMOVE
 static int
 ej_wl_parse_str(int eid, webs_t wp, int argc, char_t **argv) 
 {
@@ -624,25 +625,30 @@ ej_wl_parse_str(int eid, webs_t wp, int 
 
 	return websWrite(wp, "%u", val);
 }
-
+#endif
 
 int
 ej_wl_sta_status(int eid, webs_t wp, char *ifname)
 {
-	int ret, i;
-	char bssid[32];
-	char bssinfobuf[2000];
-	wl_bss_info_t *info;
-	int val;
+	int ret;
+	unsigned char bssid[32];
 
 	// Get bssid
-	ret=wl_ioctl(ifname, WLC_GET_BSSID, bssid, sizeof(bssid));
-	//wl_scan_results();
+	ret = wl_ioctl(ifname, WLC_GET_BSSID, bssid, sizeof(bssid));
 
-	if (ret==0 && !(bssid[0]==0&&bssid[1]==0&&bssid[2]==0
-		&&bssid[3]==0&&bssid[4]==0&&bssid[5]==0)) 	
+	if (ret == 0 && memcmp(bssid, "\x00\x00\x00\x00\x00", 6))
 	{
-		return(websWrite(wp, "Status	: Connect to %s\n", nvram_safe_get("wl0_ssid")));
+		uint32 rssi;
+		
+		if (wl_ioctl(ifname, WLC_GET_RSSI, &rssi, sizeof(rssi)))
+			return(websWrite(wp, "Status	: Connected to %s\n"
+				     "AP	: %02x:%02x:%02x:%02x:%02x:%02x\n", 
+				nvram_safe_get("wl0_ssid"), 
+				bssid[0], bssid[1], bssid[2], bssid[3], bssid[4], bssid[5]));
+		else	return(websWrite(wp, "Status	: Connected to %s\n"
+				     "AP	: %02x:%02x:%02x:%02x:%02x:%02x\n"
+				     "Signal	: %d dBm\n",  nvram_safe_get("wl0_ssid"), 
+				bssid[0], bssid[1], bssid[2], bssid[3], bssid[4], bssid[5], rssi));
 	}
 	return(websWrite(wp, "Status	: Connecting to %s\n", nvram_safe_get("wl0_ssid")));
 }
@@ -693,7 +699,7 @@ ej_wl_status(int eid, webs_t wp, int arg
 	}
 	else if (nvram_match(strcat_r(prefix, "mode", tmp), "sta"))
 	{
-		ret+=websWrite(wp, "Mode	: Stations\n");
+		ret+=websWrite(wp, "Mode	: Station\n");
 		ret+=websWrite(wp, "Channel	: %d\n", ci.target_channel);
 		ret+=ej_wl_sta_status(eid, wp, name);
 		return ret;
@@ -891,17 +897,17 @@ ej_route_table(int eid, webs_t wp, int a
 
 			if (strstr(buff, "br0"))
 			{
-				ret += websWrite(wp, "%-16s%-16s%-16s%-6s%-6d %-2d %7d LAN\n",
+				ret += websWrite(wp, "%-16s%-16s%-16s%-6s%-6d %-2d %7d LAN %s\n",
 				sdest, sgw,
 				inet_ntoa(mask),
-				flags, metric, ref, use);
+				flags, metric, ref, use, buff);
 			}
 			else if(!strstr(buff, "lo"))
 			{
-				ret += websWrite(wp, "%-16s%-16s%-16s%-6s%-6d %-2d %7d WAN\n",
+				ret += websWrite(wp, "%-16s%-16s%-16s%-6s%-6d %-2d %7d WAN %s\n",
 				sdest, sgw,
 				inet_ntoa(mask),
-				flags, metric, ref, use);
+				flags, metric, ref, use, buff);
 			}
 		}
 		nl++;
diff -BurpN -x'*.o' -x'*.orig' router/httpd/common.c gateway/httpd/common.c
--- router/httpd/common.c	2004-11-11 07:27:08.000000000 +0000
+++ gateway/httpd/common.c	2009-09-23 11:38:45.000000000 +0000
@@ -303,7 +303,8 @@ int CheckGroupVariables(int sid, struct 
    }      
    return 0;
 }
-
+
+#ifdef REMOVE_NVRAM   
 char *GetVariable(int sid, char *name)
 {
    struct variable *v;
@@ -329,13 +330,12 @@ char *GetVariable(int sid, char *name)
    return("");
    
 }
-
+
 void SetVariable(int sid, char *name, char *value)
 {
    nvram_set_x(svcLinks[sid].serviceId, name, value);	
 }
    
-#ifdef REMOVE_NVRAM   
 void SetGroupVariable(int sid, struct variable *gvs, char *name, char *value, char *action)
 {
    int groupCount;     
diff -BurpN -x'*.o' -x'*.orig' router/httpd/httpd.c gateway/httpd/httpd.c
--- router/httpd/httpd.c	2004-11-11 07:27:08.000000000 +0000
+++ gateway/httpd/httpd.c	2009-11-09 20:31:40.000000000 +0000
@@ -97,6 +97,7 @@ static void handle_request(void);
 int redirect = 1;
 char wan_if[16];
 int http_port=SERVER_PORT;
+static int server_port = SERVER_PORT; /* Port for SERVER USER interface */
 
 /* Added by Joey for handle one people at the same time */
 unsigned int login_ip=0;
@@ -413,10 +414,10 @@ handle_request(void)
 
     method = path = line;
     strsep(&path, " ");
-    while (*path == ' ') path++;
+    while (path && *path == ' ') path++;
     protocol = path;
     strsep(&protocol, " ");
-    while (*protocol == ' ') protocol++;
+    while (protocol && *protocol == ' ') protocol++;
     cp = protocol;
     strsep(&cp, " ");
     if ( !method || !path || !protocol ) {
@@ -474,7 +475,7 @@ handle_request(void)
 
     //printf("File: %s\n", file);
 
-    if (http_port==SERVER_PORT && !http_login_check())
+    if (http_port==server_port && !http_login_check())
     {
 	sprintf(line, "Please log out user, %s, first or wait for session timeout(60 seconds).", inet_ntoa(login_ip));
 
@@ -485,7 +486,7 @@ handle_request(void)
 	
     if ( (file[0] == '\0' || file[len-1] == '/'))
     {
-	if (strlen(wan_if)>0 && !is_connected() && !is_firsttime() && http_port==SERVER_PORT)
+	if (strlen(wan_if)>0 && !is_connected() && !is_firsttime() && http_port==server_port)
 	{
 		redirect=1;
 		file="WizardDetect.asp";
@@ -551,16 +552,17 @@ handle_request(void)
     }	
 }
 
-http_login_cache(usockaddr *u)
+int http_login_cache(usockaddr *u)
 {
     	login_ip_tmp = (unsigned int)(u->sa_in.sin_addr.s_addr);
     	//printf("client :%x\n", login_ip_tmp);
+    	return (login_ip_tmp != 0x100007f);
 }
 
 http_login(unsigned int ip)
 {
 
-	if (http_port!=SERVER_PORT || ip == 0x100007f) return;
+	if (http_port!=server_port || ip == 0x100007f) return;
 
 	login_ip = ip;
 	login_try = 0;
@@ -571,7 +573,7 @@ int http_login_check(void)
 {
 	time_t now;
 	
-	if (http_port!=SERVER_PORT || login_ip_tmp == 0x100007f) return 1;
+	if (http_port!=server_port || login_ip_tmp == 0x100007f) return 1;
 
 	http_login_timeout(login_ip_tmp);
 
@@ -593,7 +595,7 @@ http_login_timeout(unsigned int ip)
 
 	//printf("login : %x %x\n", now, login_timestamp);
 
-	if ((unsigned long)(now - login_timestamp)>60) //one minitues
+	if (ip != login_ip && (unsigned long)(now - login_timestamp)>60) //one minitues
 	{
 		http_logout(login_ip);
 	}
@@ -613,16 +615,19 @@ http_logout(unsigned int ip)
 
 int is_auth(void)
 {
-	if (http_port==SERVER_PORT ||
+	if (http_port==server_port ||
 		strcmp(nvram_get_x("PrinterStatus", "usb_webhttpcheck_x"), "1")==0) return 1;
 	else return 0;
 }
 
-int is_phyconnected(void)
+static int is_phyconnected(void)
 {	
 	int fd, err;
 	struct ifreq ifr;
 	struct ethtool_cmd ecmd;
+	
+	if (strstr(wan_if, "vlan"))
+		return 1;
 
 	memset(&ifr, 0, sizeof(ifr));
 
@@ -654,6 +659,7 @@ int is_phyconnected(void)
 	}
 }
 
+#ifdef REMOVE
 int is_fileexist(char *filename)
 {
 	FILE *fp;
@@ -664,6 +670,7 @@ int is_fileexist(char *filename)
 	fclose(fp);
 	return 1;
 }
+#endif
 
 int is_connected(void)
 {
@@ -671,7 +678,7 @@ int is_connected(void)
 	char line[128], *reason;
 
 	/* check if physical connection exist */
-	if (!is_phyconnected()) return 0;
+	/* if (!is_phyconnected()) return 0; */
 	
 	/* check if connection static is CONNECTED */
 	if (strcmp(nvram_get_x("WANIPAddress", "wan_status_t"), "Disconnected")==0)
@@ -704,7 +711,16 @@ int main(int argc, char **argv)
 	int conn_fd;
 	socklen_t sz = sizeof(usa);
 	char pidfile[32];
+	pid_t parent;
 
+	server_port = atoi(nvram_get_x("", "http_lanport"));
+    if (server_port)
+      http_port = server_port;
+    else
+      server_port = http_port;
+      
+    
+    
 	// Added by Joey for handling WAN Interface 
 	// usage: httpd [wan interface] [port]
 	if (argc>2) http_port=atoi(argv[2]);
@@ -716,6 +732,8 @@ int main(int argc, char **argv)
 
 	/* Ignore broken pipes */
 	signal(SIGPIPE, SIG_IGN);
+	/* Prevent child zombies */
+	signal(SIGCHLD, SIG_IGN);
 
 	/* Initialize listen socket */
 	if ((listen_fd = initialize_listen_socket(&usa)) < 0) {
@@ -727,7 +745,7 @@ int main(int argc, char **argv)
 	{
 	FILE *pid_fp;
 	/* Daemonize and log PID */
-	//if (http_port==SERVER_PORT)
+	//if (http_port==server_port)
 	//{
 		if (daemon(1, 1) == -1) 
 		{
@@ -735,7 +753,7 @@ int main(int argc, char **argv)
 			exit(errno);
 		}
 	//}
-	if (http_port==SERVER_PORT)
+	if (http_port==server_port)
 		strcpy(pidfile, "/var/run/httpd.pid");
 	else sprintf(pidfile, "/var/run/httpd-%d.pid", http_port);
 
@@ -754,15 +772,31 @@ int main(int argc, char **argv)
 			perror("accept");
 			return errno;
 		}
+
+		if (http_login_cache(&usa))
+		{
+			parent = fork();
+			if (parent != 0)
+			{
+				close(conn_fd);
+				continue;
+			}
+			signal(SIGCHLD, SIG_DFL);
+			close(listen_fd);
+		} else
+			parent = 1;
+
 		if (!(conn_fp = fdopen(conn_fd, "r+"))) {
 			perror("fdopen");
 			return errno;
 		}		
-		http_login_cache(&usa);
+
 		handle_request();
 		fflush(conn_fp);
 		fclose(conn_fp);
 		close(conn_fd);
+
+		if (!parent) return 0;
 	}
 
 	shutdown(listen_fd, 2);
diff -BurpN -x'*.o' -x'*.orig' router/httpd/nvmap.c gateway/httpd/nvmap.c
--- router/httpd/nvmap.c	2004-11-11 07:27:09.000000000 +0000
+++ gateway/httpd/nvmap.c	2009-09-23 12:03:08.000000000 +0000
@@ -1,5 +1,6 @@
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <bcmnvram.h>
 
 
@@ -99,8 +100,10 @@ struct nvmap maps[] = {
 { "Storage", "x_AccUser6_Write", "sh_accuser_write_x6"},
 { NULL, NULL, NULL }};
 
+char *mac_conv(char *mac_name, int idx, char *buf);
+
 /* This function is used to map nvram value from asus to Broadcom */
-void readFromNvram()
+static void readFromNvram()
 {	
 	char tmpstr[32], tmpstr1[32], macbuf[18];
 	char list[2048];
diff -BurpN -x'*.o' -x'*.orig' router/httpd/nvram_f.c gateway/httpd/nvram_f.c
--- router/httpd/nvram_f.c	2004-11-11 07:27:08.000000000 +0000
+++ gateway/httpd/nvram_f.c	2009-09-23 11:59:41.000000000 +0000
@@ -81,13 +81,13 @@ char *strtrim(char *str)
    return (str);
 }
 
+#ifdef REMOVE
 char *strtrim_c(char *str)
 {
    int i;
   
    return(str);
 
-#ifdef REMOVE   
    i=strlen(str)-1;
    	
    while(i>0)
@@ -100,7 +100,6 @@ char *strtrim_c(char *str)
       i--;
    }
    return (str);
-#endif   
 }
 
 
@@ -147,6 +146,7 @@ err:
    if (orig) env->next = orig;
    return(0);                
 }
+#endif	// REMOVE
 
 
 /*
diff -BurpN -x'*.o' -x'*.orig' router/httpd/shutils.c gateway/httpd/shutils.c
--- router/httpd/shutils.c	2004-11-11 07:27:08.000000000 +0000
+++ gateway/httpd/shutils.c	2008-01-06 11:26:57.000000000 +0000
@@ -125,6 +125,8 @@ _eval(char *const argv[], char *path, in
 		close(STDIN_FILENO);
 		setsid();
 
+		fd = open("/dev/null", O_RDWR); /* stdin */
+		
 		/* Redirect stdout to <path> */
 		if (path) {
 			flags = O_WRONLY | O_CREAT;
diff -BurpN -x'*.o' -x'*.orig' router/httpd/variables.c gateway/httpd/variables.c
--- router/httpd/variables.c	2004-11-15 08:06:01.000000000 +0000
+++ gateway/httpd/variables.c	2009-04-08 21:01:03.000000000 +0000
@@ -455,6 +455,8 @@
                 {"dhcp_staticmac_x", "14", validate_hwaddr, NULL, FALSE, 0x0},
             
                 {"dhcp_staticip_x", "15", validate_ipaddr, NULL, FALSE, 0x0},
+            
+                {"dhcp_staticname_x", "32", validate_string, ARGV("32"), FALSE, 0x0},
                             
       {0,0,0,0,0}
       };      
@@ -477,7 +479,9 @@
         
       struct variable variables_DeviceSecurity11a_ACLList[] = {          
       
-                {"wl_maclist_x", "32", validate_hwaddr, NULL, FALSE, 0x0},
+                {"wl_maclist_x", "20", validate_hwaddr, NULL, FALSE, 0x0},
+      
+                {"wl_macdesc_x", "40", validate_string,  ARGV("80"), FALSE, 0x0},
                             
       {0,0,0,0,0}
       };      
@@ -534,7 +538,9 @@
         
       struct variable variables_DeviceSecurity11b_ACLList[] = {          
       
-                {"wl_maclist_x", "32", validate_hwaddr, NULL, FALSE, 0x0},
+                {"wl_maclist_x", "20", validate_hwaddr, NULL, FALSE, 0x0},
+      
+                {"wl_macdesc_x", "40", validate_string,  ARGV("80"), FALSE, 0x0},
                             
       {0,0,0,0,0}
       };      
@@ -588,11 +594,9 @@
                                                          
                     {"usb_ftppasswd_x", "18", validate_string, ARGV("16"), FALSE, 0x0},                                                                                                                     
                               
-             {"usb_ftpmaxuser_x", "7", validate_range, ARGV("0", "12", ""), FALSE , 0x0},                                          	                                                                      
-        	              
               {"usb_ftprights_x", "16", validate_choice, ARGV(                
               
-                   "Read/Write/Erase",
+                   "Write Only",
               
                    "Read/Write",
               
@@ -616,6 +620,26 @@
       {0,0,0,0,0}
       };      
         
+      struct variable variables_PrinterStatus_x_ExportsList[] = {          
+      
+                {"usb_nfslist_x", "80", validate_string, ARGV("80"), FALSE, 0x0},
+                            
+      {0,0,0,0,0}
+      };      
+        
+      struct variable variables_PrinterStatus_x_SharesList[] = {          
+      
+                {"usb_smbdir_x", "20", validate_string, ARGV("80"), FALSE, 0x0},
+      
+                {"usb_smbshare_x", "20", validate_string, ARGV("80"), FALSE, 0x0},
+      
+                {"usb_smblevel_x", "14", validate_choice, ARGV("Read Only", "Read/Write", 0), FALSE, 0x0},
+      
+                {"usb_smbdesc_x", "20", validate_string, ARGV("80"), FALSE, 0x0},
+                            
+      {0,0,0,0,0}
+      };      
+        
       struct variable variables_PrinterStatus_x_QRuleList[] = {          
       
                 {"qos_ipaddr_x", "16", validate_ipaddr, NULL, FALSE, 0x0},
@@ -957,6 +981,10 @@
                     
                 {"wan_pppoe_txonly_x", "", validate_string, ARGV(""), FALSE, FALSE}, 
                          
+                {"wan_pppoe_options_x", "", validate_string, ARGV("255"), FALSE, FALSE}, 
+                         
+                {"wan_pptp_options_x", "", validate_string, ARGV("255"), FALSE, FALSE}, 
+                         
              {"wan_pppoe_mtu", "", validate_range, ARGV("576", "1492", ""), FALSE, FALSE},
                      
              {"wan_pppoe_mru", "", validate_range, ARGV("576", "1492", ""), FALSE, FALSE},
@@ -1074,6 +1102,8 @@
                        {"", "", validate_range, ARGV("0","65535"), FALSE, FALSE},                                                                                            
                                      
                  {"fw_enable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+                                     
+                 {"fw_dos_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
               	
               {"fw_log_x", "", validate_choice, ARGV(              
               
@@ -1097,6 +1127,13 @@
                                
                  {"misc_ping_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
                                
+             {"misc_conntrack_x", "", validate_range, ARGV("1024", "16384", ""), FALSE, FALSE},
+
+	{"recent_ssh_enable", "", validate_range, ARGV("0", "1"), FALSE, FALSE},
+	{"recent_ftp_enable", "", validate_range, ARGV("0", "1"), FALSE, FALSE},
+	{"recent_seconds", "", validate_range, ARGV("1", "65535"), FALSE, FALSE},
+	{"recent_hitcount", "", validate_range, ARGV("1", "65535"), FALSE, FALSE},
+
                  {"fw_wl_enable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
               
                 {"filter_wl_date_x", "", validate_portrange, NULL, FALSE, FALSE},
@@ -1110,6 +1147,14 @@
                    "ACCEPT",
               
               0), FALSE, FALSE},
+            	
+              {"filter_vs_default_x", "", validate_choice, ARGV(              
+              
+                   "DROP",
+              
+                   "ACCEPT",
+              
+              0), FALSE, FALSE},
            
                 {"filter_wl_icmp_x", "", validate_portrange, NULL, FALSE, FALSE},
             
@@ -1318,6 +1363,10 @@
    
       struct variable variables_RouterConfig[] = {
                        
+                 {"dr_enable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+                       
+                 {"mr_enable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+                       
                  {"sr_enable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
               	
               {"sr_rip_x", "", validate_choice, ARGV(              
@@ -1470,7 +1519,7 @@
                                              
                        {"", "", validate_range, ARGV("0","65535"), FALSE, FALSE},                                                                                            
                      
-      {"GWStatic", "Group", validate_group, ARGV(variables_RouterConfig_GWStatic, "6", "59", "sr_num_x"), FALSE, FALSE},     
+      {"GWStatic", "Group", validate_group, ARGV(variables_RouterConfig_GWStatic, "16", "59", "sr_num_x"), FALSE, FALSE},     
        
       {"StaticRoute", "Group", validate_group, ARGV(variables_RouterConfig_StaticRoute, "16", "46", "dr_staticnum_x"), FALSE, FALSE},     
        
@@ -1502,6 +1551,8 @@
                     {"lan_hostname", "", validate_string, ARGV("32"), FALSE, FALSE},                                                                                                                   
                  
                 {"lan_gateway", "", validate_ipaddr, NULL, FALSE, FALSE},
+                 
+                {"lan_dns", "", validate_ipaddr, NULL, FALSE, FALSE},
                              
                  {"dhcp_enable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
                                
@@ -1555,97 +1606,20 @@
                     
       {"DmzDHCPLog", "Status", NULL, ARGV("dleases.log",""), FALSE, FALSE},
                  
-                 {"upnp_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
-              
+                 {"upnp_enable", "", validate_range, ARGV("0","2"), FALSE, FALSE},                                                       
+		{"udpxy_enable_x", "", validate_range, ARGV("0","65535"), FALSE, FALSE},
+		{"udpxy_wan_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},
                 {"log_ipaddr", "", validate_ipaddr, NULL, FALSE, FALSE},
             	
-              {"time_zone", "", validate_choice, ARGV(              
-              
-                   "UCT11:(GMT-11:00) Midway Island, Samoa",
-              
-                   "UCT10:(GMT-10:00) Hawaii",
-              
-                   "NAST9NADT:(GMT-09:00) Alaska",
-              
-                   "PST8PDT:(GMT-08:00) Pacific Time",
-              
-                   "MST7MDT:(GMT-07:00) Mountain Time",
-              
-                   "MST7:(GMT-07:00) Arizona",
-              
-                   "CST6CDT:(GMT-06:00) Central Time",
-              
-                   "UCT6:(GMT-06:00) Middle America",
-              
-                   "UCT5:(GMT-05:00) Indiana East, Colombia",
-              
-                   "EST5EDT:(GMT-05:00) Eastern Time",
-              
-                   "AST4ADT:(GMT-04:00) Atlantic Time, Brazil West",
-              
-                   "UCT4:(GMT-04:00) Bolivia, Venezuela",
-              
-                   "UCT3:(GMT-03:00) Guyana",
-              
-                   "EBST3EBDT:(GMT-03:00) Brazil East, Greenland",
-              
-                   "NORO2:(GMT-02:00) Mid-Atlantic",
-              
-                   "UCT0:(GMT) Gambia, Liberia, Morocco",
-              
-                   "GMT0BST:(GMT) England",
-              
-                   "MET-1METDST:(GMT+01:00) Netherland, France, Italy",
-              
-                   "MEZ-1MESZ:(GMT+01:00) Germany",
-              
-                   "UCT-1:(GMT+01:00) Tunisia",
-              
-                   "EET-2EETDST:(GMT+02:00) Greece, Ukraine, Turkey",
-              
-                   "SAST-2:(GMT+02:00) South Africa",
-              
-                   "IST-3IDT:(GMT+03:00) Iraq, Jordan, Kuwait",
-              
-                   "MSK-3MSD:(GMT+03:00) Moscow Winter Time",
-              
-                   "UCT-4:(GMT+04:00) Armenia",
-              
-                   "UCT-5:(GMT+05:00) Pakistan, Russia",
-              
-                   "UCT-6:(GMT+06:00) Bangladesh, Russia",
-              
-                   "UCT-7:(GMT+07:00) Thailand, Russia",
-              
-                   "CST-8:(GMT+08:00) China Coast, Hong Kong",
-              
-                   "CCT-8:(GMT+08:00) Taipei",
-              
-                   "SST-8:(GMT+08:00) Singapore",
-              
-                   "WAS-8WAD:(GMT+08:00) Australia West",
-              
-                   "JST-9:(GMT+09:00) Japan, Korea",
-              
-                   "KST-9KDT:(GMT+09:00) Korean",
-              
-                   "UCT-10:(GMT+10:00) Guam, Russia",
-              
-                   "EST-10EDT:(GMT+10:00) Australia",
-              
-                   "UCT-11:(GMT+11:00) Solomon Islands",
-              
-                   "UCT-12:(GMT+12:00) Fiji",
-              
-                   "NZST-12NZDT:(GMT+12:00) New Zealand",
-              
-              0), FALSE, FALSE},
+              {"time_zone", "", validate_string, ARGV("255"), FALSE, FALSE},
                                                    
                     {"time_interval", "", validate_string, ARGV(""), FALSE, FALSE},                                                                                                                   
                                                          
                     {"ntp_server0", "", validate_string, ARGV(""), FALSE, FALSE},                                                                                                                   
                                                          
                     {"ntp_server1", "", validate_string, ARGV(""), FALSE, FALSE},                                                                                                                   
+
+             {"ntp_interval_x", "", validate_range, ARGV("1", "144"), FALSE, FALSE},
                                   
                  {"", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
               
@@ -1665,6 +1639,8 @@
               
                    "WWW.ZONEEDIT.COM",
               
+                   "WWW.DNSOMATIC.COM",
+              
               0), FALSE, FALSE},
                                                    
                     {"ddns_username_x", "", validate_string, ARGV("32"), FALSE, FALSE},                                                                                                                   
@@ -1677,7 +1653,12 @@
               
       {"x_DDNSStatus", "Status", NULL, ARGV("ddns.log","DDNSStatus"), FALSE, FALSE},
  
-      {"ManualDHCPList", "Group", validate_group, ARGV(variables_LANHostConfig_ManualDHCPList, "8", "29", "dhcp_staticnum_x"), FALSE, FALSE},     
+	{"snmp_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+	{"snmp_community", "", validate_string, ARGV("32"), FALSE,FALSE},
+	{"snmp_contact", "", validate_string, ARGV("80"), FALSE,FALSE},
+	{"snmp_location", "", validate_string, ARGV("80"), FALSE,FALSE},
+	
+      {"ManualDHCPList", "Group", validate_group, ARGV(variables_LANHostConfig_ManualDHCPList, "32", "61", "dhcp_staticnum_x"), FALSE, FALSE},     
        
       {"DmzManualDHCPList", "Group", validate_group, ARGV(variables_LANHostConfig_DmzManualDHCPList, "8", "29", "DmzManualDHCPCount"), FALSE, FALSE},     
        
@@ -1793,7 +1774,7 @@
                     
                 {"", "", validate_string, ARGV(""), FALSE, FALSE}, 
              
-      {"ACLList", "Group", validate_group, ARGV(variables_DeviceSecurity11a_ACLList, "64", "32", "wl_macnum_x"), FALSE, FALSE},     
+      {"ACLList", "Group", validate_group, ARGV(variables_DeviceSecurity11a_ACLList, "64", "60", "wl_macnum_x"), FALSE, FALSE},     
        
       {"AESList", "Group", validate_group, ARGV(variables_DeviceSecurity11a_AESList, "64", "58", "AESListCount"), FALSE, FALSE},     
                         
@@ -1869,9 +1850,11 @@
               
                    "1:Auto",
               
-                   "4:54G Only",
+                   "4:Performance",
               
                    "0:802.11B Only",
+
+                   "5:54G LRS",
               
               0), FALSE, FALSE},
            
@@ -1890,6 +1873,16 @@
                    "radius:Radius with 802.1x",
               
               0), FALSE, FALSE},
+
+              {"wl_wpa_mode", "", validate_choice, ARGV(
+
+                   "0:WPA-Auto-Personal",
+
+                   "1:WPA-Personal",
+
+                   "2:WPA2-Personal",
+
+              0), FALSE, FALSE},
            	
               {"wl_crypto", "", validate_choice, ARGV(              
               
@@ -1980,6 +1973,36 @@
                    "54000000:54",
               
               0), FALSE, FALSE},
+              	
+              {"wl_mrate", "", validate_choice, ARGV(              
+              
+                   "0:Auto",
+              
+                   "1000000:1",
+              
+                   "2000000:2",
+              
+                   "5500000:5.5",
+              
+                   "6000000:6",
+              
+                   "9000000:9",
+              
+                   "11000000:11",
+              
+                   "12000000:12",
+              
+                   "18000000:18",
+              
+                   "24000000:24",
+              
+                   "36000000:36",
+              
+                   "48000000:48",
+              
+                   "54000000:54",
+              
+              0), FALSE, FALSE},
            	
               {"wl_rateset", "", validate_choice, ARGV(              
               
@@ -1990,6 +2013,16 @@
                    "12:1, 2 Mbps",
               
               0), FALSE, FALSE},
+           	
+              {"wl_reg_mode", "", validate_choice, ARGV(              
+              
+                   "off:Off",
+              
+                   "d:802.11d",
+              
+                   "h:802.11h",
+              
+              0), FALSE, FALSE},
                         
              {"wl_frag", "", validate_range, ARGV("256", "2346", ""), FALSE, FALSE},
                      
@@ -2064,6 +2097,16 @@
                  {"wl_preauth", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
                                                       
                     {"wl_net_reauth", "", validate_string, ARGV(""), FALSE, FALSE},                                                                                                                   
+
+		{"wl_nbw", "20", validate_string, ARGV(""), FALSE, FALSE},
+		{"wl_nctrlsb", "none", validate_string, ARGV(""), FALSE, FALSE},
+		{"wl_nband", "2", validate_string, ARGV(""), FALSE, FALSE},
+		{"wl_nmcsidx", "-1", validate_string, ARGV(""), FALSE, FALSE},
+		{"wl_nmode", "-1", validate_string, ARGV(""), FALSE, FALSE},
+		{"wl_leddc", "0x640000", validate_string, ARGV(""), FALSE, FALSE},
+		{"wl_wme_apsd", "on", validate_string, ARGV(""), FALSE, FALSE},
+		{"wl_sta_retry_time", "5", validate_string, ARGV(""), FALSE, FALSE},
+
                   
       {"RBRList", "Group", validate_group, ARGV(variables_WLANConfig11b_RBRList, "16", "32", "wl_wdsnum_x"), FALSE, FALSE},     
                         
@@ -2100,7 +2143,7 @@
                     
                 {"", "", validate_string, ARGV(""), FALSE, FALSE}, 
              
-      {"ACLList", "Group", validate_group, ARGV(variables_DeviceSecurity11b_ACLList, "64", "32", "wl_macnum_x"), FALSE, FALSE},     
+      {"ACLList", "Group", validate_group, ARGV(variables_DeviceSecurity11b_ACLList, "64", "60", "wl_macnum_x"), FALSE, FALSE},     
        
       {"AESList", "Group", validate_group, ARGV(variables_DeviceSecurity11b_AESList, "64", "58", "AESListCount"), FALSE, FALSE},     
                         
@@ -2256,21 +2299,44 @@
             
       {"x_FEject", "Status", NULL, ARGV("ddns.log","DDNSStatus"), FALSE, FALSE},
                  
-                 {"usb_ftpenable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+                 {"usb_storage_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+                 {"usb_smbenable_x", "", validate_range, ARGV("0","2"), FALSE, FALSE},                                                       
+                 {"usb_smbhidden_x", "", validate_range, ARGV("0","2"), FALSE, FALSE},                                                       
+                 {"usb_smbwrkgrp_x", "", validate_string, ARGV(""), FALSE, FALSE},                                                       
+                 {"usb_smbcpage_x", "", validate_string, ARGV(""), FALSE, FALSE},                                                       
+                 {"x_SharesList", "Group", validate_group, ARGV(variables_PrinterStatus_x_SharesList, "32", "80", "usb_smbnum_x"), FALSE, FALSE},                                    
+                 
+                 {"usb_ftpenable_x", "", validate_range, ARGV("0","2"), FALSE, FALSE},                                                       
                                
-                 {"usb_ftpanonymous_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+                 {"usb_ftpanonymous_x", "", validate_range, ARGV("0","3"), FALSE, FALSE},                                                       
                                
                  {"usb_ftpsuper_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
                            
              {"usb_ftpport_x", "", validate_range, ARGV("1", "65535", ""), FALSE, FALSE},
                      
-             {"usb_ftpmax_x", "", validate_range, ARGV("1", "12", ""), FALSE, FALSE},
+             {"usb_ftppubroot_x", "", validate_string, ARGV(""), FALSE, FALSE},                                                    
+                     
+             {"usb_ftppvtroot_x", "", validate_string, ARGV(""), FALSE, FALSE},                                                    
+                     
+             {"usb_ftpanonroot_x", "", validate_string, ARGV(""), FALSE, FALSE},                                                    
+                     
+             {"usb_ftpdirlist_x", "", validate_range, ARGV("0","2"), FALSE, FALSE},
+
+             {"usb_ftpmax_x", "", validate_range, ARGV("0", "12", ""), FALSE, FALSE},
+                     
+             {"usb_ftpipmax_x", "", validate_range, ARGV("0", "12", ""), FALSE, FALSE},
                                  
                        {"usb_ftptimeout_x", "", validate_range, ARGV("0","65535"), FALSE, FALSE},                                                                                            
                                              
                        {"usb_ftpstaytimeout_x", "", validate_range, ARGV("0","65535"), FALSE, FALSE},                                                                                            
                                                             
                     {"usb_ftpscript_x", "", validate_string, ARGV(""), FALSE, FALSE},                                                                                                                   
+                                                            
+                    {"usb_ftpscript_x", "", validate_string, ARGV(""), FALSE, FALSE},                                                                                                                   
+                     
+             {"usb_ftprate_x", "", validate_range, ARGV("0", "99999", ""), FALSE, FALSE},
+                     
+             {"usb_ftpanonrate_x", "", validate_range, ARGV("0", "99999", ""), FALSE, FALSE},
                  	
               {"", "", validate_choice, ARGV(              
               
@@ -2296,14 +2362,27 @@
                                              
                        {"qos_urulenum_x", "", validate_range, ARGV("0","65535"), FALSE, FALSE},                                                                                            
                      
-      {"x_FUserList", "Group", validate_group, ARGV(variables_PrinterStatus_x_FUserList, "32", "59", "usb_ftpnum_x"), FALSE, FALSE},     
-       
-      {"x_FBanIPList", "Group", validate_group, ARGV(variables_PrinterStatus_x_FBanIPList, "16", "24", "usb_bannum_x"), FALSE, FALSE},     
+      {"x_FUserList", "Group", validate_group, ARGV(variables_PrinterStatus_x_FUserList, "32", "52", "usb_ftpnum_x"), FALSE, FALSE},     
        
-      {"x_QRuleList", "Group", validate_group, ARGV(variables_PrinterStatus_x_QRuleList, "8", "44", "qos_rulenum_x"), FALSE, FALSE},     
+      {"x_FBanIPList", "Group", validate_group, ARGV(variables_PrinterStatus_x_FBanIPList, "16", "24", "usb_bannum_x"), FALSE, FALSE},     
+      
+      {"usb_nfsenable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},                                                       
+
+      {"x_ExportsList", "Group", validate_group, ARGV(variables_PrinterStatus_x_ExportsList, "32", "80", "usb_nfsnum_x"), FALSE, FALSE},     
+              
+      {"x_QRuleList", "Group", validate_group, ARGV(variables_PrinterStatus_x_QRuleList, "32", "44", "qos_rulenum_x"), FALSE, FALSE},     
        
-      {"x_UQRuleList", "Group", validate_group, ARGV(variables_PrinterStatus_x_UQRuleList, "8", "28", "qos_urulenum_x"), FALSE, FALSE},     
+      {"x_UQRuleList", "Group", validate_group, ARGV(variables_PrinterStatus_x_UQRuleList, "32", "28", "qos_urulenum_x"), FALSE, FALSE},     
                         
+	{"telnet_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	{"ssh_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	{"ssh_port", "", validate_range, ARGV("1", "65535", ""), FALSE, FALSE},
+	{"infosvr_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	{"lpr_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	{"raw_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	{"audio_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	{"usb20_disable_x", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	
       { 0, 0, 0, 0, 0, 0}
       };
       
@@ -4221,6 +4300,25 @@ struct action actions_WLANAuthentication
 struct action actions_PrinterStatus[];
 struct variable variables_WLANAuthentication11b[];
 
+struct variable variables_IPv6Config[] = {
+
+	{"ipv6_lan_addr", "", validate_string, ARGV("40"), FALSE, FALSE},
+	{"ipv6_lan_netsize", "", validate_range, ARGV("1", "127"), FALSE, FALSE},
+	{"ipv6_wan_addr", "", validate_string, ARGV("40"), FALSE, FALSE},
+	{"ipv6_wan_netsize", "", validate_range, ARGV("1", "127"), FALSE, FALSE},
+	{"ipv6_wan_router", "", validate_string, ARGV("40"), FALSE, FALSE},
+	{"ipv6_sit_enable", "", validate_range, ARGV("0","1"), FALSE, FALSE},
+	{"ipv6_sit_remote", "", validate_ipaddr, NULL, FALSE, FALSE},
+	{"ipv6_sit_localaddr", "", validate_string, ARGV("40"), FALSE, FALSE},
+	{"ipv6_sit_netsize", "", validate_range, ARGV("1", "127"), FALSE, FALSE},
+	{"ipv6_sit_remoteaddr", "", validate_string, ARGV("40"), FALSE, FALSE},
+	{"ipv6_sit_mtu", "", validate_range, ARGV("0", "1480"), FALSE, FALSE},
+	{"ipv6_sit_ttl", "", validate_range, ARGV("0", "255"), FALSE, FALSE},
+	{"ipv6_radvd_enable", "", validate_range, ARGV("0", "1"), FALSE, FALSE},
+	
+	{ 0, 0, 0, 0}
+	};
+struct action actions_IPv6Config[];
 
 struct svcLink svcLinks[] = {            
            {"General", 	"urn:schemas-upnp-org:service:General:1", variables_General, actions_General},
@@ -4239,6 +4337,7 @@ struct svcLink svcLinks[] = {           
            {"DeviceSecurity11b", "urn:schemas-upnp-org:service:DeviceSecurity:1", variables_DeviceSecurity11b, actions_DeviceSecurity},
            {"WLANAuthentication11b", "urn:schemas-upnp-org:service:WLANAuthentication:1", variables_WLANAuthentication11b, actions_WLANAuthentication},         
            {"PrinterStatus", "urn:schemas-upnp-org:service:PrinterStatus:1", variables_PrinterStatus, actions_PrinterStatus},
+	   {"IPv6Config", "urn::IPv6Config:1", variables_IPv6Config, actions_IPv6Config},
            {0, 0, 0}
       };
 	
diff -BurpN -x'*.o' -x'*.orig' router/httpd/web_ex.c gateway/httpd/web_ex.c
--- router/httpd/web_ex.c	2004-12-01 13:58:17.000000000 +0000
+++ gateway/httpd/web_ex.c	2009-10-10 11:03:08.000000000 +0000
@@ -48,6 +48,7 @@
 
 #define sys_restart() kill(1, SIGHUP)
 #define sys_reboot() kill(1, SIGTERM)
+#define sys_forcereboot() kill(1, SIGABRT)
 
 #ifdef WEBS
 #define init_cgi(query)
@@ -78,6 +79,8 @@ static int apply_cgi_group(webs_t wp, in
 static int nvram_generate_table(webs_t wp, char *serviceId, char *groupName);
 
 static int ej_select_country(int eid, webs_t wp, int argc, char_t **argv);
+static int wl_channels_in_country(char *abbrev, int channels[]);
+static int wl_channels_in_country_asus(char *abbrev, int channels[]);
 
 char ibuf[8192];
 char ibuf2[8192];
@@ -98,7 +101,7 @@ char *groupItem[MAX_GROUP_ITEM];
 char urlcache[128];
 char *next_host;
 int delMap[MAX_GROUP_COUNT];
-char SystemCmd[64];
+char SystemCmd[128];
 char UserID[32]="";
 char UserPass[32]="";
 char ProductID[32]="";
@@ -124,7 +127,7 @@ reltime(unsigned int seconds)
 	static char s[] = "XXXXX days, XX hours, XX minutes, XX seconds";
 	char *c = s;
 
-#ifdef SHOWALL
+#if 1 //def SHOWALL
 	if (seconds > 60*60*24) {
 		c += sprintf(c, "%d days, ", seconds / (60*60*24));
 		seconds %= 60*60*24;
@@ -151,7 +154,7 @@ reltime(unsigned int seconds)
  *	Redirect the user to another webs page
  */
  
-char *getip(FILE *fp)
+static char *getip(FILE *fp)
 {     
     //getpeername(fd, &addr, &addrlen);
     if (next_host==NULL || strcmp(next_host, "")==0)    
@@ -170,7 +173,10 @@ void websRedirect(webs_t wp, char_t *url
 {	
 	//printf("Redirect to : %s\n", url);	
 	websWrite(wp, T("<html><head>\r\n"));
-        websWrite(wp, T("<meta http-equiv=\"refresh\" content=\"0; url=http://%s/%s\">\r\n"), getip((FILE *)wp), url);
+	if (next_host && *next_host)
+        	websWrite(wp, T("<meta http-equiv=\"refresh\" content=\"0; url=http://%s/%s\">\r\n"), next_host, url);
+        else
+        	websWrite(wp, T("<meta http-equiv=\"refresh\" content=\"0; url=%s\">\r\n"), url);
         websWrite(wp, T("<meta http-equiv=\"Content-Type\" content=\"text/html\">\r\n"));
         websWrite(wp, T("</head></html>\r\n"));      
 	
@@ -203,15 +209,10 @@ void sys_script(char *name)
 
      if (strcmp(name,"syscmd.sh")==0)
      {
-	   if (strcmp(SystemCmd, "")!=0)
-	   {
-	   	sprintf(SystemCmd, "%s > /tmp/syscmd.log\n", SystemCmd);
-	   	system(SystemCmd);
-	   }	
-	   else
-	   {
-	   	system("echo None > /tmp/syscmd.log\n");
-	   }
+	   if (strcmp(SystemCmd, "")==0)
+		strcpy(SystemCmd, "echo None");
+	   sprintf(SystemCmd, "%s > /tmp/syscmd.log 2>&1\n", SystemCmd);
+	   system(SystemCmd);
      }
      else if (strcmp(name, "syslog.sh")==0)
      {
@@ -229,6 +230,7 @@ void sys_script(char *name)
      else if (strcmp(name, "lpr_remove")==0)
      {
 	   kill_pidfile_s("/var/run/lpdparent.pid", SIGUSR2);
+	   eval("killall","p910nd");
      }
      else if (strcmp(name, "wlan11a.sh")==0 || strcmp(name,"wlan11b.sh")==0)
      {
@@ -238,6 +240,11 @@ void sys_script(char *name)
      {
 		sys_refresh_lease();	
      }
+     else if (strcmp(name,"dnsmasq.sh")==0)
+     {
+	   kill_pidfile_s("/var/run/dnsmasq.pid", SIGALRM);
+	   sleep(1);
+     }
      else if (strcmp(name,"iptable.sh")==0) 
      {
 		// TODO	
@@ -474,6 +481,25 @@ ej_nvram_match_x(int eid, webs_t wp, int
 	return 0;
 }	
 
+static int
+ej_nvram_double_match_x(int eid, webs_t wp, int argc, char_t **argv)
+{
+	char *sid, *name, *match, *output;
+	char *sid2, *name2, *match2;
+
+	if (ejArgs(argc, argv, "%s %s %s %s %s %s %s", &sid, &name, &match, &sid2, &name2, &match2, &output) < 7) {
+		websError(wp, 400, "Insufficient args\n");
+		return -1;
+	}
+	
+	if (nvram_match_x(sid, name, match) && nvram_match_x(sid2, name2, match2))
+	{
+		return websWrite(wp, output);
+	}	
+
+	return 0;
+}
+
 /*
  * Example: 
  * wan_proto=dhcp
@@ -727,7 +753,7 @@ ej_uptime(int eid, webs_t wp, int argc, 
 	if (str) {
 		unsigned int up = atoi(str);
 		free(str);
-		sprintf(buf, "%s(%s since boot)", buf, reltime(up));
+		sprintf(buf, "%s (%s since boot)", buf, reltime(up));
 	}
 
 	ret = websWrite(wp, buf);  
@@ -1035,7 +1061,7 @@ static int dump_file(webs_t wp, char *fi
 	while (fgets(buf, MAX_LINE_SIZE, fp)!=NULL)
 	{	 	
 	    //printf("Read time: %s\n", buf);	    	    	    	   
-	    ret += websWrite(wp, buf);
+	    ret += websWrite(wp, "%s", buf);
 	}		    	                             		
 	 
 	fclose(fp);		
@@ -1444,14 +1470,15 @@ apply_cgi(webs_t wp, char_t *urlPrefix, 
 	   	sys_script(script);
 	}   
 	
-
-
-    	    	               
-        if (!strcmp(value, "  Save  ") || !strcmp(value, " Apply "))
+        if (!strcmp(value, "  Save  "))
         {
-
            strcpy(urlcache, next_url);
            websRedirect(wp, next_url);
+        } else 
+        if (!strcmp(value, " Apply "))
+        {
+           strcpy(urlcache, current_url);
+           websRedirect(wp, current_url);
         } 
         
     	else if(!strcmp(value, " Finish ")) websRedirect(wp, "SaveRestart.asp");
@@ -2116,7 +2143,7 @@ do_upgrade_cgi(char *url, FILE *stream)
 	{
                 websApply(stream, "Updating.asp"); 
 		sys_upgrade("/tmp/linux.trx");
-		sys_reboot();
+		sys_forcereboot();
 	}	
 	else    
 	{
@@ -2294,11 +2321,112 @@ do_prf_file(char *url, FILE *stream)
 {
 	sys_commit(NULL);
 	sys_download("/tmp/settings");
-	do_file(url, stream);
+	do_file("/tmp/settings", stream);
 	//unlink("/tmp/settings");
 }
 
 
+static void
+do_upload_file(char *upload_file, char *url, FILE *stream, int len, char *boundary)
+{
+	FILE *fifo = NULL;
+	char buf[1024];
+	int count, ret = EINVAL;
+
+	cprintf("Start upload\n");
+	/* Look for our part */
+	while (len > 0) 
+	{
+	     if (!fgets(buf, MIN(len + 1, sizeof(buf)), stream))
+	     {			
+			goto err;
+	     }			
+		
+	     len -= strlen(buf);
+		
+	     if (!strncasecmp(buf, "Content-Disposition:", 20) &&
+		    strstr(buf, "name=\"file\""))
+			break;			
+	}
+
+	/* Skip boundary and headers */
+	while (len > 0) {
+		if (!fgets(buf, MIN(len + 1, sizeof(buf)), stream))
+		{
+			goto err;
+		}		
+		len -= strlen(buf);
+		if (!strcmp(buf, "\n") || !strcmp(buf, "\r\n"))
+		{
+			break;
+		}
+	}
+
+	if (!(fifo = fopen(upload_file, "w"))) goto err;
+				
+	len -= strlen(boundary)+8;
+	cprintf("Upgrading %d\n", len);
+	while (len > 0)
+	{
+		count = fread(buf, 1, MIN(len, sizeof(buf)), stream);
+		fwrite(buf, 1, count, fifo);
+		len -= count;
+	}
+	fread(buf, 1, strlen(boundary)+8, stream);
+	fflush(fifo);
+	ret = 0;
+ err:
+	if (fifo)
+	   fclose(fifo);
+		
+	//printf("Error : %d\n", ret);
+	fcntl(fileno(stream), F_SETOWN, -ret);
+}
+
+static void
+do_uploadflashfs_post(char *url, FILE *stream, int len, char *boundary)
+{
+  char upload_file[]="/tmp/flash.tar.gz";
+  
+  do_upload_file(upload_file, url, stream, len, boundary);
+  
+  if(eval("tar","ztf",upload_file) != 0)
+   fcntl(fileno(stream), F_SETOWN, -EINVAL);
+}
+
+static void
+do_uploadflashfs_cgi(char *url, FILE *stream)
+{
+	int ret;
+	
+	//printf("Upgrade CGI\n");
+	ret = fcntl(fileno(stream), F_GETOWN, 0);
+	/* Reboot if successful */
+	if (ret == 0)
+	{
+		websApply(stream, "Uploading.asp"); 
+		eval("flashfs","commit");
+		eval("flashfs","enable");
+		sys_reboot();
+	}	
+	else    
+	{
+	   	websApply(stream, "UploadError.asp");
+	   	//unlink("/tmp/settings_u.prf");
+	}   	
+	  
+}
+
+static void
+do_flashfs_file(char *url, FILE *stream)
+{
+
+	eval("flashfs", "load");
+	eval("flashfs", "save");
+	do_file("/tmp/flash.tar.gz", stream);
+	//unlink("/tmp/settings");
+}
+
 #elif defined(vxworks)
 
 static void
@@ -2345,6 +2473,7 @@ initHandlers(void)
 	websAspDefine("nvram_get_buf_x", ej_nvram_get_buf_x);	
 	websAspDefine("nvram_get_table_x", ej_nvram_get_table_x);	
 	websAspDefine("nvram_match_x", ej_nvram_match_x);
+	websAspDefine("nvram_double_match_x", ej_nvram_double_match_x);
     	websAspDefine("nvram_match_both_x", ej_nvram_match_both_x);	
 	websAspDefine("nvram_match_list_x", ej_nvram_match_list_x);
 	websAspDefine("select_channel", ej_select_channel);
@@ -2370,9 +2499,11 @@ struct mime_handler mime_handlers[] = {
 	{ "**.js",  "text/javascript", NULL, NULL, do_file, do_auth },
 	{ "**.cab", "text/txt", NULL, NULL, do_file, do_auth },
 	{ "**.CFG", "text/txt", NULL, NULL, do_prf_file, do_auth },
+	{ "**.tar.gz", "text/txt", NULL, NULL, do_flashfs_file, do_auth },
 	{ "apply.cgi*", "text/html", no_cache, do_apply_cgi_post, do_apply_cgi, do_auth },	
 	{ "upgrade.cgi*", "text/html", no_cache, do_upgrade_post, do_upgrade_cgi, do_auth},
 	{ "upload.cgi*", "text/html", no_cache, do_upload_post, do_upload_cgi, do_auth },
+	{ "uploadflashfs.cgi*", "text/html", no_cache, do_uploadflashfs_post, do_uploadflashfs_cgi, do_auth },
  	{ "syslog.cgi*", "text/txt", no_cache, NULL, do_log_cgi, do_auth },
 	{ "webcam.cgi*", "text/html", no_cache, NULL, do_webcam_cgi, do_auth },
 	{ NULL, NULL, NULL, NULL, NULL, NULL }
@@ -2510,6 +2641,7 @@ struct ej_handler ej_handlers[] = {
 	{ "nvram_get_buf_x", ej_nvram_get_buf_x},
 	{ "nvram_get_table_x", ej_nvram_get_table_x},
 	{ "nvram_match_x", ej_nvram_match_x},
+	{ "nvram_double_match_x", ej_nvram_double_match_x},
         { "nvram_match_both_x", ej_nvram_match_both_x},
 	{ "nvram_match_list_x", ej_nvram_match_list_x},
 	{ "select_channel", ej_select_channel},
@@ -2895,7 +3027,7 @@ wl_channels_in_country(char *abbrev, int
 
 	cic->buflen = sizeof(ibuf2);
 	strcpy(cic->country_abbrev, abbrev);
-	cic->band = WLC_BAND_B;
+	cic->band = WLC_BAND_2G;
 	cic->count = 0;
 
 
@@ -2913,23 +3045,3 @@ wl_channels_in_country(char *abbrev, int
 	return cic->count;
 
 }
-
-/* 
- * Kills process whose PID is stored in plaintext in pidfile
- * @param	pidfile	PID file, signal
- * @return	0 on success and errno on failure
- */
-int
-kill_pidfile_s(char *pidfile, int sig)
-{
-	FILE *fp = fopen(pidfile, "r");
-	char buf[256];
-	extern errno;
-
-	if (fp && fgets(buf, sizeof(buf), fp)) {
-		pid_t pid = strtoul(buf, NULL, 0);
-		fclose(fp);
-		return kill(pid, sig);
-  	} else
-		return errno;
-}
