diff -BurpN src/et.orig/sys/et_linux.c src/et/sys/et_linux.c
--- src/et.orig/sys/et_linux.c	2009-03-28 11:16:10.000000000 +0000
+++ src/et/sys/et_linux.c	2011-02-09 22:10:49.900681000 +0000
@@ -117,6 +117,9 @@ static int et_ioctl(struct net_device *d
 static irqreturn_t et_isr(int irq, void *dev_id, struct pt_regs *ptregs);
 static void et_dpc(ulong data);
 static void et_sendup(et_info_t *et, struct sk_buff *skb);
+#ifdef CONFIG_NET_POLL_CONTROLLER
+static void et_poll_controller(struct net_device *dev);
+#endif
 
 /* recognized PCI IDs */
 static struct pci_device_id et_id_table[] __devinitdata = {
@@ -236,6 +239,9 @@ et_probe(struct pci_dev *pdev, const str
 	dev->set_mac_address = et_set_mac_address;
 	dev->set_multicast_list = et_set_multicast_list;
 	dev->do_ioctl = et_ioctl;
+#ifdef CONFIG_NET_POLL_CONTROLLER
+	dev->poll_controller = et_poll_controller;
+#endif
 
 	if (register_netdev(dev)) {
 		ET_ERROR(("et%d: register_netdev() failed\n", unit));
@@ -1081,6 +1087,21 @@ err:
 	return;
 }
 
+#ifdef CONFIG_NET_POLL_CONTROLLER
+static void
+et_poll_controller(struct net_device *dev)
+{
+	et_info_t *et;
+
+	et = ET_INFO(dev);
+	ET_TRACE(("et%d: et_poll_controller\n", et->etc->unit));
+
+	disable_irq(et->pdev->irq);
+	et_isr(et->pdev->irq, et, NULL);
+	enable_irq(et->pdev->irq);
+}
+#endif
+
 void
 et_dump(et_info_t *et, struct bcmstrbuf *b)
 {
