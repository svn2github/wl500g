--- accel-pptp.orig/pppd_plugin/src/pptp_callmgr.c	2010-08-21 09:07:46.000000000 +0000
+++ accel-pptp/pppd_plugin/src/pptp_callmgr.c	2011-07-21 15:17:09.347301000 +0000
@@ -178,6 +178,8 @@ int callmgr_main(int argc, char **argv,
     do {
         int rc;
         fd_set read_set = call_set, write_set;
+        if (pptp_conn_dead(conn))
+            break;
         FD_ZERO (&write_set);
         if (pptp_conn_established(conn)) {
 	  FD_SET (unix_sock, &read_set);
@@ -305,6 +307,7 @@ shutdown:
 	}
         /* with extreme prejudice */
         pptp_conn_destroy(conn);
+        pptp_conn_free(conn);
         vector_destroy(call_list);
     }
 cleanup:
--- accel-pptp.orig/pppd_plugin/src/pptp_ctrl.c	2011-07-21 15:13:19.000000000 +0000
+++ accel-pptp/pppd_plugin/src/pptp_ctrl.c	2011-07-21 15:17:09.347301000 +0000
@@ -60,7 +60,7 @@ struct PPTP_CONN {
     int inet_sock;
     /* Connection States */
     enum {
-        CONN_IDLE, CONN_WAIT_CTL_REPLY, CONN_WAIT_STOP_REPLY, CONN_ESTABLISHED
+        CONN_IDLE, CONN_WAIT_CTL_REPLY, CONN_WAIT_STOP_REPLY, CONN_ESTABLISHED, CONN_DEAD
     } conn_state; /* on startup: CONN_IDLE */
     /* Keep-alive states */
     enum {
@@ -323,6 +323,10 @@ int pptp_conn_established(PPTP_CONN *con
   return (conn->conn_state == CONN_ESTABLISHED);
 }
 
+int pptp_conn_dead(PPTP_CONN *conn) {
+  return (conn->conn_state == CONN_DEAD);
+}
+
 /* This currently *only* works for client call requests.
  * We need to do something else to allocate calls for incoming requests.
  */
@@ -397,9 +401,10 @@ void pptp_call_close(PPTP_CONN * conn, P
     /* don't check state against WAIT_DISCONNECT... allow multiple disconnect
      * requests to be made.
      */
-    pptp_send_ctrl_packet(conn, &rqst, sizeof(rqst));
-    pptp_reset_timer();
-    call->state.pns = PNS_WAIT_DISCONNECT;
+    if (pptp_send_ctrl_packet(conn, &rqst, sizeof(rqst))) {
+        pptp_reset_timer();
+        call->state.pns = PNS_WAIT_DISCONNECT;
+    }
     /* call structure will be freed when we have confirmation of disconnect. */
 }
 
@@ -425,24 +430,27 @@ void pptp_conn_close(PPTP_CONN * conn, u
     int i;
     assert(conn && conn->call);
     /* avoid repeated close attempts */
-    if (conn->conn_state == CONN_IDLE || conn->conn_state == CONN_WAIT_STOP_REPLY)
+    if (pptp_conn_dead(conn) ||
+        conn->conn_state == CONN_IDLE || conn->conn_state == CONN_WAIT_STOP_REPLY)
         return;
     /* close open calls, if any */
     for (i = 0; i < vector_size(conn->call); i++)
         pptp_call_close(conn, vector_get_Nth(conn->call, i));
     /* now close connection */
     log("Closing PPTP connection");
-    pptp_send_ctrl_packet(conn, &rqst, sizeof(rqst));
-    pptp_reset_timer(); /* wait 60 seconds for reply */
-    conn->conn_state = CONN_WAIT_STOP_REPLY;
-    return;
+    if (pptp_send_ctrl_packet(conn, &rqst, sizeof(rqst))) {
+        pptp_reset_timer(); /* wait 60 seconds for reply */
+        conn->conn_state = CONN_WAIT_STOP_REPLY;
+    }
 }
 
 /*** this is a hard close *****************************************************/
 void pptp_conn_destroy(PPTP_CONN * conn)
 {
     int i;
-    assert(conn != NULL); assert(conn->call != NULL);
+    assert(conn && conn->call);
+    if (pptp_conn_dead(conn))
+        return;
     /* destroy all open calls */
     for (i = 0; i < vector_size(conn->call); i++)
         pptp_call_destroy(conn, vector_get_Nth(conn->call, i));
@@ -452,6 +460,12 @@ void pptp_conn_destroy(PPTP_CONN * conn)
     close(conn->inet_sock);
     /* deallocate */
     vector_destroy(conn->call);
+    conn->conn_state = CONN_DEAD;
+}
+
+void pptp_conn_free(PPTP_CONN * conn)
+{
+    assert(conn != NULL);
     free(conn);
 }
 
@@ -723,8 +737,8 @@ int ctrlp_disp(PPTP_CONN * conn, void *
                     reply.version = packet->version;
                     /* protocol version not supported */
                     reply.result_code = hton8(5);
-                    pptp_send_ctrl_packet(conn, &reply, sizeof(reply));
-                    pptp_reset_timer(); /* give sender a chance for a retry */
+                    if (pptp_send_ctrl_packet(conn, &reply, sizeof(reply)))
+                        pptp_reset_timer(); /* give sender a chance for a retry */
                 } else { /* same or greater version */
                     if (pptp_send_ctrl_packet(conn, &reply, sizeof(reply))) {
                         conn->conn_state = CONN_ESTABLISHED;
@@ -831,8 +845,8 @@ int ctrlp_disp(PPTP_CONN * conn, void *
                 hton8(1), hton8(PPTP_GENERAL_ERROR_NONE), 0
             };
             logecho( PPTP_ECHO_RQST);
-            pptp_send_ctrl_packet(conn, &reply, sizeof(reply));
-            pptp_reset_timer();
+            if (pptp_send_ctrl_packet(conn, &reply, sizeof(reply)))
+                pptp_reset_timer();
             break;
         }
             /* ----------- OUTGOING CALL MESSAGES ------------ */
@@ -918,9 +932,10 @@ int ctrlp_disp(PPTP_CONN * conn, void *
                 vector_search(conn->call, ntoh16(packet->call_id), &call);
                 if (call->callback != NULL)
                     call->callback(conn, call, CALL_CLOSE_RQST);
-                pptp_send_ctrl_packet(conn, &reply, sizeof(reply));
-                pptp_call_destroy(conn, call);
-                log("Call closed (RQST) (call id %d)", (int) call->call_id);
+                if (pptp_send_ctrl_packet(conn, &reply, sizeof(reply))) {
+                    pptp_call_destroy(conn, call);
+                    log("Call closed (RQST) (call id %d)", (int) call->call_id);
+                }
             }
             break;
         }
@@ -1041,11 +1056,15 @@ static void pptp_handle_timer()
     int i;
     /* "Keep Alives and Timers, 1": check connection state */
     if (global.conn->conn_state != CONN_ESTABLISHED) {
-        if (global.conn->conn_state == CONN_WAIT_STOP_REPLY)
+        if (pptp_conn_dead(global.conn))
+            return;
+        if (global.conn->conn_state == CONN_WAIT_STOP_REPLY) {
             /* hard close. */
             pptp_conn_destroy(global.conn);
-        else /* soft close */
-            pptp_conn_close(global.conn, PPTP_STOP_NONE);
+            return;
+        }
+        /* soft close */
+        pptp_conn_close(global.conn, PPTP_STOP_NONE);
     }
     /* "Keep Alives and Timers, 2": check echo status */
     if (global.conn->ka_state == KA_OUTSTANDING) {
@@ -1055,8 +1074,8 @@ static void pptp_handle_timer()
     } else { /* ka_state == NONE */ /* send keep-alive */
         struct pptp_echo_rqst rqst = {
             PPTP_HEADER_CTRL(PPTP_ECHO_RQST), hton32(global.conn->ka_id) };
-        pptp_send_ctrl_packet(global.conn, &rqst, sizeof(rqst));
-        global.conn->ka_state = KA_OUTSTANDING;
+        if (pptp_send_ctrl_packet(global.conn, &rqst, sizeof(rqst)))
+            global.conn->ka_state = KA_OUTSTANDING;
     }
     /* check incoming/outgoing call states for !IDLE && !ESTABLISHED */
     for (i = 0; i < vector_size(global.conn->call); i++) {
--- accel-pptp.orig/pppd_plugin/src/pptp_ctrl.h	2010-08-21 09:07:46.000000000 +0000
+++ accel-pptp/pppd_plugin/src/pptp_ctrl.h	2011-07-21 15:17:09.347301000 +0000
@@ -28,6 +28,7 @@ PPTP_CONN * pptp_conn_open(int inet_sock
 PPTP_CALL * pptp_call_open(PPTP_CONN * conn, int call_id,
 			   pptp_call_cb callback, char *phonenr,int window);
 int pptp_conn_established(PPTP_CONN * conn);
+int pptp_conn_dead(PPTP_CONN *conn);
 /* soft close.  Will callback on completion. */
 void pptp_call_close(PPTP_CONN * conn, PPTP_CALL * call);
 /* hard close. */
@@ -36,6 +37,7 @@ void pptp_call_destroy(PPTP_CONN *conn,
 void pptp_conn_close(PPTP_CONN * conn, u_int8_t close_reason);
 /* hard close */
 void pptp_conn_destroy(PPTP_CONN * conn);
+void pptp_conn_free(PPTP_CONN * conn);
 
 /* Add file descriptors used by pptp to fd_set. */
 void pptp_fd_set(PPTP_CONN * conn, fd_set * read_set, fd_set * write_set, int *max_fd);
