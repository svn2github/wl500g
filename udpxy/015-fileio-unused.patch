diff -urN a/dpkt.c b/dpkt.c
--- a/dpkt.c	2011-12-20 11:14:09.000000000 +0400
+++ b/dpkt.c	2012-02-27 13:05:12.000000000 +0400
@@ -656,12 +656,15 @@
     if( (spc->stype == UPXDT_RTP_TS) || (spc->flags & F_CHECK_FMT) )
         chunk_len = (len > spc->mtu) ? spc->mtu : len;
 
+#ifdef UDPXY_FILEIO
     if( spc->flags & F_FILE_INPUT ) {
         assert( !buf_overrun( buf, len, 0, chunk_len, g_flog ) );
         n = read_frecord( fd, buf, chunk_len, &(spc->stype), g_flog );
         if( n <= 0 ) return n;
     }
-    else {
+    else
+#endif /* UDPXY_FILEIO */
+    {
         assert( !buf_overrun(buf, len, 0, chunk_len, g_flog) );
         n = read_buf( fd, buf, chunk_len, g_flog );
         if( n <= 0 ) return n;
diff -urN a/udpxy.c b/udpxy.c
--- a/udpxy.c	2012-02-24 13:43:35.000000000 +0400
+++ b/udpxy.c	2012-02-27 13:10:48.000000000 +0400
@@ -490,13 +490,19 @@
  */
 static int
 relay_traffic( int ssockfd, int dsockfd, struct server_ctx* ctx,
-               int dfilefd, const struct ip_mreq* mreq )
+             #ifdef UDPXY_FILEIO
+               int dfilefd,
+             #endif
+               const struct ip_mreq* mreq )
 {
     volatile sig_atomic_t quit = 0;
 
     int rc = 0;
     ssize_t nmsgs = -1;
-    ssize_t nrcv = 0, nsent = 0, nwr = 0,
+    ssize_t nrcv = 0, nsent = 0,
+         #ifdef UDPXY_FILEIO
+            nwr = 0,
+         #endif
             lrcv = 0, lsent = 0;
     char*  data = NULL;
     size_t data_len = g_uopt.rbuf_len;
@@ -616,6 +622,7 @@
             lsent = nsent;
         }
 
+#ifdef UDPXY_FILEIO
         if( (dfilefd > 0) && (nrcv > 0) ) {
             nwr = write_data( &ds, data, nrcv, dfilefd );
             if( -1 == nwr )
@@ -624,6 +631,7 @@
                     nrcv, lsent, nwr, t_delta, g_flog ) );
             lsent = nwr;
         }
+#endif /* UDPXY_FILEIO */
 
         if( ds.flags & F_SCATTERED ) reset_pkt_registry( &ds );
 
@@ -664,9 +672,11 @@
     uint16_t    port;
     pid_t       new_pid;
     int         rc = 0, flags; 
-    int         msockfd = -1, sfilefd = -1,
-                dfilefd = -1, srcfd = -1;
+    int         msockfd = -1, srcfd = -1;
+#ifdef UDPXY_FILEIO
+    int         sfilefd = -1, dfilefd = -1;
     char        dfile_name[ MAXPATHLEN ];
+#endif /* UDPXY_FILEIO */
     size_t      rcvbuf_len = 0;
 
     assert( (sockfd > 0) && param && plen && ctx );
@@ -741,6 +751,8 @@
             break;
         }
 
+#ifdef UDPXY_FILEIO
+        dfilefd = -1;
         if( NULL != g_uopt.dstfile ) {
             (void) snprintf( dfile_name, MAXPATHLEN - 1,
                     "%s.%d", g_uopt.dstfile, getpid() );
@@ -755,7 +767,7 @@
                         "Dest file [%s] opened as fd=[%d]\n",
                         dfile_name, dfilefd ) );
         }
-        else dfilefd = -1;
+/*        else dfilefd = -1;*/
 
         if( NULL != g_uopt.srcfile ) {
             sfilefd = open( g_uopt.srcfile, O_RDONLY | O_NOCTTY );
@@ -769,7 +781,9 @@
                 srcfd = sfilefd;
             }
         }
-        else {
+        else
+#endif /* UDPXY_FILEIO */
+        {
             rc = calc_buf_settings( NULL, &rcvbuf_len );
             if (0 == rc ) {
                 rc = setup_mcast_listener( &addr,
@@ -781,7 +795,11 @@
         }
         if( 0 != rc ) break;
 
-        rc = relay_traffic( srcfd, sockfd, ctx, dfilefd, &mreq );
+        rc = relay_traffic( srcfd, sockfd, ctx,
+                          #ifdef UDPXY_FILEIO
+                            dfilefd,
+                          #endif
+                            &mreq );
         if( 0 != rc ) break;
 
     } while(0);
@@ -789,6 +807,7 @@
     if( msockfd > 0 ) {
         close_mcast_listener( msockfd, &mreq );
     }
+#ifdef UDPXY_FILEIO
     if( sfilefd > 0 ) {
        (void) close( sfilefd );
        TRACE( (void) tmfprintf( g_flog, "Source file [%s] closed\n",
@@ -799,7 +818,7 @@
        TRACE( (void) tmfprintf( g_flog, "Dest file [%s] closed\n",
                             dfile_name ) );
     }
-
+#endif /* UDPXY_FILEIO */
     if( 0 != rc ) {
         (void) send_http_response( sockfd, 500, "Service error" );
     }
