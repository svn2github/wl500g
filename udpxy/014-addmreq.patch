
---
 ctx.h     |    2 --
 netop.c   |   42 ++++++++++++------------------------------
 netop.h   |    8 ++++----
 sloop_p.c |    7 -------
 sloop_s.c |    7 -------
 udpxrec.c |   29 +++++++++++++++++++----------
 udpxy.c   |   38 +++++++++++++++++++++++---------------
 util.c    |    4 ++--
 8 files changed, 60 insertions(+), 77 deletions(-)

diff --git a/ctx.h b/ctx.h
--- a/ctx.h
+++ b/ctx.h
@@ -82,8 +82,6 @@ struct server_ctx
     char        listen_addr[ IPADDR_STR_SIZE ];
     uint16_t    listen_port;
     char        mcast_ifc_addr[ IPADDR_STR_SIZE ];
-    struct in_addr
-                mcast_inaddr;
 
     struct srv_request rq;  /* (current) request to process */
 
diff --git a/netop.c b/netop.c
--- a/netop.c
+++ b/netop.c
@@ -132,37 +132,19 @@ setup_listener( const char* ipaddr, int port, int* sockfd, int bklog )
 /* add or drop membership in a multicast group
  */
 int
-set_multicast( int msockfd, const struct in_addr* mifaddr,
+set_multicast( int msockfd, const struct ip_mreq* mreq,
                int opname )
 {
-    struct sockaddr_in addr;
-    a_socklen_t len = sizeof(addr);
-    struct ip_mreq mreq;
-
     int rc = 0;
     const char *opstr =
         ((IP_DROP_MEMBERSHIP == opname) ? "DROP" :
          ((IP_ADD_MEMBERSHIP == opname) ? "ADD" : ""));
     assert( opstr[0] );
 
-    assert( (msockfd > 0) && mifaddr );
-
-    (void) memset( &mreq, 0, sizeof(mreq) );
-    (void) memcpy( &mreq.imr_interface, mifaddr,
-                sizeof(struct in_addr) );
-
-    (void) memset( &addr, 0, sizeof(addr) );
-    rc = getsockname( msockfd, (struct sockaddr*)&addr, &len );
-    if( 0 != rc ) {
-        mperror( g_flog, errno, "%s: getsockname", __func__ );
-        return -1;
-    }
-
-    (void) memcpy( &mreq.imr_multiaddr, &addr.sin_addr,
-                sizeof(struct in_addr) );
+    assert( (msockfd > 0) && mreq );
 
     rc = setsockopt( msockfd, IPPROTO_IP, opname,
-                    &mreq, sizeof(mreq) );
+                    mreq, sizeof(*mreq) );
     if( 0 != rc ) {
         mperror( g_flog, errno, "%s: setsockopt MCAST option: %s",
                     __func__, opstr );
@@ -180,7 +162,7 @@ set_multicast( int msockfd, const struct in_addr* mifaddr,
  */
 int
 setup_mcast_listener( struct sockaddr_in*   sa,
-                      const struct in_addr* mifaddr,
+                      const struct ip_mreq* mreq,
                       int*                  mcastfd,
                       int                   sockbuflen )
 {
@@ -189,7 +171,7 @@ setup_mcast_listener( struct sockaddr_in*   sa,
     int buflen = sockbuflen;
     size_t rcvbuf_len = 0;
 
-    assert( sa && mifaddr && mcastfd && (sockbuflen >= 0) );
+    assert( sa && mreq && mcastfd && (sockbuflen >= 0) );
 
     TRACE( (void)tmfprintf( g_flog, "Setting up multicast listener\n") );
     rc = ERR_INTERNAL;
@@ -241,7 +223,7 @@ setup_mcast_listener( struct sockaddr_in*   sa,
             break;
         }
 
-        rc = set_multicast( sockfd, mifaddr, IP_ADD_MEMBERSHIP );
+        rc = set_multicast( sockfd, mreq, IP_ADD_MEMBERSHIP );
         if( 0 != rc )
             break;
     } while(0);
@@ -262,13 +244,13 @@ setup_mcast_listener( struct sockaddr_in*   sa,
 /* unsubscribe from multicast and close the reader socket
  */
 void
-close_mcast_listener( int msockfd, const struct in_addr* mifaddr )
+close_mcast_listener( int msockfd, const struct ip_mreq* mreq )
 {
-    assert( mifaddr );
+    assert( mreq );
 
     if( msockfd <= 0 ) return;
 
-    (void) set_multicast( msockfd, mifaddr, IP_DROP_MEMBERSHIP );
+    (void) set_multicast( msockfd, mreq, IP_DROP_MEMBERSHIP );
     (void) close( msockfd );
 
     TRACE( (void)tmfprintf( g_flog, "Mcast listener socket=[%d] closed\n",
@@ -280,14 +262,14 @@ close_mcast_listener( int msockfd, const struct in_addr* mifaddr )
 /* drop from and add into a multicast group
  */
 int
-renew_multicast( int msockfd, const struct in_addr* mifaddr )
+renew_multicast( int msockfd, const struct ip_mreq* mreq )
 {
     int rc = 0;
 
-    rc = set_multicast( msockfd, mifaddr, IP_DROP_MEMBERSHIP );
+    rc = set_multicast( msockfd, mreq, IP_DROP_MEMBERSHIP );
     if( 0 != rc ) return rc;
 
-    rc = set_multicast( msockfd, mifaddr, IP_ADD_MEMBERSHIP );
+    rc = set_multicast( msockfd, mreq, IP_ADD_MEMBERSHIP );
     return rc;
 }
 
diff --git a/netop.h b/netop.h
--- a/netop.h
+++ b/netop.h
@@ -41,7 +41,7 @@ setup_listener( const char* ipaddr, int port, int* sockfd, int bklog );
  */
 int
 setup_mcast_listener( struct sockaddr_in*   sa,
-                      const struct in_addr* mifaddr,
+                      const struct ip_mreq* mreq,
                       int*                  mcastfd,
                       int                   sockbuflen );
 
@@ -50,20 +50,20 @@ setup_mcast_listener( struct sockaddr_in*   sa,
  *
  */
 void
-close_mcast_listener( int msockfd, const struct in_addr* mifaddr );
+close_mcast_listener( int msockfd, const struct ip_mreq* mreq );
 
 
 /* add or drop membership in a multicast group
  */
 int
-set_multicast( int msockfd, const struct in_addr* mifaddr,
+set_multicast( int msockfd, const struct ip_mreq* mreq,
                int opname );
 
 
 /* drop from and add into a multicast group
  */
 int
-renew_multicast( int msockfd, const struct in_addr* mifaddr );
+renew_multicast( int msockfd, const struct ip_mreq* mreq );
 
 
 /* set send/receive timeouts on socket(s)
diff --git a/sloop_p.c b/sloop_p.c
--- a/sloop_p.c
+++ b/sloop_p.c
@@ -58,7 +58,6 @@ srv_loop( const char* ipaddr, int port,
              const char* mcast_addr )
 {
     int                 rc, maxfd, err, nrdy, i;
-    struct in_addr      mcast_inaddr;
     fd_set              rset;
     struct timespec     tmout, *ptmout = NULL;
     tmfd_t              *asock = NULL;
@@ -75,17 +74,11 @@ srv_loop( const char* ipaddr, int port,
         return ERR_INTERNAL;
     }
 
-    if( 1 != inet_aton(mcast_addr, &mcast_inaddr) ) {
-        mperror(g_flog, errno, "%s: inet_aton", __func__);
-        return ERR_INTERNAL;
-    }
-
     init_server_ctx( &g_srv, g_uopt.max_clients,
             (ipaddr[0] ? ipaddr : "0.0.0.0") , (uint16_t)port, mcast_addr );
 
     g_srv.rcv_tmout = (u_short)g_uopt.rcv_tmout;
     g_srv.snd_tmout = RLY_SOCK_TIMEOUT;
-    g_srv.mcast_inaddr = mcast_inaddr;
 
     /* NB: server socket is non-blocking! */
     if( 0 != (rc = setup_listener( ipaddr, port, &g_srv.lsockfd,
diff --git a/sloop_s.c b/sloop_s.c
--- a/sloop_s.c
+++ b/sloop_s.c
@@ -58,7 +58,6 @@ srv_loop( const char* ipaddr, int port,
              const char* mcast_addr )
 {
     int                 rc, maxfd, err, nrdy, i;
-    struct in_addr      mcast_inaddr;
     fd_set              rset;
     struct timeval      tmout, idle_tmout, *ptmout = NULL;
     tmfd_t              *asock = NULL;
@@ -77,17 +76,11 @@ srv_loop( const char* ipaddr, int port,
         return ERR_INTERNAL;
     }
 
-    if( 1 != inet_aton(mcast_addr, &mcast_inaddr) ) {
-        mperror(g_flog, errno, "%s: inet_aton", __func__);
-        return ERR_INTERNAL;
-    }
-
     init_server_ctx( &g_srv, g_uopt.max_clients,
             (ipaddr[0] ? ipaddr : "0.0.0.0") , (uint16_t)port, mcast_addr );
 
     g_srv.rcv_tmout = (u_short)g_uopt.rcv_tmout;
     g_srv.snd_tmout = RLY_SOCK_TIMEOUT;
-    g_srv.mcast_inaddr = mcast_inaddr;
 
     /* NB: server socket is non-blocking! */
     if( 0 != (rc = setup_listener( ipaddr, port, &g_srv.lsockfd,
diff --git a/udpxrec.c b/udpxrec.c
--- a/udpxrec.c
+++ b/udpxrec.c
@@ -242,14 +242,14 @@ calc_buf_settings( ssize_t* bufmsgs, size_t* sock_buflen )
 /* subscribe to the (configured) multicast channel
  */
 static int
-subscribe( int* sockfd, struct in_addr* mcast_inaddr )
+subscribe( int* sockfd, struct ip_mreq* mreq )
 {
     struct sockaddr_in sa;
     const char* ipaddr = g_recopt.rec_channel;
     size_t rcvbuf_len = 0;
     int rc = 0;
 
-    assert( sockfd && mcast_inaddr );
+    assert( sockfd && mreq );
 
     if( 1 != inet_aton( ipaddr, &sa.sin_addr ) ) {
         mperror( g_flog, errno,
@@ -261,17 +261,26 @@ subscribe( int* sockfd, struct in_addr* mcast_inaddr )
     sa.sin_family = AF_INET;
     sa.sin_port = htons( (uint16_t)g_recopt.rec_port );
 
-    if( 1 != inet_aton( g_recopt.mcast_addr, mcast_inaddr ) ) {
+    if( 1 != inet_aton( g_recopt.mcast_addr, (struct in_addr*)&mreq->imr_interface.s_addr) ) {
         mperror( g_flog, errno,
                 "%s: Invalid multicast interface: [%s]: inet_aton",
                 __func__, g_recopt.mcast_addr );
         return -1;
     }
 
+    if( 1 != inet_aton( g_recopt.rec_channel, (struct in_addr*)&mreq->imr_multiaddr.s_addr) ) {
+        mperror( g_flog, errno,
+                "%s: Invalid multicast group address: [%s]: inet_aton",
+                __func__, g_recopt.rec_channel );
+        return -1;
+    }
+
+    (void) memcpy( &sa.sin_addr, &mreq->imr_multiaddr.s_addr, sizeof(struct in_addr) );
+
     rc = calc_buf_settings( NULL, &rcvbuf_len );
     if (0 != rc) return rc;
 
-    return setup_mcast_listener( &sa, mcast_inaddr,
+    return setup_mcast_listener( &sa, mreq,
             sockfd, (g_recopt.nosync_sbuf ? 0 : rcvbuf_len) );
 }
 
@@ -282,7 +291,7 @@ static int
 record()
 {
     int rsock = -1, destfd = -1, rc = 0, wtime_sec = 0;
-    struct in_addr raddr;
+    struct ip_mreq mreq;
     struct timeval rtv;
     struct dstream_ctx ds;
     ssize_t nmsgs = 0;
@@ -314,7 +323,7 @@ record()
             break;
         }
 
-        rc = subscribe( &rsock, &raddr );
+        rc = subscribe( &rsock, &mreq );
         if( 0 != rc ) break;
 
         rtv.tv_sec = RSOCK_TIMEOUT;
@@ -429,7 +438,7 @@ record()
     free_dstream_ctx( &ds );
     if( data ) free( data );
 
-    close_mcast_listener( rsock, &raddr );
+    close_mcast_listener( rsock, &mreq );
     if( destfd >= 0 ) (void) close( destfd );
 
     if( quit )
@@ -445,7 +454,7 @@ record()
 static int
 verify_channel()
 {
-    struct in_addr mcast_inaddr;
+    struct ip_mreq mreq;
     int sockfd = -1, rc = -1;
     char buf[16];
     ssize_t nrd = -1;
@@ -453,7 +462,7 @@ verify_channel()
 
     static const time_t MSOCK_TMOUT_SEC = 2;
 
-    rc = subscribe( &sockfd, &mcast_inaddr );
+    rc = subscribe( &sockfd, &mreq );
     do {
         if( rc ) break;
 
@@ -486,7 +495,7 @@ verify_channel()
     } while(0);
 
     if( sockfd >= 0 ) {
-        close_mcast_listener( sockfd, &mcast_inaddr );
+        close_mcast_listener( sockfd, &mreq );
     }
 
     return rc;
diff --git a/udpxy.c b/udpxy.c
--- a/udpxy.c
+++ b/udpxy.c
@@ -352,18 +352,18 @@ send_http_response( int sockfd, int code, const char* reason)
  */
 static void
 check_mcast_refresh( int msockfd, time_t* last_tm,
-                     const struct in_addr* mifaddr )
+                     const struct ip_mreq* mreq )
 {
     time_t now = 0;
 
     if( NULL != g_uopt.srcfile ) /* reading from file */
         return;
 
-    assert( (msockfd > 0) && last_tm && mifaddr );
+    assert( (msockfd > 0) && last_tm && mreq );
     now = time(NULL);
 
     if( now - *last_tm >= g_uopt.mcast_refresh ) {
-        (void) renew_multicast( msockfd, mifaddr );
+        (void) renew_multicast( msockfd, mreq );
         *last_tm = now;
     }
 
@@ -499,7 +499,7 @@ sync_dsockbuf_len( int ssockfd, int dsockfd )
  */
 static int
 relay_traffic( int ssockfd, int dsockfd, struct server_ctx* ctx,
-               int dfilefd, const struct in_addr* mifaddr )
+               int dfilefd, const struct ip_mreq* mreq )
 {
     volatile sig_atomic_t quit = 0;
 
@@ -525,7 +525,7 @@ relay_traffic( int ssockfd, int dsockfd, struct server_ctx* ctx,
     static const int SET_PID = 1;
     struct tps_data tps;
 
-    assert( ctx && mifaddr && MAX_PAUSE_MSEC > 0 );
+    assert( ctx && mreq && MAX_PAUSE_MSEC > 0 );
 
     (void) sigemptyset (&ubset);
     sigaddset (&ubset, SIGINT);
@@ -604,9 +604,8 @@ relay_traffic( int ssockfd, int dsockfd, struct server_ctx* ctx,
 
     while( (0 == rc) && !(quit = must_quit()) ) {
         if( g_uopt.mcast_refresh > 0 ) {
-            check_mcast_refresh( ssockfd, &rfr_tm, mifaddr );
+            check_mcast_refresh( ssockfd, &rfr_tm, mreq );
         }
-
         nrcv = read_data( &ds, ssockfd, data, data_len, &ropt );
         if( -1 == nrcv ) break;
 
@@ -669,6 +668,7 @@ static int
 udp_relay( int sockfd, struct server_ctx* ctx )
 {
     char                mcast_addr[ IPADDR_STR_SIZE ];
+    struct ip_mreq      mreq;
     struct sockaddr_in  addr;
 
     uint16_t    port;
@@ -679,8 +679,6 @@ udp_relay( int sockfd, struct server_ctx* ctx )
     char        dfile_name[ MAXPATHLEN ];
     size_t      rcvbuf_len = 0;
 
-    const struct in_addr *mifaddr = &(ctx->mcast_inaddr);
-
     assert( (sockfd > 0) && ctx );
 
     TRACE( (void)tmfprintf( g_flog, "udp_relay : new_socket=[%d] param=[%s]\n",
@@ -693,15 +691,25 @@ udp_relay( int sockfd, struct server_ctx* ctx )
                             rc, ctx->rq.param );
             break;
         }
-
-        if( 1 != inet_aton(mcast_addr, &addr.sin_addr) ) {
-            (void) tmfprintf( g_flog, "Invalid address: [%s]\n", mcast_addr );
+/*
+        TRACE( (void)tmfprintf (g_flog, "%s: mcast_addr=%s\n", __func__, mcast_addr));
+        TRACE( (void)tmfprintf (g_flog, "%s: mcast_ifaddr=%s\n", __func__, ctx->mcast_ifc_addr));
+*/
+        if( 1 != inet_aton(ctx->mcast_ifc_addr, (struct in_addr*)&mreq.imr_interface.s_addr) ) {
+            (void) tmfprintf( g_flog, "Invalid multicast interface: [%s]\n", ctx->mcast_ifc_addr );
+            rc = ERR_INTERNAL;
+            break;
+        }
+        if( 1 != inet_aton(mcast_addr, (struct in_addr*)&mreq.imr_multiaddr.s_addr) ) {
+            (void) tmfprintf( g_flog, "Invalid multicast group address: [%s]\n", mcast_addr );
             rc = ERR_INTERNAL;
             break;
         }
 
         addr.sin_family = AF_INET;
         addr.sin_port = htons( (short)port );
+        (void) memcpy( &addr.sin_addr, &mreq.imr_multiaddr.s_addr,
+                       sizeof(struct in_addr) );
 
     } while(0);
 
@@ -772,20 +780,20 @@ udp_relay( int sockfd, struct server_ctx* ctx )
         else {
             rc = calc_buf_settings( NULL, &rcvbuf_len );
             if (0 == rc ) {
-                rc = setup_mcast_listener( &addr, mifaddr, &msockfd,
+                rc = setup_mcast_listener( &addr, &mreq, &msockfd,
                     (g_uopt.nosync_sbuf ? 0 : rcvbuf_len) );
                 srcfd = msockfd;
             }
         }
         if( 0 != rc ) break;
 
-        rc = relay_traffic( srcfd, sockfd, ctx, dfilefd, mifaddr );
+        rc = relay_traffic( srcfd, sockfd, ctx, dfilefd, &mreq );
         if( 0 != rc ) break;
 
     } while(0);
 
     if( msockfd > 0 ) {
-        close_mcast_listener( msockfd, mifaddr );
+        close_mcast_listener( msockfd, &mreq );
     }
     if( sfilefd > 0 ) {
        (void) close( sfilefd );
diff --git a/util.c b/util.c
--- a/util.c
+++ b/util.c
@@ -701,7 +701,7 @@ a2time( const char* str, time_t* t, time_t from )
             continue;
         }
 
-        if( !isdigit( str[n] ) ) return ERR_NONDIGIT;
+        if( !isdigit( (int)str[n] ) ) return ERR_NONDIGIT;
 
         if( new_field ) {
             new_field = 0;
@@ -797,7 +797,7 @@ a2double( const char* str, double* pval )
     assert( str );
 
     /* skip to the first */
-    for( p = str; *p && !isalpha(*p); ++p );
+    for( p = str; *p && !isalpha((int)*p); ++p );
 
     if( '\0' != *p ) {
         /* there is a modifier, calculate multiplication
-- 
1.7.2.5

