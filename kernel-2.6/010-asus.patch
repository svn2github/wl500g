
 drivers/scsi/scsi_proc.c       |   10 
 drivers/usb/class/usblp.c      |  491 ++++++++++++++++++++++++++++++++++++++++-
 drivers/usb/core/devio.c       |    7 
 drivers/usb/core/driver.c      |   26 +-
 drivers/usb/core/message.c     |   14 +
 drivers/usb/storage/scsiglue.c |    4 
 fs/fcntl.c                     |    4 
 7 files changed, 544 insertions(+), 12 deletions(-)

diff -urBwNp linux-2.6.22/drivers/scsi/scsi_proc.c linux-2.6/drivers/scsi/scsi_proc.c
--- linux-2.6.22/drivers/scsi/scsi_proc.c	2007-07-09 03:32:17.000000000 +0400
+++ linux-2.6/drivers/scsi/scsi_proc.c	2009-02-24 13:16:37.000000000 +0300
@@ -32,6 +32,7 @@
 #include <scsi/scsi_device.h>
 #include <scsi/scsi_host.h>
 #include <scsi/scsi_transport.h>
+#include <scsi/sd.h>
 
 #include "scsi_priv.h"
 #include "scsi_logging.h"
@@ -148,8 +149,15 @@ static int proc_print_scsidevice(struct
 {
 	struct scsi_device *sdev = to_scsi_device(dev);
 	struct seq_file *s = data;
+	struct Scsi_Host *shost = sdev->host;
+	struct scsi_disk *sdkp;
 	int i;
 
+	sdkp = (struct scsi_disk *) dev->driver_data;
+	seq_printf(s, "BusType: %s Diskname: %s ",
+		shost->hostt->name,
+		sdkp->disk->disk_name);
+
 	seq_printf(s,
 		"Host: scsi%d Channel: %02d Id: %02d Lun: %02d\n  Vendor: ",
 		sdev->host->host_no, sdev->channel, sdev->id, sdev->lun);
diff -urBwNp linux-2.6.22/drivers/usb/class/usblp.c linux-2.6/drivers/usb/class/usblp.c
--- linux-2.6.22/drivers/usb/class/usblp.c	2007-07-09 03:32:17.000000000 +0400
+++ linux-2.6/drivers/usb/class/usblp.c	2009-03-02 10:15:13.000000000 +0300
@@ -58,6 +58,51 @@
 #undef DEBUG
 #include <linux/usb.h>
 
+#define U2EC 1
+
+#ifdef U2EC
+/* Added by PaN */
+#include <linux/proc_fs.h>
+#include <asm/uaccess.h>
+
+struct print_buffer
+{
+	int len;
+	char *buf;
+};
+#define MODULE_NAME "usblp"
+#define MAX_CLASS_NAME  16
+#define MAX_MFR         16
+#define MAX_MODEL       32
+#define MAX_DESCRIPT    64
+#define MAX_STATUS_TYPE 6
+
+static struct proc_dir_entry *usblp_dir, *usblpid_file;
+struct parport_splink_device_info {
+	char class_name[MAX_CLASS_NAME];
+	char mfr[MAX_MFR];
+	char model[MAX_MODEL];
+	char description[MAX_DESCRIPT];
+};
+static char *usblp_status_type[MAX_STATUS_TYPE]={ "Lexmark", "Canon", "Hp", "Epson", "EPSON", NULL};
+static int usblp_status_maping[MAX_STATUS_TYPE][4]={ {0,0,0,0},
+				       		     {0, LP_POUTPA, LP_PERRORP, LP_PBUSY},
+				       		     {0,0,0,0},
+				       		     {0,0,0,0},
+				       		     {0,0,0,0},
+				       		     {0,0,0,0}};
+			       	       	       
+static struct parport_splink_device_info usblpid_info;
+struct parport_splink_device_info prn_info_tmp, *prn_info; // Added by JYWeng 20031212:
+char *strunknown="unknown"; // Added by JYWeng 20031212:
+void parseKeywords(char *str_dev_id, char *keyword1, char *keyword2, char *prn_info_data, char *usblpid_info_data);// Added by JYWeng 20031212:
+
+static ssize_t usblp_write(struct file *file, const char *buffer, size_t count, loff_t *ppos);
+static ssize_t usblp_read(struct file *file, char *buffer, size_t count, loff_t *ppos);
+static long usblp_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+// End PaN
+#endif // U2EC
+
 /*
  * Version Information
  */
@@ -68,6 +113,16 @@
 #define USBLP_BUF_SIZE		8192
 #define USBLP_DEVICE_ID_SIZE	1024
 
+#ifdef U2EC
+/****************add by JY 20031118*************************************/
+#define LPGETID         0x0610	 /* get printer's device ID */
+#define LPWRITEDATA     0x0613  /* write data to printer */
+#define LPWRITEADDR     0x0614  /* write address to printer */
+#define LPREADDATA      0x0615  /* read data from pinter */
+#define LPREADADDR      0x0616  /* read address from pinter */
+/*******************************************************/
+#endif // U2EC
+
 /* ioctls: */
 #define LPGETSTATUS		0x060b		/* same as in drivers/char/lp.c */
 #define IOCNR_GET_DEVICE_ID		1
@@ -314,6 +370,152 @@ unplug:
 
 static const char *usblp_messages[] = { "ok", "out of paper", "off-line", "on fire" };
 
+#ifdef U2EC
+/* Added by PaN */
+static int proc_read_usblpid(char *page, char **start, off_t off, int count, int *eof, void *data)
+{
+	int len=0;
+	
+	len=sprintf(page, "Manufacturer=%s\nModel=%s\nClass=%s\nDescription=%s\n\n", 
+	usblpid_info.mfr, usblpid_info.model, usblpid_info.class_name, usblpid_info.description);
+	
+	return len;
+}
+
+static int proc_get_usblpid(struct usblp *usblp)
+{
+//JYWeng 20031212: set this as global	char *strtmp, *str_dev_id, *strunknown="unknown"; // Added by PaN
+	char *strtmp, *str_dev_id; // Added by PaN: JYWeng 20031212: modified from the above
+	int i, unk = 0; // Added by PaN
+	int length, err;
+	int retval = 0;
+
+	prn_info= &prn_info_tmp; // Added by JYWeng 20031212:
+
+	
+	err = usblp_get_id(usblp, 0, usblp->device_id_string, DEVICE_ID_SIZE - 1);
+	
+	if (err < 0) {
+		dbg ("usblp%d: error = %d reading IEEE-1284 Device ID string",
+			usblp->minor, err);
+			usblp->device_id_string[0] = usblp->device_id_string[1] = '\0';
+		retval = -EIO;
+		goto done;
+	}
+
+	length = (usblp->device_id_string[0] << 8) + usblp->device_id_string[1]; /* big-endian */
+	if (length < DEVICE_ID_SIZE)
+		usblp->device_id_string[length] = '\0';
+	else
+		usblp->device_id_string[DEVICE_ID_SIZE - 1] = '\0';
+
+	dbg ("usblp%d Device ID string [%d]='%s'",
+		usblp->minor, length, &usblp->device_id_string[2]);
+	info ("usblp%d Device ID string [%d]='%s'",
+		usblp->minor, length, &usblp->device_id_string[2]);
+
+	str_dev_id = &usblp->device_id_string[2];	
+#if 1//JYWeng 20031212: modified from below
+				parseKeywords(str_dev_id, "MFG:", "MANUFACTURE:", prn_info->mfr, usblpid_info.mfr);	
+				parseKeywords(str_dev_id, "MDL:", "MODEL:", prn_info->model, usblpid_info.model);	
+				parseKeywords(str_dev_id, "CLS:", "CLASS:", prn_info->class_name, usblpid_info.class_name);	
+				parseKeywords(str_dev_id, "DES:", "DESCRIPTION:", prn_info->description, usblpid_info.description);	
+#else
+	if ( (strtmp = strstr(str_dev_id, "MFG:")) == NULL) {
+		if ( (strtmp = strstr(str_dev_id, "MANUFACTURE:")) == NULL) {
+			for (i=0; i<7; i++) {
+				usblpid_info.mfr[i] = strunknown[i];
+			}
+			usblpid_info.mfr[i]='\0';
+			unk=1;
+		}
+		else 
+			strtmp+=12;
+	}
+	else
+		strtmp+=4;
+					
+	i=0;
+	while (unk && strtmp[i] != ';') {
+		usblpid_info.mfr[i] = strtmp[i];
+		i++;
+	}
+	usblpid_info.mfr[i]='\0';
+	unk=0;
+
+	if ( (strtmp = strstr(str_dev_id, "MDL:")) == NULL) {
+		if ( (strtmp = strstr(str_dev_id, "MODEL:")) == NULL) {
+			for (i=0; i<7; i++) {
+				usblpid_info.model[i] = strunknown[i];
+			}
+			usblpid_info.model[i]='\0';
+			unk=1;
+		}
+		else
+			strtmp+=6;
+		}
+	else 
+		strtmp+=4;
+				
+	i=0;
+	while (unk==0 && strtmp[i] != ';') {
+		usblpid_info.model[i] = strtmp[i];
+		i++;
+	}		
+	usblpid_info.model[i]='\0';
+	unk=0;
+	
+	if ( (strtmp = strstr(str_dev_id, "CLS:")) == NULL) {
+		if ( (strtmp = strstr(str_dev_id, "CLASS:")) == NULL) {
+			for (i=0; i<7; i++) {
+				usblpid_info.class_name[i] = strunknown[i];
+			}
+			usblpid_info.class_name[i]='\0';
+			unk=1;
+		}
+		else
+			strtmp+=6;
+	}
+	else 
+		strtmp+=4;
+	
+	i=0;
+	while (unk==0 && strtmp[i] != ';') {
+		usblpid_info.class_name[i]= strtmp[i];
+		i++;
+	}		
+	usblpid_info.class_name[i]='\0';
+	unk=0;
+	
+	if ( (strtmp = strstr(str_dev_id, "DES:")) == NULL) {
+		if ( (strtmp = strstr(str_dev_id, "DESCRIPTION:")) == NULL) {
+			for (i=0; i<7; i++) {
+				usblpid_info.description[i] = strunknown[i];
+			}
+			usblpid_info.description[i]='\0';
+			unk=1;
+		}
+		else
+			strtmp+=12;
+	}
+	else
+		strtmp+=4;
+		
+	i=0;
+	while (unk==0 && strtmp[i] != ';') {
+			usblpid_info.description[i]= strtmp[i];
+			i++;
+	}		
+	usblpid_info.description[i]='\0';
+#endif//JYWeng 20031212: end
+
+done:
+	return retval;
+	
+}
+// End PaN
+#endif // U2EC
+
 static int usblp_check_status(struct usblp *usblp, int err)
 {
 	unsigned char status, newerr = 0;
@@ -364,6 +566,9 @@ static int usblp_open(struct inode *inod
 	struct usblp *usblp;
 	struct usb_interface *intf;
 	int retval;
+#ifdef U2EC
+	unsigned long arg = 0, ioctl_retval; //Added by PaN
+#endif //U2EC
 
 	if (minor < 0)
 		return -ENODEV;
@@ -414,6 +612,15 @@ static int usblp_open(struct inode *inod
 		file->private_data = NULL;
 		retval = -EIO;
 	}
+
+#ifdef U2EC
+	/* Added by PaN */
+	if ((ioctl_retval=usblp_ioctl(file, LPGETID, arg)) <0)
+	{
+		// Update device id failed
+	}
+#endif // U2EC
+
 out:
 	mutex_unlock (&usblp_mutex);
 	return retval;
@@ -421,7 +628,14 @@ out:
 
 static void usblp_cleanup (struct usblp *usblp)
 {
+#ifndef U2EC
 	info("usblp%d: removed", usblp->minor);
+#else
+	/* Added by PaN */
+	remove_proc_entry("usblpid", usblp_dir);
+	remove_proc_entry(MODULE_NAME, NULL);
+	/* End PaN */
+#endif // U2EC
 
 	kfree (usblp->device_id_string);
 	kfree (usblp->statusbuf);
@@ -463,6 +677,14 @@ static unsigned int usblp_poll(struct fi
 
 static long usblp_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
+#ifdef U2EC
+//JYWeng 20031212: set this as global	struct parport_splink_device_info prn_info_tmp, *prn_info; // Added by PaN
+	struct print_buffer user_buf_tmp, *user_buf; // Added by PaN
+//JYWeng 20031212: set this as global	char *strtmp, *str_dev_id, *strunknown="unknown"; // Added by PaN
+	char *strtmp, *str_dev_id; // Added by PaN: JYWeng 20031212: modified from the above
+	//int i, unk=0; // Added by PaN
+	int unk=0; // Added by PaN ---remove declaration of i for i is declared below: JY
+#endif // U2EC
 	struct usblp *usblp = file->private_data;
 	int length, err, i;
 	unsigned char newChannel;
@@ -630,7 +852,200 @@ static long usblp_ioctl(struct file *fil
 		}
 	else	/* old-style ioctl value */
 		switch (cmd) {
+#ifdef U2EC
+			/*=================================================================================== PaN */
+			case LPGETID: /* get the DEVICE_ID string */
+				err = usblp_get_id(usblp, 0, usblp->device_id_string, DEVICE_ID_SIZE - 1);
+				if (err < 0) {
+					dbg ("usblp%d: error = %d reading IEEE-1284 Device ID string",
+						usblp->minor, err);
+					usblp->device_id_string[0] = usblp->device_id_string[1] = '\0';
+					retval = -EIO;
+					goto done;
+				}
+
+				length = (usblp->device_id_string[0] << 8) + usblp->device_id_string[1]; /* big-endian */
+				if (length < DEVICE_ID_SIZE)
+					usblp->device_id_string[length] = '\0';
+				else
+					usblp->device_id_string[DEVICE_ID_SIZE - 1] = '\0';
+
+				dbg ("usblp%d Device ID string [%d/max %d]='%s'",
+					usblp->minor, length, cmd, &usblp->device_id_string[2]);
+				info ("usblp%d Device ID string [%d/max %d]='%s'",
+					usblp->minor, length, cmd, &usblp->device_id_string[2]);
+
+				str_dev_id = &usblp->device_id_string[2];	
+#if 1//JYWeng 20031212: modified from below
+				parseKeywords(str_dev_id, "MFG:", "MANUFACTURE:", prn_info->mfr, usblpid_info.mfr);	
+				parseKeywords(str_dev_id, "MDL:", "MODEL:", prn_info->model, usblpid_info.model);	
+				parseKeywords(str_dev_id, "CLS:", "CLASS:", prn_info->class_name, usblpid_info.class_name);	
+				parseKeywords(str_dev_id, "DES:", "DESCRIPTION:", prn_info->description, usblpid_info.description);	
+#else
+				if ( (strtmp = strstr(str_dev_id, "MFG:")) == NULL) {
+					if ( (strtmp = strstr(str_dev_id, "MANUFACTURE:")) == NULL) {
+						for (i=0; i<7; i++) {
+							prn_info->mfr[i]= strunknown[i];
+							usblpid_info.mfr[i] = strunknown[i];
+						}
+						prn_info->mfr[i]= '\0';
+						usblpid_info.mfr[i]='\0';
+						unk=1;
+					}
+					else 
+						strtmp+=12;
+				}
+				else
+					strtmp+=4;
+					
+				i=0;
+				while (unk==0 && strtmp[i] != ';') {
+					prn_info->mfr[i]= strtmp[i];
+					usblpid_info.mfr[i] = strtmp[i];
+					i++;
+				}
+				prn_info->mfr[i]= '\0';
+				usblpid_info.mfr[i]='\0';
+				unk=0;
+
+				if ( (strtmp = strstr(str_dev_id, "MDL:")) == NULL) {
+					if ( (strtmp = strstr(str_dev_id, "MODEL:")) == NULL) {
+						for (i=0; i<7; i++) {
+							prn_info->model[i]= strunknown[i];
+							usblpid_info.model[i] = strunknown[i];
+						}
+						prn_info->model[i]= '\0';
+						usblpid_info.model[i]='\0';
+						unk=1;
+					}
+					else
+						strtmp+=6;
+				}
+				else 
+					strtmp+=4;
+				
+				i=0;
+				while (unk==0 && strtmp[i] != ';') {
+					prn_info->model[i]= strtmp[i];
+					usblpid_info.model[i] = strtmp[i];
+					i++;
+				}		
+				prn_info->model[i]= '\0';
+				usblpid_info.model[i]='\0';
+				unk=0;
+				
+				if ( (strtmp = strstr(str_dev_id, "CLS:")) == NULL) {
+					if ( (strtmp = strstr(str_dev_id, "CLASS:")) == NULL) {
+						for (i=0; i<7; i++) {
+							prn_info->class_name[i]= strunknown[i];
+							usblpid_info.class_name[i] = strunknown[i];
+						}
+						prn_info->class_name[i]= '\0';
+						usblpid_info.class_name[i]='\0';
+						unk=1;
+					}
+					else
+						strtmp+=6;
+				}
+				else 
+					strtmp+=4;
+				
+				i=0;
+				while (unk==0 && strtmp[i] != ';') {
+					prn_info->class_name[i]= strtmp[i];
+					usblpid_info.class_name[i]= strtmp[i];
+					i++;
+				}		
+				prn_info->class_name[i]= '\0';
+				usblpid_info.class_name[i]='\0';
+				unk=0;
+				
+				if ( (strtmp = strstr(str_dev_id, "DES:")) == NULL) {
+					if ( (strtmp = strstr(str_dev_id, "DESCRIPTION:")) == NULL) {
+						for (i=0; i<7; i++) {
+							prn_info->description[i]= strunknown[i];
+							usblpid_info.description[i] = strunknown[i];
+						}
+						prn_info->description[i]= '\0';
+						usblpid_info.description[i]='\0';
+						unk=1;
+					}
+					else
+						strtmp+=12;
+				}
+				else
+					strtmp+=4;
+				
+				i=0;
+				while (unk==0 && strtmp[i] != ';') {
+						prn_info->description[i]= strtmp[i];
+						usblpid_info.description[i]= strtmp[i];
+						i++;
+				}	
+				prn_info->description[i]= '\0';
+				usblpid_info.description[i]='\0';
+#endif//JYWeng 20031212: end
+				
+				info("Parsing USBLPID...");
+				if (copy_to_user((unsigned char *) arg,
+						prn_info, (unsigned long) length)) {
+					retval = -EFAULT;
+					goto done;
+				}
+				break;
 
+			case LPREADDATA:
+//			        up (&usblp->sem);
+				mutex_unlock (&usblp->mut);
+				user_buf = (struct print_buffer *)arg;
+				retval = usblp_read(file, user_buf->buf, user_buf->len, NULL);
+				//down (&usblp->sem);
+				mutex_lock (&usblp->mut);
+	                        break;
+										
+
+			case LPWRITEDATA:
+//			        up (&usblp->sem);
+				mutex_unlock (&usblp->mut);
+				user_buf = (struct print_buffer *)arg;
+				retval = usblp_write(file, user_buf->buf, user_buf->len, NULL);
+				//down (&usblp->sem);
+				mutex_lock (&usblp->mut);
+	                        break;
+										 
+			case LPRESET:
+                                usblp_reset(usblp);
+				break;
+
+			case LPGETSTATUS:
+				/* OLD USB Code Removed by PaN for Printer Server 
+				if (usblp_read_status(usblp, &status)) {
+					err("usblp%d: failed reading printer status", usblp->minor);
+					retval = -EIO;
+					goto done;
+				}
+				if (copy_to_user ((int *)arg, &status, 2))
+					retval = -EFAULT;
+				*/
+                                status = usblp_check_status(usblp, 0);
+#if 0
+				info("start=%s", usblpid_info.mfr);
+				for (i=0; i< MAX_STATUS_TYPE; i++) {
+				info("compare=%s", usblp_status_type[i]);
+					if ( !( strcmp(usblpid_info.mfr, usblp_status_type[i]) ) )
+						break;
+				}
+				info("%d=%s", i, usblp_status_type[i]);
+				status=usblp_status_maping[i][status];
+				info("STATUS=%x", status);
+#endif
+				status=0;
+				if (copy_to_user ((int *)arg, &status, 2))
+					retval = -EFAULT;
+				break;
+				
+/*=================================================================== PaN for Printer Server */
+#else	// U2EC	/* Marked by JY 20031118*/
 			case LPGETSTATUS:
 				if (usblp_read_status(usblp, usblp->statusbuf)) {
 					if (printk_ratelimit())
@@ -643,7 +1058,7 @@ static long usblp_ioctl(struct file *fil
 				if (copy_to_user ((void __user *)arg, &status, sizeof(int)))
 					retval = -EFAULT;
 				break;
-
+#endif //U2EC /* Marked by JY 20031118*/
 			default:
 				retval = -ENOTTY;
 		}
@@ -653,6 +1068,46 @@ done:
 	return retval;
 }
 
+#ifdef U2EC
+/*********************************************************
+** JYWeng 20031212: parsing the information of printers **
+*********************************************************/
+void parseKeywords(char *str_dev_id, char *keyword1, char *keyword2, char *prn_info_data, char *usblpid_info_data)
+{
+	char *strtmp;
+	int i, unk = 0;
+	
+	if ( (strtmp = strstr(str_dev_id, keyword1)) == NULL) {
+		if ( (strtmp = strstr(str_dev_id, keyword2)) == NULL) {
+			for (i=0; i<7; i++) {
+				prn_info_data[i]= strunknown[i];
+				usblpid_info_data[i] = strunknown[i];
+			}
+			prn_info_data[i]= '\0';
+			usblpid_info_data[i]='\0';
+			unk=1;
+			
+			return;
+		}
+		else 
+			strtmp+=strlen(keyword2);
+	}
+	else
+		strtmp+=strlen(keyword1);
+					
+	i=0;
+	while (unk==0 && strtmp[i] && strtmp[i] != ';') {
+		prn_info_data[i]= strtmp[i];
+		usblpid_info_data[i] = strtmp[i];
+		i++;
+	}
+	prn_info_data[i]= '\0';
+	usblpid_info_data[i]='\0';
+
+	return;
+}
+#endif //U2EC
+
 static ssize_t usblp_write(struct file *file, const char __user *buffer, size_t count, loff_t *ppos)
 {
 	struct usblp *usblp = file->private_data;
@@ -699,8 +1154,12 @@ static ssize_t usblp_write(struct file *
 			/* if the fault was due to disconnect, let khubd's
 			 * call to usblp_disconnect() grab usblp->mut ...
 			 */
+#ifdef U2EC
+			return writecount; 	//Added by PaN
+#else
 			schedule ();
 			continue;
+#endif // U2EC
 		}
 
 		/* We must increment writecount here, and not at the
@@ -990,6 +1449,30 @@ static int usblp_probe(struct usb_interf
 		le16_to_cpu(usblp->dev->descriptor.idVendor),
 		le16_to_cpu(usblp->dev->descriptor.idProduct));
 
+#ifdef U2EC
+	/* Added by PaN */
+	/* create directory */
+	usblp_dir = proc_mkdir(MODULE_NAME, NULL);
+	if(usblp_dir == NULL) {
+	        goto outpan;
+	}
+        usblp_dir->owner = THIS_MODULE;
+				
+	usblpid_file = create_proc_read_entry("usblpid", 0444, usblp_dir, proc_read_usblpid, NULL);
+	if(usblpid_file == NULL) {
+		remove_proc_entry(MODULE_NAME, NULL);
+
+		goto outpan;
+	}
+        usblpid_file->owner = THIS_MODULE;
+	/* get device id */
+	if (proc_get_usblpid(usblp) < 0) 
+		info("proc:get usblpid error!!");
+
+outpan:
+	// End PaN 
+#endif // U2EC
+
 	return 0;
 
 abort_intfdata:
diff -urBwNp linux-2.6.22/drivers/usb/core/devio.c linux-2.6/drivers/usb/core/devio.c
--- linux-2.6.22/drivers/usb/core/devio.c	2007-07-09 03:32:17.000000000 +0400
+++ linux-2.6/drivers/usb/core/devio.c	2009-03-04 13:21:36.000000000 +0300
@@ -427,6 +427,8 @@ static int claimintf(struct dev_state *p
 		err = usb_driver_claim_interface(&usbfs_driver, intf, ps);
 	if (err == 0)
 		set_bit(ifnum, &ps->ifclaimed);
+	else if (!strcmp(intf->dev.driver->name, "usblp"))      // patch for U2EC
+		err = 0;                                        // patch for U2EC
 	return err;
 }
 
@@ -459,8 +461,9 @@ static int checkintf(struct dev_state *p
 	if (test_bit(ifnum, &ps->ifclaimed))
 		return 0;
 	/* if not yet claimed, claim it for the driver */
-	dev_warn(&ps->dev->dev, "usbfs: process %d (%s) did not claim interface %u before use\n",
-	       current->pid, current->comm, ifnum);
+// U2EC mark this.
+/*	dev_warn(&ps->dev->dev, "usbfs: process %d (%s) did not claim interface %u before use\n",
+	       current->pid, current->comm, ifnum);//*/
 	return claimintf(ps, ifnum);
 }
 
diff -urBwNp linux-2.6.22/drivers/usb/core/driver.c linux-2.6/drivers/usb/core/driver.c
--- linux-2.6.22/drivers/usb/core/driver.c	2007-07-09 03:32:17.000000000 +0400
+++ linux-2.6/drivers/usb/core/driver.c	2009-02-20 13:02:45.000000000 +0300
@@ -615,14 +621,6 @@ static int usb_uevent(struct device *dev
 		return -ENOMEM;
 #endif
 
-	/* per-device configurations are common */
-	if (add_uevent_var(envp, num_envp, &i,
-			   buffer, buffer_size, &length,
-			   "PRODUCT=%x/%x/%x",
-			   le16_to_cpu(usb_dev->descriptor.idVendor),
-			   le16_to_cpu(usb_dev->descriptor.idProduct),
-			   le16_to_cpu(usb_dev->descriptor.bcdDevice)))
-		return -ENOMEM;
 
 	/* class-based driver binding models */
 	if (add_uevent_var(envp, num_envp, &i,
@@ -632,7 +630,15 @@ static int usb_uevent(struct device *dev
 			   usb_dev->descriptor.bDeviceSubClass,
 			   usb_dev->descriptor.bDeviceProtocol))
 		return -ENOMEM;
-
+#if 0
+        if (add_uevent_var(envp, num_envp, &i,
+                   buffer, buffer_size, &length,
+                   "INTERFACE=%d/%d/%d",
+                   alt->desc.bInterfaceClass,
+                   alt->desc.bInterfaceSubClass,
+                   alt->desc.bInterfaceProtocol))
+                return -ENOMEM;
+#endif
 	if (add_uevent_var(envp, num_envp, &i,
 			   buffer, buffer_size, &length,
 			   "BUSNUM=%03d",
@@ -645,6 +651,14 @@ static int usb_uevent(struct device *dev
 			   usb_dev->devnum))
 		return -ENOMEM;
 
+#if 0
+	/* From James to added USBDEVICE_PATH */
+	if (add_uevent_var(envp, num_envp, &i,
+			   buffer, buffer_size, &length,
+			   "USBDEVICE_PATH=%s",
+			   usb_dev->devpath))
+		return -ENOMEM;
+#endif
 	envp[i] = NULL;
 	return 0;
 }
diff -urBwNp linux-2.6.22/drivers/usb/core/message.c linux-2.6/drivers/usb/core/message.c
--- linux-2.6.22/drivers/usb/core/message.c	2007-07-09 03:32:17.000000000 +0400
+++ linux-2.6/drivers/usb/core/message.c	2009-02-20 14:52:59.000000000 +0300
@@ -1354,6 +1349,20 @@ static int usb_if_uevent(struct device *
 
 	if (add_uevent_var(envp, num_envp, &i,
 		   buffer, buffer_size, &length,
+                           "USBDEVICE_PATH=%s",
+                           usb_dev->devpath))
+                return -ENOMEM;
+
+        if (add_uevent_var(envp, num_envp, &i,
+                           buffer, buffer_size, &length,
+                           "PRODUCT=%x/%x/%x",
+                usb_dev->descriptor.idVendor,
+                usb_dev->descriptor.idProduct,
+                usb_dev->descriptor.bcdDevice))
+                return -ENOMEM;
+
+	if (add_uevent_var(envp, num_envp, &i,
+		   buffer, buffer_size, &length,
 		   "MODALIAS=usb:v%04Xp%04Xd%04Xdc%02Xdsc%02Xdp%02Xic%02Xisc%02Xip%02X",
 		   le16_to_cpu(usb_dev->descriptor.idVendor),
 		   le16_to_cpu(usb_dev->descriptor.idProduct),
diff -urBwNp linux-2.6.22/drivers/usb/storage/scsiglue.c linux-2.6/drivers/usb/storage/scsiglue.c
--- linux-2.6.22/drivers/usb/storage/scsiglue.c	2007-07-09 03:32:17.000000000 +0400
+++ linux-2.6/drivers/usb/storage/scsiglue.c	2009-02-18 10:53:37.000000000 +0300
@@ -387,6 +387,10 @@ US_DO_ALL_FLAGS
 		*(pos++) = '\n';
 	}
 
+
+	SPRINTF("         Port: %s\n", us->pusb_dev->devpath);
+	// Added Port descriptor
+
 	/*
 	 * Calculate start of next buffer, and return value.
 	 */
diff -urBwNp linux-2.6.22/fs/fcntl.c linux-2.6/fs/fcntl.c
--- linux-2.6.22/fs/fcntl.c	2007-07-09 03:32:17.000000000 +0400
+++ linux-2.6/fs/fcntl.c	2009-03-19 11:20:08.000000000 +0300
@@ -290,6 +290,10 @@ int f_setown(struct file *filp, unsigned
 	}
 	rcu_read_lock();
 	pid = find_pid(who);
+	if (pid == NULL)
+		printk(KERN_DEBUG "f_setown: NULL pid\n");
+	else
+		printk(KERN_DEBUG "f_setown: pid = %d\n", pid_nr(pid));
 	result = __f_setown(filp, pid, type, force);
 	rcu_read_unlock();
 	return result;
-- 
