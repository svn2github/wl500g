ide: aec62xx: BCM4780 fixes & updates from upstream

 Oleg's fix for BCM4780

 kernel.org commits
 df95f5ab5834a543ddef0e85785e17347cf4c89d aec62xx: remove ->init_setup
 b48d08177fe635a549aaf63eef508be1de069ebf aec62xx: Fix kernel oops in driver's probe function

diff --git a/drivers/ide/pci/aec62xx.c b/drivers/ide/pci/aec62xx.c
--- a/drivers/ide/pci/aec62xx.c
+++ b/drivers/ide/pci/aec62xx.c
@@ -4,6 +4,8 @@
  * Copyright (C) 1999-2002	Andre Hedrick <andre@linux-ide.org>
  * Copyright (C) 2007		MontaVista Software, Inc. <source@mvista.com>
  *
+ * With Broadcom 4780 patches
+ *
  */
 
 #include <linux/module.h>
@@ -193,11 +195,61 @@ static unsigned int __devinit init_chips
 {
 	int bus_speed = system_bus_clock();
 
+#ifndef CONFIG_BCM947XX
 	if (dev->resource[PCI_ROM_RESOURCE].start) {
 		pci_write_config_dword(dev, PCI_ROM_ADDRESS, dev->resource[PCI_ROM_RESOURCE].start | PCI_ROM_ADDRESS_ENABLE);
 		printk(KERN_INFO "%s: ROM enabled at 0x%08lx\n", name,
 			(unsigned long)dev->resource[PCI_ROM_RESOURCE].start);
 	}
+#else
+	if (dev->resource[PCI_ROM_RESOURCE].start) {
+		pci_write_config_dword(dev, PCI_ROM_ADDRESS,
+					dev->resource[PCI_ROM_RESOURCE].
+					start | PCI_ROM_ADDRESS_ENABLE);
+	} else {
+		pci_write_config_dword(dev, PCI_ROM_ADDRESS,
+					dev->resource[PCI_ROM_RESOURCE].
+					start);
+	}
+
+	/* Set IDE controller parameters manually - FIXME: replace magic values */
+	{
+		byte setting;
+
+		pci_write_config_word(dev, PCI_COMMAND, 0x0007);
+		//pci_write_config_byte(dev, PCI_LATENCY_TIMER, 0x5A);
+		pci_write_config_byte(dev, PCI_LATENCY_TIMER, 0x13);
+
+		pci_write_config_byte(dev, 0x40, 0x31);
+		pci_write_config_byte(dev, 0x41, 0x31);
+		pci_write_config_byte(dev, 0x42, 0x31);
+		pci_write_config_byte(dev, 0x43, 0x31);
+		// Set IDE Command Speed
+		pci_write_config_byte(dev, 0x48, 0x31);
+
+		// Disable WriteSubSysID & PIOROM
+		pci_read_config_byte(dev, 0x49, &setting);
+		setting &= 0x07;
+		pci_write_config_byte(dev, 0x49, setting);
+
+		// Enable PCI burst & INTA & PCI memory read multiple, FIFO threshold=80
+		pci_read_config_byte(dev, 0x4A, &setting);
+		//setting = (setting & 0xFE) | 0xA8;
+		setting = (setting & 0xFE) | 0xD8;
+		setting = (setting & 0xF7);
+		pci_write_config_byte(dev, 0x4A, setting);
+
+		//pci_write_config_byte(dev, 0x4B, 0x20);
+		pci_write_config_byte(dev, 0x4B, 0x2C);
+		//pci_write_config_byte(dev, 0x4B, 0x0C);
+
+		// Set PreRead count: 512 byte
+		pci_write_config_byte(dev, 0x4C, 0);
+		pci_write_config_word(dev, 0x4D, 0x0002);
+		pci_write_config_byte(dev, 0x54, 0);
+		pci_write_config_word(dev, 0x55, 0x0002);
+	}
+#endif
 
 	if (bus_speed <= 33)
 		pci_set_drvdata(dev, (void *) aec6xxx_33_base);
@@ -284,32 +336,9 @@ static void __devinit init_dma_aec62xx(i
 	ide_setup_dma(hwif, dmabase, 8);
 }
 
-static int __devinit init_setup_aec62xx(struct pci_dev *dev, ide_pci_device_t *d)
-{
-	return ide_setup_pci_device(dev, d);
-}
-
-static int __devinit init_setup_aec6x80(struct pci_dev *dev, ide_pci_device_t *d)
-{
-	unsigned long bar4reg = pci_resource_start(dev, 4);
-
-	if (inb(bar4reg+2) & 0x10) {
-		strcpy(d->name, "AEC6880");
-		if (dev->device == PCI_DEVICE_ID_ARTOP_ATP865R)
-			strcpy(d->name, "AEC6880R");
-	} else {
-		strcpy(d->name, "AEC6280");
-		if (dev->device == PCI_DEVICE_ID_ARTOP_ATP865R)
-			strcpy(d->name, "AEC6280R");
-	}
-
-	return ide_setup_pci_device(dev, d);
-}
-
 static ide_pci_device_t aec62xx_chipsets[] __devinitdata = {
 	{	/* 0 */
 		.name		= "AEC6210",
-		.init_setup	= init_setup_aec62xx,
 		.init_chipset	= init_chipset_aec62xx,
 		.init_hwif	= init_hwif_aec62xx,
 		.init_dma	= init_dma_aec62xx,
@@ -320,7 +349,6 @@ static ide_pci_device_t aec62xx_chipsets
 		.udma_mask	= 0x07, /* udma0-2 */
 	},{	/* 1 */
 		.name		= "AEC6260",
-		.init_setup	= init_setup_aec62xx,
 		.init_chipset	= init_chipset_aec62xx,
 		.init_hwif	= init_hwif_aec62xx,
 		.init_dma	= init_dma_aec62xx,
@@ -330,7 +358,6 @@ static ide_pci_device_t aec62xx_chipsets
 		.udma_mask	= 0x1f, /* udma0-4 */
 	},{	/* 2 */
 		.name		= "AEC6260R",
-		.init_setup	= init_setup_aec62xx,
 		.init_chipset	= init_chipset_aec62xx,
 		.init_hwif	= init_hwif_aec62xx,
 		.init_dma	= init_dma_aec62xx,
@@ -341,7 +368,6 @@ static ide_pci_device_t aec62xx_chipsets
 		.udma_mask	= 0x1f, /* udma0-4 */
 	},{	/* 3 */
 		.name		= "AEC6X80",
-		.init_setup	= init_setup_aec6x80,
 		.init_chipset	= init_chipset_aec62xx,
 		.init_hwif	= init_hwif_aec62xx,
 		.init_dma	= init_dma_aec62xx,
@@ -351,7 +377,6 @@ static ide_pci_device_t aec62xx_chipsets
 		.udma_mask	= 0x3f, /* udma0-5 */
 	},{	/* 4 */
 		.name		= "AEC6X80R",
-		.init_setup	= init_setup_aec6x80,
 		.init_chipset	= init_chipset_aec62xx,
 		.init_hwif	= init_hwif_aec62xx,
 		.init_dma	= init_dma_aec62xx,
@@ -374,9 +399,30 @@ static ide_pci_device_t aec62xx_chipsets
  
 static int __devinit aec62xx_init_one(struct pci_dev *dev, const struct pci_device_id *id)
 {
-	ide_pci_device_t *d = &aec62xx_chipsets[id->driver_data];
+	ide_pci_device_t *d;
+	u8 idx = id->driver_data;
+	int err;
+
+	err = pci_enable_device(dev);
+	if (err)
+		return err;
+
+	d = &aec62xx_chipsets[idx];
+
+	if (idx == 3 || idx == 4) {
+		unsigned long dma_base = pci_resource_start(dev, 4);
+
+		if (inb(dma_base + 2) & 0x10) {
+			d->name = (idx == 4) ? "AEC6880R" : "AEC6880";
+			d->udma_mask = ATA_UDMA6;
+		}
+	}
+
+	err= ide_setup_pci_device(dev, d);
+	if (err)
+		pci_disable_device(dev);
 
-	return d->init_setup(dev, d);
+	return err;
 }
 
 static struct pci_device_id aec62xx_pci_tbl[] = {
-- 
