diff -BurpN linux-2.6.22.orig/scripts/squashfs/Makefile linux-2.6.22/scripts/squashfs/Makefile
--- linux-2.6.22.orig/scripts/squashfs/Makefile	2010-01-30 17:39:14.000000000 +0000
+++ linux-2.6.22/scripts/squashfs/Makefile	2010-01-30 17:41:50.000000000 +0000
@@ -11,15 +11,17 @@ CFLAGS += -I$(Sqlzma) -I$(LzmaDec) -D_RE
 
 all: mksquashfs-lzma unsquashfs-lzma
 
-mksquashfs-lzma: mksquashfs.o read_fs.o sort.o comp.o uncomp.o LzmaDecode.o $(LZMAPATH)/liblzma.a
+mksquashfs-lzma: mksquashfs.o read_fs.o sort.o pseudo.o comp.o uncomp.o LzmaDecode.o $(LZMAPATH)/liblzma.a
 	$(CXX) $(LDFLAGS) $^ -lpthread -lm -lz -o $@
 
-mksquashfs.o: mksquashfs.c mksquashfs.h global.h sort.h
+mksquashfs.o: mksquashfs.c mksquashfs.h global.h sort.h pseudo.h
 
 read_fs.o: read_fs.c read_fs.h global.h
 
 sort.o: sort.c global.h sort.h
 
+pseudo.o: pseudo.c global.h pseudo.h
+
 comp.o: comp.c $(Sqlzma)/sqlzma.h
 
 uncomp.o: uncomp.c $(Sqlzma)/sqlzma.h
diff -BurpN linux-2.6.22.orig/scripts/squashfs/mksquashfs.c linux-2.6.22/scripts/squashfs/mksquashfs.c
--- linux-2.6.22.orig/scripts/squashfs/mksquashfs.c	2010-01-30 17:39:14.000000000 +0000
+++ linux-2.6.22/scripts/squashfs/mksquashfs.c	2010-01-30 17:19:58.000000000 +0000
@@ -62,6 +62,7 @@
 #include "mksquashfs.h"
 #include "global.h"
 #include "sort.h"
+#include "pseudo.h"
 #include "sqlzma.h"
 
 #ifdef SQUASHFS_TRACE
@@ -348,6 +349,7 @@ pthread_mutex_t	pos_mutex;
 pthread_mutex_t progress_mutex;
 pthread_cond_t progress_wait;
 int rotate = 0;
+struct pseudo *pseudo = NULL;
 
 /* user options that control parallelisation */
 int processors = -1;
@@ -377,7 +379,8 @@ extern int read_sort_file(char *filename
 extern void sort_files_and_write(struct dir_info *dir);
 struct file_info *duplicate(long long file_size, long long bytes, unsigned int **block_list, long long *start, struct fragment **fragment, struct file_buffer *file_buffer, struct buffer_list *buffer_list, int blocks, unsigned short checksum, unsigned short fragment_checksum, int checksum_flag);
 struct dir_info *dir_scan1(char *, struct pathnames *, int (_readdir)(char *, char *, struct dir_info *));
-void dir_scan2(squashfs_inode *inode, struct dir_info *dir_info);
+struct dir_info *dir_scan2(struct dir_info *dir, struct pseudo *pseudo);
+void dir_scan3(squashfs_inode *inode, struct dir_info *dir_info);
 struct file_info *add_non_dup(long long file_size, long long bytes, unsigned int *block_list, long long start, struct fragment *fragment, unsigned short checksum, unsigned short fragment_checksum, int checksum_flag);
 extern void generate_file_priorities(struct dir_info *dir, int priority, struct stat *buf);
 extern struct priority_entry *priority_list[65536];
@@ -1231,7 +1234,7 @@ int create_inode(squashfs_inode *i_no, s
 }
 
 
-void scan2_init_dir(struct directory *dir)
+void scan3_init_dir(struct directory *dir)
 {
 	if((dir->buff = malloc(SQUASHFS_METADATA_SIZE)) == NULL) {
 		BAD_ERROR("Out of memory allocating directory buffer\n");
@@ -2007,7 +2010,6 @@ void reader_scan(struct dir_info *dir) {
 				break;
 		}
 	}
-	return NULL;
 }
 
 
@@ -2842,7 +2844,32 @@ int scan1_readdir(char *pathname, char *
 }
 
 
-struct dir_ent *scan2_readdir(struct directory *dir, struct dir_info *dir_info)
+struct dir_ent *scan2_readdir(struct dir_info *dir_info)
+{
+	int current_count;
+
+	while((current_count = dir_info->current_count++) < dir_info->count)
+		if(dir_info->list[current_count]->data)
+			continue;
+		else 
+			return dir_info->list[current_count];
+	return NULL;
+}
+
+
+struct dir_ent *scan2_lookup(struct dir_info *dir, char *name)
+{
+	int i;
+
+	for(i = 0; i < dir->count; i++)
+		if(strcmp(dir->list[i]->name, name) == 0)
+			return dir->list[i];
+
+	return NULL;
+}
+
+
+struct dir_ent *scan3_readdir(struct directory *dir, struct dir_info *dir_info)
 {
 	int current_count;
 
@@ -2852,7 +2879,7 @@ struct dir_ent *scan2_readdir(struct dir
 				dir_info->list[current_count]->name, dir_info->list[current_count]->data->type, dir);
 		else 
 			return dir_info->list[current_count];
-	return FALSE;	
+	return NULL;
 }
 
 
@@ -2863,7 +2890,13 @@ void scan1_freedir(struct dir_info *dir)
 }
 
 
-void scan2_freedir(struct directory *dir)
+void scan2_freedir(struct dir_info *dir)
+{
+	dir->current_count = 0;
+}
+
+
+void scan3_freedir(struct directory *dir)
 {
 	if(dir->index)
 		free(dir->index);
@@ -2880,6 +2913,8 @@ void dir_scan(squashfs_inode *inode, cha
 	if(dir_info == NULL)
 		return;
 
+	dir_scan2(dir_info, pseudo);
+
 	if((dir_ent = malloc(sizeof(struct dir_ent))) == NULL)
 		BAD_ERROR("Out of memory in dir_scan\n");
 
@@ -2914,7 +2949,7 @@ void dir_scan(squashfs_inode *inode, cha
 		sort_files_and_write(dir_info);
 	if(progress)
 		enable_progress_bar();
-	dir_scan2(inode, dir_info);
+	dir_scan3(inode, dir_info);
 	dir_ent->inode->inode = *inode;
 	dir_ent->inode->type = SQUASHFS_DIR_TYPE;
 }
@@ -2979,7 +3014,69 @@ error:
 }
 
 
-void dir_scan2(squashfs_inode *inode, struct dir_info *dir_info)
+struct dir_info *dir_scan2(struct dir_info *dir, struct pseudo *pseudo)
+{
+	struct dir_info *sub_dir;
+	struct dir_ent *dir_ent;
+	struct pseudo_entry *pseudo_ent;
+	struct stat buf;
+	static pseudo_ino = 1;
+	
+	if(dir == NULL && (dir = scan1_opendir("")) == NULL)
+		return NULL;
+	
+	while((dir_ent = scan2_readdir(dir)) != NULL) {
+		struct inode_info *inode_info = dir_ent->inode;
+		struct stat *buf = &inode_info->buf;
+		char *name = dir_ent->name;
+
+		if((buf->st_mode & S_IFMT) == S_IFDIR)
+			dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));
+	}
+
+	while((pseudo_ent = pseudo_readdir(pseudo)) != NULL) {
+		dir_ent = scan2_lookup(dir, pseudo_ent->name);
+		if(dir_ent) {
+			ERROR("Pseudo file \"%s\" exists in source filesystem "
+				"\"%s\"\n", pseudo_ent->pathname,
+				dir_ent->pathname);
+			ERROR("Ignoring, exclude it (-e/-ef) to override\n");
+			continue;
+		}
+
+		if(pseudo_ent->dev->type == 'd') {
+			sub_dir = dir_scan2(NULL, pseudo_ent->pseudo);
+			if(sub_dir == NULL) {
+				ERROR("Could not create pseudo directory \"%s\""
+					", skipping...\n",
+					pseudo_ent->pathname);
+				continue;
+			}
+			dir->directory_count ++;
+		} else
+			sub_dir = NULL;
+
+		memset(&buf, 0, sizeof(buf));
+		buf.st_mode = pseudo_ent->dev->mode;
+		buf.st_uid = pseudo_ent->dev->uid;
+		buf.st_gid = pseudo_ent->dev->gid;
+		buf.st_rdev = makedev(pseudo_ent->dev->major,
+			pseudo_ent->dev->minor);
+		buf.st_mtime = time(NULL);
+		buf.st_ino = pseudo_ino ++;
+
+		add_dir_entry(pseudo_ent->name, pseudo_ent->pathname, sub_dir,
+			lookup_inode(&buf), NULL, dir);
+	}
+
+	scan2_freedir(dir);
+	sort_directory(dir);
+
+	return dir;
+}
+
+
+void dir_scan3(squashfs_inode *inode, struct dir_info *dir_info)
 {
 	int squashfs_type = -1;
 	int duplicate_file;
@@ -2987,9 +3084,9 @@ void dir_scan2(squashfs_inode *inode, st
 	struct directory dir;
 	struct dir_ent *dir_ent;
 	
-	scan2_init_dir(&dir);
+	scan3_init_dir(&dir);
 	
-	while((dir_ent = scan2_readdir(&dir, dir_info)) != NULL) {
+	while((dir_ent = scan3_readdir(&dir, dir_info)) != NULL) {
 		struct inode_info *inode_info = dir_ent->inode;
 		struct stat *buf = &inode_info->buf;
 		char *filename = dir_ent->pathname;
@@ -3006,7 +3103,7 @@ void dir_scan2(squashfs_inode *inode, st
 
 				case S_IFDIR:
 					squashfs_type = SQUASHFS_DIR_TYPE;
-					dir_scan2(inode, dir_ent->dir);
+					dir_scan3(inode, dir_ent->dir);
 					break;
 
 				case S_IFLNK:
@@ -3082,7 +3179,7 @@ void dir_scan2(squashfs_inode *inode, st
 	write_dir(inode, dir_info, &dir);
 	INFO("directory %s inode 0x%llx\n", pathname, *inode);
 
-	scan2_freedir(&dir);
+	scan3_freedir(&dir);
 }
 
 
@@ -3617,7 +3714,27 @@ int main(int argc, char *argv[])
 	source_path = argv + 1;
 	source = i - 2;
 	for(; i < argc; i++) {
-		if(strcmp(argv[i], "-recover") == 0) {
+		if(strcmp(argv[i], "-pf") == 0) {
+			if(++i == argc) {
+				ERROR("%s: -pf missing filename\n", argv[0]);
+				exit(1);
+			}
+			if(read_pseudo_file(&pseudo, argv[i]) == FALSE) {
+				ERROR("Failed to parse pseudo file \"%s\"\n",
+					argv[i]);
+				exit(1);
+			}
+		} else if(strcmp(argv[i], "-p") == 0) {
+			if(++i == argc) {
+				ERROR("%s: -p missing pseudo file definition\n",
+					argv[0]);
+				exit(1);
+			}
+			if(read_pseudo_def(&pseudo, argv[i]) == FALSE) {
+				ERROR("Failed to parse pseudo definition\n");
+				exit(1);
+			}
+		} else if(strcmp(argv[i], "-recover") == 0) {
 			if(++i == argc) {
 				ERROR("%s: -recover missing recovery file\n", argv[0]);
 				exit(1);
@@ -3857,6 +3974,8 @@ printOptions:
 			ERROR("-ef <exclude_file>\tlist of exclude dirs/files.  One per line\n");
 			ERROR("-wildcards\t\tAllow extended shell wildcards (globbing) to be used in\n\t\t\texclude dirs/files\n");
 			ERROR("-regex\t\t\tAllow POSIX regular expressions to be used in exclude\n\t\t\tdirs/files\n");
+			ERROR("-p <pseudo-definition>\tAdd pseudo file definition\n");
+			ERROR("-pf <pseudo-file>\tAdd list of pseudo file definitions\n");
 			ERROR("-lzmadic <dic_size>\tset the LZMA dictionary"
 			      " size to <dic_size>\n"
 			      "\t\t\tDefault value always follow the block"
@@ -3936,7 +4055,7 @@ printOptions:
 			fclose(fd);
 		} else if(strcmp(argv[i], "-e") == 0)
 			break;
-		else if(strcmp(argv[i], "-b") == 0 || strcmp(argv[i], "-root-becomes") == 0 || strcmp(argv[i], "-sort") == 0)
+		else if(strcmp(argv[i], "-b") == 0 || strcmp(argv[i], "-root-becomes") == 0 || strcmp(argv[i], "-sort") == 0 || strcmp(argv[i], "-pf") == 0 || strcmp(argv[i], "-p") == 0)
 			i++;
 
 	if(i != argc) {
@@ -3958,7 +4077,7 @@ printOptions:
 			sorted ++;
 		} else if(strcmp(argv[i], "-e") == 0)
 			break;
-		else if(strcmp(argv[i], "-b") == 0 || strcmp(argv[i], "-root-becomes") == 0 || strcmp(argv[i], "-ef") == 0)
+		else if(strcmp(argv[i], "-b") == 0 || strcmp(argv[i], "-root-becomes") == 0 || strcmp(argv[i], "-ef") == 0 || strcmp(argv[i], "-pf") == 0 || strcmp(argv[i], "-p") == 0)
 			i++;
 
 #ifdef SQUASHFS_TRACE
diff -BurpN linux-2.6.22.orig/scripts/squashfs/pseudo.c linux-2.6.22/scripts/squashfs/pseudo.c
--- linux-2.6.22.orig/scripts/squashfs/pseudo.c	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.22/scripts/squashfs/pseudo.c	2009-04-05 02:01:58.000000000 +0000
@@ -0,0 +1,364 @@
+/*
+ * Create a squashfs filesystem.  This is a highly compressed read only filesystem.
+ *
+ * Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
+ * Phillip Lougher <phillip@lougher.demon.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2,
+ * or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * pseudo.c
+ */
+
+#include <pwd.h>
+#include <grp.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <string.h>
+#include <stdlib.h>
+#include <sys/types.h>
+
+#include "pseudo.h"
+
+#ifdef SQUASHFS_TRACE
+#define TRACE(s, args...)		do { \
+						printf("mksquashfs: "s, ## args); \
+					} while(0)
+#else
+#define TRACE(s, args...)
+#endif
+
+#define ERROR(s, args...)		do { \
+						fprintf(stderr, s, ## args); \
+					} while(0)
+#define EXIT_MKSQUASHFS()		do { \
+						exit(1); \
+					} while(0)
+#define BAD_ERROR(s, args...)		do {\
+						fprintf(stderr, "FATAL ERROR:" s, ##args);\
+						EXIT_MKSQUASHFS();\
+					} while(0);
+
+#define TRUE 1
+#define FALSE 0
+
+static void dump_pseudo(struct pseudo *pseudo, char *string)
+{
+	int i;
+	char path[1024];
+
+	for(i = 0; i < pseudo->names; i++) {
+		struct pseudo_entry *entry = &pseudo->name[i];
+		if(string)
+			strcat(strcat(strcpy(path, string), "/"), entry->name);
+		else
+			strcpy(path, entry->name);
+		if(entry->pseudo == NULL)
+			ERROR("%s %c %o %d %d %d %d\n", path, entry->dev->type,
+				entry->dev->mode, entry->dev->uid,
+				entry->dev->gid, entry->dev->major,
+				entry->dev->minor);
+		else
+			dump_pseudo(entry->pseudo, path);
+	}
+}
+
+
+static char *get_component(char *target, char *targname)
+{
+	while(*target == '/')
+		target ++;
+
+	while(*target != '/' && *target!= '\0')
+		*targname ++ = *target ++;
+
+	*targname = '\0';
+
+	return target;
+}
+
+
+/*
+ * Add pseudo device target to the set of pseudo devices.  Pseudo_dev
+ * describes the pseudo device attributes.
+ */
+struct pseudo *add_pseudo(struct pseudo *pseudo, struct pseudo_dev *pseudo_dev,
+	char *target, char *alltarget)
+{
+	char targname[1024];
+	int i, error;
+
+	target = get_component(target, targname);
+
+	if(pseudo == NULL) {
+		if((pseudo = malloc(sizeof(struct pseudo))) == NULL)
+			BAD_ERROR("failed to allocate pseudo file\n");
+
+		pseudo->names = 0;
+		pseudo->count = 0;
+		pseudo->name = NULL;
+	}
+
+	for(i = 0; i < pseudo->names; i++)
+		if(strcmp(pseudo->name[i].name, targname) == 0)
+			break;
+
+	if(i == pseudo->names) {
+		/* allocate new name entry */
+		pseudo->names ++;
+		pseudo->name = realloc(pseudo->name, (i + 1) *
+			sizeof(struct pseudo_entry));
+		if(pseudo->name == NULL)
+			BAD_ERROR("failed to allocate pseudo file\n");
+		pseudo->name[i].name = strdup(targname);
+
+		if(target[0] == '\0') {
+			/* at leaf pathname component */
+			pseudo->name[i].pseudo = NULL;
+			pseudo->name[i].dev = malloc(sizeof(struct pseudo_dev));
+			if(pseudo->name[i].dev == NULL)
+				BAD_ERROR("failed to allocate pseudo file\n");
+			pseudo->name[i].pathname = strdup(alltarget);
+			memcpy(pseudo->name[i].dev, pseudo_dev,
+				sizeof(struct pseudo_dev));
+		} else {
+			/* recurse adding child components */
+			pseudo->name[i].dev = NULL;
+			pseudo->name[i].pseudo = add_pseudo(NULL, pseudo_dev,
+				target, alltarget);
+		}
+	} else {
+		/* existing matching entry */
+		if(pseudo->name[i].pseudo == NULL) {
+			/* No sub-directory which means this is the leaf
+			 * component of a pre-existing pseudo file.
+			 */
+			if(target[0] != '\0') {
+				/* entry must exist as a 'd' type pseudo file */
+				if(pseudo->name[i].dev->type == 'd')
+					/* recurse adding child components */
+					pseudo->name[i].pseudo =
+						add_pseudo(NULL, pseudo_dev,
+						target, alltarget);
+				else
+					ERROR("%s already exists as a non "
+						"directory.  Ignoring %s!\n",
+						 targname, alltarget);
+			} else if(memcmp(pseudo_dev, pseudo->name[i].dev,
+					sizeof(struct pseudo_dev)) != 0)
+				ERROR("%s already exists as a different pseudo "
+					"definition.  Ignoring!\n", alltarget);
+			else ERROR("%s already exists as an identical "
+					"pseudo definition!\n", alltarget);
+		} else {
+			/* sub-directory exists which means this can only be a
+			 * 'd' type pseudo file */
+			if(target[0] == '\0') {
+				if(pseudo->name[i].dev == NULL &&
+						pseudo_dev->type == 'd') {
+					pseudo->name[i].dev =
+						malloc(sizeof(struct pseudo_dev));
+					if(pseudo->name[i].dev == NULL)
+						BAD_ERROR("failed to allocate "
+							"pseudo file\n");
+					pseudo->name[i].pathname =
+						strdup(alltarget);
+					memcpy(pseudo->name[i].dev, pseudo_dev,
+						sizeof(struct pseudo_dev));
+				} else
+					ERROR("%s already exists as a "
+						"directory.  Ignoring %s!\n",
+						targname, alltarget);
+			} else
+				/* recurse adding child components */
+				add_pseudo(pseudo->name[i].pseudo, pseudo_dev,
+					target, alltarget);
+		}
+	}
+
+	return pseudo;
+}
+
+
+/*
+ * Find subdirectory in pseudo directory referenced by pseudo, matching
+ * filename.  If filename doesn't exist or if filename is a leaf file
+ * return NULL
+ */
+struct pseudo *pseudo_subdir(char *filename, struct pseudo *pseudo)
+{
+	int i;
+
+	if(pseudo == NULL)
+		return NULL;
+
+	for(i = 0; i < pseudo->names; i++)
+		if(strcmp(filename, pseudo->name[i].name) == 0)
+			return pseudo->name[i].pseudo;
+
+	return NULL;
+}
+
+
+struct pseudo_entry *pseudo_readdir(struct pseudo *pseudo)
+{
+	if(pseudo == NULL)
+		return NULL;
+
+	while(pseudo->count < pseudo->names) {
+		if(pseudo->name[pseudo->count].dev != NULL)
+			return &pseudo->name[pseudo->count++];
+		else
+			pseudo->count++;
+	}
+
+	return NULL;
+}
+
+
+int read_pseudo_def(struct pseudo **pseudo, char *def)
+{
+	int n;
+	unsigned int major = 0, minor = 0, mode;
+	char filename[2048], type, suid[100], sgid[100], *ptr;
+	long long uid, gid;
+	struct pseudo_dev dev;
+
+	n = sscanf(def, "%s %c %o %s %s %u %u", filename, &type, &mode, suid, sgid,
+			&major, &minor);
+
+	if(n < 5) {
+		ERROR("Not enough or invalid arguments in pseudo file "
+			"definition\n");
+		goto error;
+	}
+
+	switch(type) {
+	case 'b':
+	case 'c':
+		if(n < 7) {
+			ERROR("Not enough or invalid arguments in pseudo file "
+				"definition\n");
+			goto error;
+		}	
+		
+		if(major > 0xfff) {
+			ERROR("Major %d out of range\n", major);
+			goto error;
+		}
+
+		if(minor > 0xfffff) {
+			ERROR("Minor %d out of range\n", minor);
+			goto error;
+		}
+
+		/* fall through */
+	case 'd':
+		if(mode > 07777) {
+			ERROR("Mode %o out of range\n", mode);
+			goto error;
+		}
+
+		uid = strtoll(suid, &ptr, 10);
+		if(*ptr == '\0') {
+			if(uid < 0 || uid > ((1LL << 32) - 1)) {
+				ERROR("Uid %s out of range\n", suid);
+				goto error;
+			}
+		} else {
+			struct passwd *pwuid = getpwnam(suid);
+			if(pwuid)
+				uid = pwuid->pw_uid;
+			else {
+				ERROR("Uid %s invalid uid or unknown user\n",
+					suid);
+				goto error;
+			}
+		}
+		
+		gid = strtoll(sgid, &ptr, 10);
+		if(*ptr == '\0') {
+			if(gid < 0 || gid > ((1LL << 32) - 1)) {
+				ERROR("Gid %s out of range\n", sgid);
+				goto error;
+			}
+		} else {
+			struct group *grgid = getgrnam(sgid);
+			if(grgid)
+				gid = grgid->gr_gid;
+			else {
+				ERROR("Gid %s invalid uid or unknown user\n",
+					sgid);
+				goto error;
+			}
+		}
+
+		break;
+	default:
+		ERROR("Unsupported type %c\n", type);
+		goto error;
+	}
+
+
+	switch(type) {
+	case 'b':
+		mode |= S_IFBLK;
+		break;
+	case 'c':
+		mode |= S_IFCHR;
+		break;
+	case 'd':
+		mode |= S_IFDIR;
+		break;
+	}
+
+	dev.type = type;
+	dev.mode = mode;
+	dev.uid = uid;
+	dev.gid = gid;
+	dev.major = major;
+	dev.minor = minor;
+
+	*pseudo = add_pseudo(*pseudo, &dev, filename, filename);
+
+	return TRUE;
+
+error:
+	ERROR("Bad pseudo file definition \"%s\"\n", def);
+	return FALSE;
+}
+		
+
+int read_pseudo_file(struct pseudo **pseudo, char *filename)
+{
+	FILE *fd;
+	char line[2048];
+	int res = TRUE;
+
+	fd = fopen(filename, "r");
+	if(fd == NULL) {
+		ERROR("Could not open pseudo device file \"%s\" because %s\n",
+				filename, strerror(errno));
+		return FALSE;
+	}
+	while(fscanf(fd, "%2047[^\n]\n", line) > 0) {
+		res = read_pseudo_def(pseudo, line);
+		if(res == FALSE)
+			break;
+	};
+	fclose(fd);
+	return res;
+}
diff -BurpN linux-2.6.22.orig/scripts/squashfs/pseudo.h linux-2.6.22/scripts/squashfs/pseudo.h
--- linux-2.6.22.orig/scripts/squashfs/pseudo.h	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.22/scripts/squashfs/pseudo.h	2009-04-04 01:44:24.000000000 +0000
@@ -0,0 +1,48 @@
+/*
+ * Create a squashfs filesystem.  This is a highly compressed read only filesystem.
+ *
+ * Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
+ * Phillip Lougher <phillip@lougher.demon.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2,
+ * or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * pseudo.h
+ */
+struct pseudo_dev {
+	char		type;
+	unsigned int	mode;
+	unsigned int	uid;
+	unsigned int	gid;
+	unsigned int	major;
+	unsigned int	minor;
+};
+
+struct pseudo_entry {
+	char			*name;
+	char			*pathname;
+	struct pseudo		*pseudo;
+	struct pseudo_dev	*dev;
+};
+	
+struct pseudo {
+	int			names;
+	int			count;
+	struct pseudo_entry	*name;
+};
+
+extern int read_pseudo_def(struct pseudo **, char *);
+extern int read_pseudo_file(struct pseudo **, char *);
+extern struct pseudo *pseudo_subdir(char *, struct pseudo *);
+extern struct pseudo_entry *pseudo_readdir(struct pseudo *);
