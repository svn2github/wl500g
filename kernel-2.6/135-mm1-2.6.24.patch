kernel.org commits

001281881067a5998384c6669bc8dbbbab8456c4
Subject: [PATCH] mm: use lockless radix-tree probe
Probing pages and radix_tree_tagged are lockless operations with the lockless
radix-tree.  Convert these users to RCU locking rather than using tree_lock.

fe071d7e8aae5745c009c808bb8933f22a9e305a
Subject: [PATCH] oom: add oom_kill_allocating_task sysctl
Adds a new sysctl, 'oom_kill_allocating_task', which will automatically kill
the OOM-triggering task instead of scanning through the tasklist to find a
memory-hogging target.  This is helpful for systems with an insanely large
number of tasks where scanning the tasklist significantly degrades
performance.

diff -BurpN linux-2.6.22.19/Documentation/sysctl/vm.txt linux-2.6.24/Documentation/sysctl/vm.txt
--- linux-2.6.22.19/Documentation/sysctl/vm.txt	2008-02-25 23:59:40.000000000 +0000
+++ linux-2.6.24/Documentation/sysctl/vm.txt	2010-08-19 17:54:37.000000000 +0000
@@ -108,6 +108,27 @@ of kilobytes free.  The VM uses this num
 value for each lowmem zone in the system.  Each lowmem zone gets 
 a number of reserved free pages based proportionally on its size.
 
+=============================================================
+
+oom_kill_allocating_task
+
+This enables or disables killing the OOM-triggering task in
+out-of-memory situations.
+
+If this is set to zero, the OOM killer will scan through the entire
+tasklist and select a task based on heuristics to kill.  This normally
+selects a rogue memory-hogging task that frees up a large amount of
+memory when killed.
+
+If this is set to non-zero, the OOM killer simply kills the task that
+triggered the out-of-memory condition.  This avoids the expensive
+tasklist scan.
+
+If panic_on_oom is selected, it takes precedence over whatever value
+is used in oom_kill_allocating_task.
+
+The default value is 0.
+
 ==============================================================
 
 percpu_pagelist_fraction
diff -BurpN linux-2.6.22.19/kernel/sysctl.c linux-2.6.24/kernel/sysctl.c
--- linux-2.6.22.19/kernel/sysctl.c	2008-02-25 23:59:40.000000000 +0000
+++ linux-2.6.24/kernel/sysctl.c	2010-08-19 17:54:37.000000000 +0000
@@ -64,6 +64,7 @@ extern int C_A_D;
 extern int sysctl_overcommit_memory;
 extern int sysctl_overcommit_ratio;
 extern int sysctl_panic_on_oom;
+extern int sysctl_oom_kill_allocating_task;
 extern int max_threads;
 extern int core_uses_pid;
 extern int suid_dumpable;
@@ -643,6 +644,14 @@ static ctl_table vm_table[] = {
 		.proc_handler	= &proc_dointvec,
 	},
 	{
+		.ctl_name	= CTL_UNNUMBERED,
+		.procname	= "oom_kill_allocating_task",
+		.data		= &sysctl_oom_kill_allocating_task,
+		.maxlen		= sizeof(sysctl_oom_kill_allocating_task),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
+	{
 		.ctl_name	= VM_OVERCOMMIT_RATIO,
 		.procname	= "overcommit_ratio",
 		.data		= &sysctl_overcommit_ratio,
diff -BurpN linux-2.6.22.19/mm/oom_kill.c linux-2.6.24/mm/oom_kill.c
--- linux-2.6.22.19/mm/oom_kill.c	2008-02-25 23:59:40.000000000 +0000
+++ linux-2.6.24/mm/oom_kill.c	2010-08-19 17:54:56.000000000 +0000
@@ -26,6 +26,7 @@
 #include <linux/notifier.h>
 
 int sysctl_panic_on_oom;
+int sysctl_oom_kill_allocating_task;
 /* #define DEBUG */
 
 /**
@@ -431,14 +432,16 @@ void out_of_memory(struct zonelist *zone
 				"No available memory (MPOL_BIND)");
 		break;
 
-	case CONSTRAINT_CPUSET:
-		oom_kill_process(current, points,
-				"No available memory in cpuset");
-		break;
-
 	case CONSTRAINT_NONE:
 		if (sysctl_panic_on_oom)
 			panic("out of memory. panic_on_oom is selected\n");
+		/* Fall-through */
+	case CONSTRAINT_CPUSET:
+		if (sysctl_oom_kill_allocating_task) {
+			oom_kill_process(current, points,
+					"Out of memory (oom_kill_allocating_task)");
+			break;
+		}
 retry:
 		/*
 		 * Rambo mode: Shoot down a process and hope it solves whatever
diff -BurpN linux-2.6.22.19/mm/page-writeback.c linux-2.6.24/mm/page-writeback.c
--- linux-2.6.22.19/mm/page-writeback.c	2008-02-25 23:59:40.000000000 +0000
+++ linux-2.6.24/mm/page-writeback.c	2010-08-19 17:50:36.000000000 +0000
@@ -1013,17 +1013,15 @@ int test_set_page_writeback(struct page 
 EXPORT_SYMBOL(test_set_page_writeback);
 
 /*
- * Return true if any of the pages in the mapping are marged with the
+ * Return true if any of the pages in the mapping are marked with the
  * passed tag.
  */
 int mapping_tagged(struct address_space *mapping, int tag)
 {
-	unsigned long flags;
 	int ret;
-
-	read_lock_irqsave(&mapping->tree_lock, flags);
+	rcu_read_lock();
 	ret = radix_tree_tagged(&mapping->page_tree, tag);
-	read_unlock_irqrestore(&mapping->tree_lock, flags);
+	rcu_read_unlock();
 	return ret;
 }
 EXPORT_SYMBOL(mapping_tagged);
diff -BurpN linux-2.6.22.19/mm/readahead.c linux-2.6.24/mm/readahead.c
--- linux-2.6.22.19/mm/readahead.c	2008-02-25 23:59:40.000000000 +0000
+++ linux-2.6.24/mm/readahead.c	2010-08-19 17:54:24.000000000 +0000
@@ -291,27 +291,25 @@ __do_page_cache_readahead(struct address
 	/*
 	 * Preallocate as many pages as we will need.
 	 */
-	read_lock_irq(&mapping->tree_lock);
 	for (page_idx = 0; page_idx < nr_to_read; page_idx++) {
 		pgoff_t page_offset = offset + page_idx;
 		
 		if (page_offset > end_index)
 			break;
 
+		rcu_read_lock();
 		page = radix_tree_lookup(&mapping->page_tree, page_offset);
+		rcu_read_unlock();
 		if (page)
 			continue;
 
-		read_unlock_irq(&mapping->tree_lock);
 		page = page_cache_alloc_cold(mapping);
-		read_lock_irq(&mapping->tree_lock);
 		if (!page)
 			break;
 		page->index = page_offset;
 		list_add(&page->lru, &page_pool);
 		ret++;
 	}
-	read_unlock_irq(&mapping->tree_lock);
 
 	/*
 	 * Now start the IO.  We ignore I/O errors - if the page is not
