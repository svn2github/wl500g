diff -urBbwp -x'.*' -x'*.o' linux-N16/arch/mips/kernel/scall32-o32.S linux-N12/arch/mips/kernel/scall32-o32.S
--- linux-N16/arch/mips/kernel/scall32-o32.S	2010-08-15 02:56:22.000000000 +0400
+++ linux-N12/arch/mips/kernel/scall32-o32.S	2010-08-15 03:06:43.000000000 +0400
@@ -670,6 +670,10 @@ einval:	li	v0, -ENOSYS
 	sys	sys_signalfd		3
 	sys	sys_timerfd		4
 	sys	sys_eventfd		1
+	sys	sys_track_flag		2	/* 4320 */ /* --SZ Angela 09.03 QOS */
+	sys	sys_set_mbss_nolan	1	/* Jiahao */
+	sys	sys_set_mbss_nowan	1	/* Jiahao */
+	sys	sys_set_mbss_prio	1	/* Jiahao */
 	.endm
 
 	/* We pre-compute the number of _instruction_ bytes needed to
diff -urBbwp -x'.*' -x'*.o' linux-N16/include/asm-mips/unistd.h linux-N12/include/asm-mips/unistd.h
--- linux-N16/include/asm-mips/unistd.h	2010-08-15 02:59:22.000000000 +0400
+++ linux-N12/include/asm-mips/unistd.h	2010-08-15 03:06:43.000000000 +0400
@@ -340,16 +340,25 @@
 #define __NR_signalfd			(__NR_Linux + 317)
 #define __NR_timerfd			(__NR_Linux + 318)
 #define __NR_eventfd			(__NR_Linux + 319)
+/* ASUS QOS */
+#define __NR_track_flag		(__NR_Linux+320)
+#define __NR_set_mbss_nolan		(__NR_Linux + 321)	// Jiahao
+#define __NR_set_mbss_nowan		(__NR_Linux + 322)	// Jiahao
+#define __NR_set_mbss_prio		(__NR_Linux + 323)	// Jiahao
 
 /*
  * Offset of the last Linux o32 flavoured syscall
  */
-#define __NR_Linux_syscalls		319
+//#define __NR_Linux_syscalls		319
+/* ASUS QOS */
+#define __NR_Linux_syscalls		323
 
 #endif /* _MIPS_SIM == _MIPS_SIM_ABI32 */
 
 #define __NR_O32_Linux			4000
-#define __NR_O32_Linux_syscalls		319
+//#define __NR_O32_Linux_syscalls		319
+/* ASUS QOS */
+#define __NR_O32_Linux_syscalls		323
 
 #if _MIPS_SIM == _MIPS_SIM_ABI64
 
diff -urBbwp -x'.*' -x'*.o' linux-N16/include/linux/netfilter_ipv4/ip_conntrack_tuple.h linux-N12/include/linux/netfilter_ipv4/ip_conntrack_tuple.h
--- linux-N16/include/linux/netfilter_ipv4/ip_conntrack_tuple.h	2010-08-15 02:59:15.000000000 +0400
+++ linux-N12/include/linux/netfilter_ipv4/ip_conntrack_tuple.h	2010-08-15 03:06:43.000000000 +0400
@@ -4,6 +4,8 @@
 #include <linux/types.h>
 #include <linux/netfilter/nf_conntrack_tuple_common.h>
 
+#define ASUS_QOS 1
+
 /* A `tuple' is a structure containing the information to uniquely
   identify a connection.  ie. if two packets have the same tuple, they
   are in the same connection; if not, they are not.
@@ -100,12 +102,35 @@ DEBUGP("tuple %p: %u %u.%u.%u.%u:%hu -> 
 /* If we're the first tuple, it's the original dir. */
 #define DIRECTION(h) ((enum ip_conntrack_dir)(h)->tuple.dst.dir)
 
+#ifdef ASUS_QOS
+#define IP_TRACK_MAX              10
+#define IP_TRACK_COMPARE          40
+
+#define IP_TRACK_FULL           0x01
+#define IP_TRACK_PORT           0x02
+#define IP_TRACK_DATA           0x04
+#define IP_TRACK_PD             0x08
+#define IP_TRACK_DOWN           0x10
+#define IP_TRACK_TIME           0x20
+
+struct ip_track
+{
+        int flag;
+        u_int8_t number;
+        int length[IP_TRACK_MAX];
+};
+#endif
+
 /* Connections have two entries in the hash table: one for each way */
 struct ip_conntrack_tuple_hash
 {
 	struct list_head list;
 
 	struct ip_conntrack_tuple tuple;
+
+#ifdef ASUS_QOS
+	struct ip_track track;
+#endif
 };
 
 #endif /* __KERNEL__ */
diff -urBbwp -x'.*' -x'*.o' linux-N16/include/linux/syscalls.h linux-N12/include/linux/syscalls.h
--- linux-N16/include/linux/syscalls.h	2010-08-15 02:59:14.000000000 +0400
+++ linux-N12/include/linux/syscalls.h	2010-08-15 03:06:43.000000000 +0400
@@ -611,6 +611,9 @@ asmlinkage long sys_timerfd(int ufd, int
 			    const struct itimerspec __user *utmr);
 asmlinkage long sys_eventfd(unsigned int count);
 
+asmlinkage long sys_track_flag(int __user *flag, ulong __user *addr);	//--SZ Angela 09.03 QOS
+asmlinkage long sys_set_mbss_nolan(unsigned char flag);
+asmlinkage long sys_set_mbss_nowan(unsigned char flag);
+asmlinkage long sys_set_mbss_prio(unsigned char flag);			// Jiahao
 int kernel_execve(const char *filename, char *const argv[], char *const envp[]);
-
 #endif
diff -urBbwp -x'.*' -x'*.o' linux-N16/include/net/netfilter/nf_conntrack_tuple.h linux-N12/include/net/netfilter/nf_conntrack_tuple.h
--- linux-N16/include/net/netfilter/nf_conntrack_tuple.h	2010-08-15 02:59:19.000000000 +0400
+++ linux-N12/include/net/netfilter/nf_conntrack_tuple.h	2010-08-15 03:06:43.000000000 +0400
@@ -122,12 +122,23 @@ DEBUGP("tuple %p: %u %u " NIP6_FMT " %hu
 #define NF_CT_DIRECTION(h)						\
 	((enum ip_conntrack_dir)(h)->tuple.dst.dir)
 
+//--SZ Angela 09.03 Add for QOS {
+struct ip_track 
+{
+	u_int8_t number;
+	u_int8_t large_packet;
+	u_int8_t flag;
+};
+//--SZ angela 09.03 Add for QOS }
+
 /* Connections have two entries in the hash table: one for each way */
 struct nf_conntrack_tuple_hash
 {
 	struct list_head list;
 
 	struct nf_conntrack_tuple tuple;
+
+	struct ip_track track; //--SZ angela 09.03
 };
 
 #endif /* __KERNEL__ */
diff -urBbwp -x'.*' -x'*.o' linux-N16/kernel/sys.c linux-N12/kernel/sys.c
--- linux-N16/kernel/sys.c	2010-08-15 02:59:51.000000000 +0400
+++ linux-N12/kernel/sys.c	2010-08-15 03:06:53.000000000 +0400
@@ -2276,3 +2276,171 @@ asmlinkage long sys_getcpu(unsigned __us
 	}
 	return err ? -EFAULT : 0;
 }
+
+//--SZ Angela 09.03 QOS {
+int track_flag = 0;
+ulong ipaddr = 0;
+
+int clean_flag = 0; // 2009.04 James. wanduck.
+
+asmlinkage long sys_track_flag(int __user *flag, ulong __user *addr)
+{
+	int in_flag, err;
+	err = get_user(in_flag, flag);
+
+	if(in_flag == 0 || in_flag == 1){
+		track_flag = in_flag;
+		if(track_flag == 1)
+			err = get_user(ipaddr, addr);
+	}
+// 2009.04 James. wanduck. {
+	else if(in_flag == 100 || in_flag == 101)
+		clean_flag = in_flag;//*/
+// 2009.04 James. wanduck. }
+	//printk("track_flag=%d, ipaddr=%ld\n", track_flag, ipaddr);
+	printk("[k] track_flag=%d, clean_flag=%d, ipaddr=%lu\n", track_flag, clean_flag, ipaddr);       // tmp test
+
+	return err ? -EFAULT : 0;
+}
+EXPORT_SYMBOL(track_flag);
+EXPORT_SYMBOL(ipaddr);
+EXPORT_SYMBOL(clean_flag); // wanduck.
+//--SZ Angela 09.03 QOS }
+
+#define MBSS_NOLAN_SSID_MAIN	0x0001			// Jiahao
+#define MBSS_NOLAN_SSID_1	0x0002			// Jiahao
+#define MBSS_NOLAN_SSID_2	0x0004			// Jiahao
+#define MBSS_NOLAN_SSID_3	0x0008			// Jiahao
+unsigned char mbss_nolan_g = 0;				// Jiahao
+unsigned char mbss_nolan_M_1 = 0;			// Jiahao
+unsigned char mbss_nolan_M_2 = 0;			// Jiahao
+unsigned char mbss_nolan_M_3 = 0;			// Jiahao
+unsigned char mbss_nolan_1_2 = 0;			// Jiahao
+unsigned char mbss_nolan_1_3 = 0;			// Jiahao
+unsigned char mbss_nolan_2_3 = 0;			// Jiahao
+unsigned char mbss_nolan_1 = 0;				// Jiahao
+unsigned char mbss_nolan_2 = 0;				// Jiahao
+unsigned char mbss_nolan_3 = 0;				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_g);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_M_1);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_M_2);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_M_3);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_1_2);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_1_3);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_2_3);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_1);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_2);				// Jiahao
+EXPORT_SYMBOL(mbss_nolan_3);				// Jiahao
+
+asmlinkage long sys_set_mbss_nolan(unsigned char flag)	// Jiahao
+{
+	printk("sys_set_mbss_nolan: %d\n", flag);
+
+	if (!flag)
+		return 0;
+	else
+		mbss_nolan_g = 1;
+
+	if ( (flag & MBSS_NOLAN_SSID_MAIN) || (flag & MBSS_NOLAN_SSID_1) )
+		mbss_nolan_M_1 = 1;
+
+	if ( (flag & MBSS_NOLAN_SSID_MAIN) || (flag & MBSS_NOLAN_SSID_2) )
+		mbss_nolan_M_2 = 1;
+
+	if ( (flag & MBSS_NOLAN_SSID_MAIN) || (flag & MBSS_NOLAN_SSID_3) )
+		mbss_nolan_M_3 = 1;
+
+	if ( (flag & MBSS_NOLAN_SSID_1) || (flag & MBSS_NOLAN_SSID_2) )
+		mbss_nolan_1_2 = 1;
+
+	if ( (flag & MBSS_NOLAN_SSID_1) || (flag & MBSS_NOLAN_SSID_3) )
+		mbss_nolan_1_3 = 1;
+
+	if ( (flag & MBSS_NOLAN_SSID_2) || (flag & MBSS_NOLAN_SSID_3) )
+		mbss_nolan_2_3 = 1;
+
+	if (flag & MBSS_NOLAN_SSID_1)
+		mbss_nolan_1 = 1;
+
+	if (flag & MBSS_NOLAN_SSID_2)
+		mbss_nolan_2 = 1;
+
+	if (flag & MBSS_NOLAN_SSID_3)
+		mbss_nolan_3 = 1;
+
+	return 0;
+}
+
+#define MBSS_NOWAN_SSID_MAIN	0x0001			// Jiahao
+#define MBSS_NOWAN_SSID_1	0x0002			// Jiahao
+#define MBSS_NOWAN_SSID_2	0x0004			// Jiahao
+#define MBSS_NOWAN_SSID_3	0x0008			// Jiahao
+unsigned char mbss_nowan_g = 0;				// Jiahao
+unsigned char mbss_nowan_1 = 0;				// Jiahao
+unsigned char mbss_nowan_2 = 0;				// Jiahao
+unsigned char mbss_nowan_3 = 0;				// Jiahao
+EXPORT_SYMBOL(mbss_nowan_g);				// Jiahao
+EXPORT_SYMBOL(mbss_nowan_1);				// Jiahao
+EXPORT_SYMBOL(mbss_nowan_2);				// Jiahao
+EXPORT_SYMBOL(mbss_nowan_3);				// Jiahao
+
+asmlinkage long sys_set_mbss_nowan(unsigned char flag)	// Jiahao
+{
+	printk("sys_set_mbss_nowan: %d\n", flag);
+
+	if (!flag)
+		return 0;
+	else
+		mbss_nowan_g = 1;
+
+	if (flag & MBSS_NOWAN_SSID_1)
+		mbss_nowan_1 = 1;
+
+	if (flag & MBSS_NOWAN_SSID_2)
+		mbss_nowan_2 = 1;
+
+	if (flag & MBSS_NOWAN_SSID_3)
+		mbss_nowan_3 = 1;
+
+	return 0;
+}
+
+#define MBSS_PRIO_SSID_MAIN_LOW		0x0001		// Jiahao
+#define MBSS_PRIO_SSID_MAIN_NORMAL	0x0002		// Jiahao
+#define MBSS_PRIO_SSID_1_LOW		0x0004		// Jiahao
+#define MBSS_PRIO_SSID_1_NORMAL		0x0008		// Jiahao
+#define MBSS_PRIO_SSID_2_LOW		0x0010		// Jiahao
+#define MBSS_PRIO_SSID_2_NORMAL		0x0020		// Jiahao
+#define MBSS_PRIO_SSID_3_LOW		0x0040		// Jiahao
+#define MBSS_PRIO_SSID_3_NORMAL		0x0080		// Jiahao
+unsigned char mbss_prio_1 = 1;				// Jiahao
+unsigned char mbss_prio_2 = 1;				// Jiahao
+unsigned char mbss_prio_3 = 1;				// Jiahao
+EXPORT_SYMBOL(mbss_prio_1);				// Jiahao
+EXPORT_SYMBOL(mbss_prio_2);				// Jiahao
+EXPORT_SYMBOL(mbss_prio_3);				// Jiahao
+
+asmlinkage long sys_set_mbss_prio(unsigned char flag)	// Jiahao
+{
+	printk("sys_set_mbss_prio: %d\n", flag);
+
+	if (!flag)
+		return 0;
+
+	if (flag & MBSS_PRIO_SSID_1_LOW)
+		mbss_prio_1 = 0;
+	else if (flag & MBSS_PRIO_SSID_1_NORMAL)
+		mbss_prio_1 = 1;
+
+	if (flag & MBSS_PRIO_SSID_2_LOW)
+		mbss_prio_2 = 0;
+	else if (flag & MBSS_PRIO_SSID_2_NORMAL)
+		mbss_prio_2 = 1;
+
+	if (flag & MBSS_PRIO_SSID_3_LOW)
+		mbss_prio_3 = 0;
+	else if (flag & MBSS_PRIO_SSID_3_NORMAL)
+		mbss_prio_3 = 1;
+
+	return 0;
+}
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/bridge/br_forward.c linux-N12/net/bridge/br_forward.c
--- linux-N16/net/bridge/br_forward.c	2010-08-15 02:57:46.000000000 +0400
+++ linux-N12/net/bridge/br_forward.c	2010-08-15 03:06:53.000000000 +0400
@@ -20,11 +20,101 @@
 #include <linux/netfilter_bridge.h>
 #include "br_private.h"
 
+extern unsigned char mbss_nolan_g;				// Jiahao
+extern unsigned char mbss_nolan_M_1;				// Jiahao
+extern unsigned char mbss_nolan_M_2;				// Jiahao
+extern unsigned char mbss_nolan_M_3;				// Jiahao
+extern unsigned char mbss_nolan_1_2;				// Jiahao
+extern unsigned char mbss_nolan_1_3;				// Jiahao
+extern unsigned char mbss_nolan_2_3;				// Jiahao
+extern unsigned char mbss_nolan_1;				// Jiahao
+extern unsigned char mbss_nolan_2;				// Jiahao
+extern unsigned char mbss_nolan_3;				// Jiahao
+
+int SSID1_to_SSID2(unsigned char *deva, unsigned char *devb)	// Jiahao
+{
+	if (!mbss_nolan_g)
+		return 0;
+
+	if ( mbss_nolan_M_1 && !strncmp(deva + 3, "1", 1) && !strncmp(devb + 3, ".1", 2) )
+		return 1;
+	else if ( mbss_nolan_M_2 && !strncmp(deva + 3, "1", 1) && !strncmp(devb + 3, ".2", 2) )
+		return 1;
+	else if ( mbss_nolan_M_3 && !strncmp(deva + 3, "1", 1) && !strncmp(devb + 3, ".3", 2) )
+		return 1;
+
+	else if ( mbss_nolan_M_1 && !strncmp(deva + 3, ".1", 2) && !strncmp(devb + 3, "1", 1) )
+		return 1;
+	else if ( mbss_nolan_1_2 && !strncmp(deva + 3, ".1", 2) && !strncmp(devb + 3, ".2", 2) )
+		return 1;
+	else if ( mbss_nolan_1_3 && !strncmp(deva + 3, ".1", 2) && !strncmp(devb + 3, ".3", 2) )
+		return 1;
+	else if ( mbss_nolan_1 && !strncmp(deva + 3, ".1", 2) && !strncmp(devb, "v", 1) )
+		return 1;
+
+	else if ( mbss_nolan_M_2 && !strncmp(deva + 3, ".2", 2) && !strncmp(devb + 3, "1", 1) )
+		return 1;
+	else if ( mbss_nolan_1_2 && !strncmp(deva + 3, ".2", 2) && !strncmp(devb + 3, ".1", 2) )
+		return 1;
+	else if ( mbss_nolan_2_3 && !strncmp(deva + 3, ".2", 2) && !strncmp(devb + 3, ".3", 2) )
+		return 1;
+	else if ( mbss_nolan_2 && !strncmp(deva + 3, ".2", 2) && !strncmp(devb, "v", 1) )
+		return 1;
+
+	else if ( mbss_nolan_M_3 && !strncmp(deva + 3, ".3", 2) && !strncmp(devb + 3, "1", 1) )
+		return 1;
+	else if ( mbss_nolan_1_3 && !strncmp(deva + 3, ".3", 2) && !strncmp(devb + 3, ".1", 2) )
+		return 1;
+	else if ( mbss_nolan_2_3 && !strncmp(deva + 3, ".3", 2) && !strncmp(devb + 3, ".2", 2) )
+		return 1;
+	else if ( mbss_nolan_3 && !strncmp(deva + 3, ".3", 2) && !strncmp(devb, "v", 1) )
+		return 1;
+
+/*
+	if ( mbss_nolan_M_1 && !strncmp(deva, "eth1", 4) && !strncmp(devb, "wl0.1", 5) )
+		return 1;
+	else if ( mbss_nolan_M_2 && !strncmp(deva, "eth1", 4) && !strncmp(devb, "wl0.2", 5) )
+		return 1;
+	else if ( mbss_nolan_M_3 && !strncmp(deva, "eth1", 4) && !strncmp(devb, "wl0.3", 5) )
+		return 1;
+
+	else if ( mbss_nolan_M_1 && !strncmp(deva, "wl0.1", 5) && !strncmp(devb, "eth1", 4) )
+		return 1;
+	else if ( mbss_nolan_1_2 && !strncmp(deva, "wl0.1", 5) && !strncmp(devb, "wl0.2", 5) )
+		return 1;
+	else if ( mbss_nolan_1_3 && !strncmp(deva, "wl0.1", 5) && !strncmp(devb, "wl0.3", 5) )
+		return 1;
+	else if ( mbss_nolan_1 && !strncmp(deva, "wl0.1", 5) && !strncmp(devb, "vlan1", 5) )
+		return 1;
+
+	else if ( mbss_nolan_M_2 && !strncmp(deva, "wl0.2", 5) && !strncmp(devb, "eth1", 4) )
+		return 1;
+	else if ( mbss_nolan_1_2 && !strncmp(deva, "wl0.2", 5) && !strncmp(devb, "wl0.1", 5) )
+		return 1;
+	else if ( mbss_nolan_2_3 && !strncmp(deva, "wl0.2", 5) && !strncmp(devb, "wl0.3", 5) )
+		return 1;
+	else if ( mbss_nolan_2 && !strncmp(deva, "wl0.2", 5) && !strncmp(devb, "vlan1", 5) )
+		return 1;
+
+	else if ( mbss_nolan_M_3 && !strncmp(deva, "wl0.3", 5) && !strncmp(devb, "eth1", 4) )
+		return 1;
+	else if ( mbss_nolan_1_3 && !strncmp(deva, "wl0.3", 5) && !strncmp(devb, "wl0.1", 5) )
+		return 1;
+	else if ( mbss_nolan_2_3 && !strncmp(deva, "wl0.3", 5) && !strncmp(devb, "wl0.2", 5) )
+		return 1;
+	else if ( mbss_nolan_3 && !strncmp(deva, "wl0.3", 5) && !strncmp(devb, "vlan1", 5) )
+		return 1;
+*/
+
+	return 0;
+}
+
 /* Don't forward packets to originating port or forwarding diasabled */
 static inline int should_deliver(const struct net_bridge_port *p,
 				 const struct sk_buff *skb)
 {
-	return (skb->dev != p->dev && p->state == BR_STATE_FORWARDING);
+//	return (skb->dev != p->dev && p->state == BR_STATE_FORWARDING);	// Jiahao
+	return ((skb->dev != p->dev && p->state == BR_STATE_FORWARDING) && !SSID1_to_SSID2(skb->dev->name, p->dev->name));
 }
 
 static inline unsigned packet_length(const struct sk_buff *skb)
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/bridge/br_private.h linux-N12/net/bridge/br_private.h
--- linux-N16/net/bridge/br_private.h	2010-08-15 02:57:46.000000000 +0400
+++ linux-N12/net/bridge/br_private.h	2010-08-15 03:06:53.000000000 +0400
@@ -178,6 +178,7 @@ extern void br_flood_deliver(struct net_
 extern void br_flood_forward(struct net_bridge *br,
 		      struct sk_buff *skb,
 		      int clone);
+extern int SSID1_to_SSID2(unsigned char *deva, unsigned char *devb);	// Jiahao
 
 /* br_if.c */
 extern void br_port_carrier_check(struct net_bridge_port *p);
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/core/dev.c linux-N12/net/core/dev.c
--- linux-N16/net/core/dev.c	2010-08-15 02:57:44.000000000 +0400
+++ linux-N12/net/core/dev.c	2010-08-15 03:06:53.000000000 +0400
@@ -1646,6 +1646,15 @@ int netif_rx(struct sk_buff *skb)
 	if (!skb->tstamp.tv64)
 		net_timestamp(skb);
 
+	if (!strncmp(skb->dev->name + 3, ".1", 2))	/* Jiahao: match wl0.1 */
+		skb->wl_idx = 0x2;
+	else if (!strncmp(skb->dev->name + 3, ".2", 2))	/* Jiahao: match wl0.2 */
+		skb->wl_idx = 0x4;
+	else if (!strncmp(skb->dev->name + 3, ".3", 2))	/* Jiahao: match wl0.3 */
+		skb->wl_idx = 0x8;
+	else						/* Angela: for priority ssid and lan */
+		skb->wl_idx = 0x0;
+
 	/*
 	 * The code is rearranged so that the path is the most
 	 * short when CPU is congested, but is still operating.
@@ -3002,6 +3011,46 @@ int dev_ioctl(unsigned int cmd, void __u
 			     cmd <= SIOCDEVPRIVATE + 15)) {
 				dev_load(ifr.ifr_name);
 				rtnl_lock();
+
+#ifdef REMOVE
+				if (strcmp(ifr.ifr_name, "eth1") == 0 && cmd >= SIOCDEVPRIVATE)
+				{
+					typedef struct wl_ioctl
+					{
+						unsigned int cmd;
+						void *buf;
+						unsigned int len;
+						char set;
+						unsigned int used;
+						unsigned int needed;
+					} wl_ioctl_t;
+
+					wl_ioctl_t *ioc;
+					int i;
+					unsigned char *dd;
+
+					ioc = (wl_ioctl_t *) ifr.ifr_data;
+
+//					if (ioc->cmd == 50)
+//					{
+						dd = (unsigned char *) ioc->buf;
+						printk("\ncmd = %d\n", ioc->cmd);
+
+						if(ioc && dd)
+						{
+							for(i=0; i < ioc->len; i++)
+							{
+								printk("%x ", dd[i]);
+								if (i%16 == 0)
+									printk("\n");
+							}
+							printk("\n");
+						}
+//					}
+				}
+#endif
+
+
 				ret = dev_ifsioc(&ifr, cmd);
 				rtnl_unlock();
 				if (!ret && copy_to_user(arg, &ifr,
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/ipv4/ip_forward.c linux-N12/net/ipv4/ip_forward.c
--- linux-N16/net/ipv4/ip_forward.c	2010-08-15 02:57:45.000000000 +0400
+++ linux-N12/net/ipv4/ip_forward.c	2010-08-15 03:06:53.000000000 +0400
@@ -52,12 +52,32 @@ static inline int ip_forward_finish(stru
 	return dst_output(skb);
 }
 
+extern unsigned char mbss_nowan_g;				// Jiahao
+extern unsigned char mbss_nowan_1;				// Jiahao
+extern unsigned char mbss_nowan_2;				// Jiahao
+extern unsigned char mbss_nowan_3;				// Jiahao
+
+#define MBSS_NOWAN_SSID_MAIN	0x0001				// Jiahao
+#define MBSS_NOWAN_SSID_1	0x0002				// Jiahao
+#define MBSS_NOWAN_SSID_2	0x0004				// Jiahao
+#define MBSS_NOWAN_SSID_3	0x0008				// Jiahao
+
 int ip_forward(struct sk_buff *skb)
 {
 	struct iphdr *iph;	/* Our header */
 	struct rtable *rt;	/* Route we use */
 	struct ip_options * opt	= &(IPCB(skb)->opt);
 
+	if (mbss_nowan_g)					// Jiahao
+	{
+		if (mbss_nowan_1 && (skb->wl_idx & MBSS_NOWAN_SSID_1))
+			goto drop;
+		else if (mbss_nowan_2 && (skb->wl_idx & MBSS_NOWAN_SSID_2))
+			goto drop;
+		else if (mbss_nowan_3 && (skb->wl_idx & MBSS_NOWAN_SSID_3))
+			goto drop;
+	}
+
 	if (!xfrm4_policy_check(NULL, XFRM_POLICY_FWD, skb))
 		goto drop;
 
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/netfilter/nf_conntrack_core.c linux-N12/net/netfilter/nf_conntrack_core.c
--- linux-N16/net/netfilter/nf_conntrack_core.c	2010-08-15 02:57:44.000000000 +0400
+++ linux-N12/net/netfilter/nf_conntrack_core.c	2010-08-15 03:06:53.000000000 +0400
@@ -29,6 +29,7 @@
 #include <linux/netdevice.h>
 #include <linux/socket.h>
 #include <linux/mm.h>
+#include <linux/ip.h>
 
 #include <net/netfilter/nf_conntrack.h>
 #include <net/netfilter/nf_conntrack_l3proto.h>
@@ -106,6 +107,22 @@ static DEFINE_MUTEX(nf_ct_cache_mutex);
 static int nf_conntrack_hash_rnd_initted;
 static unsigned int nf_conntrack_hash_rnd;
 
+//--SZ angela 09.03 {
+#define IP_TRACK_SMALL		0x01
+#define IP_TRACK_PORT		0x02
+#define IP_TRACK_DATA		0x04
+#define	IP_TRACK_UDP		0x08
+
+extern int track_flag;
+extern ulong ipaddr;
+u_int8_t port_num_udp[65536];
+
+extern unsigned char mbss_prio_1;	//SZ-Angela Add for Multiple SSID
+extern unsigned char mbss_prio_2;
+extern unsigned char mbss_prio_3;
+
+//--SZ angela 09.03 }
+
 static u_int32_t __hash_conntrack(const struct nf_conntrack_tuple *tuple,
 				  unsigned int size, unsigned int rnd)
 {
@@ -696,6 +713,21 @@ init_conntrack(const struct nf_conntrack
 	}
 
 	write_lock_bh(&nf_conntrack_lock);
+	//--SZ angela 09.03 {
+	/* if the qos enable and the layer 3 protocol is ipv4 */
+	if((track_flag == 1) && (strcmp(l3proto->name, "ipv4") == 0)) {
+		conntrack->tuplehash[IP_CT_DIR_ORIGINAL].track.flag = 0;
+		conntrack->tuplehash[IP_CT_DIR_ORIGINAL].track.number =1;
+
+		if(strcmp(l4proto->name, "udp") == 0) {		
+			if(conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u3.ip == ipaddr)
+			 	port_num_udp[conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.all]++;
+			else
+				port_num_udp[conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u.all]++;
+		}	
+	}
+	//--SZ angela 09.03 }
+	
 	exp = find_expectation(tuple);
 
 	help = nfct_help(conntrack);
@@ -738,6 +770,100 @@ init_conntrack(const struct nf_conntrack
 	return &conntrack->tuplehash[IP_CT_DIR_ORIGINAL];
 }
 
+//--SZ angela 09.03 {
+//On success, returns h->track.flags & IP_TRACK_MARK 
+inline int deal_track(struct nf_conntrack_tuple_hash *h, int len)
+{
+	struct nf_conntrack_tuple_hash *rep_h;
+	unsigned int port=0, dport=0;
+	struct nf_conn *ct = NULL;
+
+	// Add the packet number of this connect track and record the length of the packet 
+	h->track.number ++;
+//	if((h->track.flag & IP_TRACK_FULL) != IP_TRACK_FULL)
+//	{
+		if(len > 512)
+			h->track.large_packet++;
+//	}
+	
+	// The download packet set the IP_TRACK_DOWN flag 
+	if(ntohl(h->tuple.dst.u3.ip) == ipaddr)
+	{	
+	       port = h->tuple.dst.u.all;
+	       dport = h->tuple.src.u.all;
+	}
+	else
+	{
+		port = h->tuple.src.u.all;
+		dport = h->tuple.dst.u.all;
+	}
+		
+	// if the connect track is data connect ,we return IP_TRACK_DATA 
+	if((h->track.flag & IP_TRACK_DATA) == IP_TRACK_DATA)	
+		return IP_TRACK_DATA;
+	
+	// if the destination port of this connect track is one of 80,8080,443.We return IP_TRACK_PORT
+	if((h->track.flag & IP_TRACK_PORT) == IP_TRACK_PORT)
+		return IP_TRACK_PORT;
+
+	if((h->track.flag & IP_TRACK_SMALL) == IP_TRACK_SMALL)
+		return IP_TRACK_SMALL;
+
+	if((h->track.flag & IP_TRACK_UDP) == IP_TRACK_UDP)
+		return IP_TRACK_UDP;
+	
+	ct = nf_ct_tuplehash_to_ctrack(h);
+
+	//start compare 
+	if(NF_CT_DIRECTION(h) == IP_CT_DIR_REPLY)
+		rep_h = &ct->tuplehash[IP_CT_DIR_ORIGINAL];
+	else
+		rep_h = &ct->tuplehash[IP_CT_DIR_REPLY];
+	if(!rep_h)
+		return 0;
+
+	if(ntohs(dport) == 80 || ntohs(dport) == 8080 || ntohs(dport) == 443)
+       	{
+  		h->track.flag |= IP_TRACK_PORT;
+		rep_h->track.flag |= IP_TRACK_PORT;
+		return IP_TRACK_PORT;
+	}
+
+	// if the port has connections more than 30, we mark it and return IP_TRACK_UDP
+	// h->tuple.dst.protonum == 17 &&
+	if((port_num_udp[port] > 30 || port_num_udp[dport] >30)) 
+	{
+		h->track.flag |= IP_TRACK_UDP;		
+		rep_h->track.flag |= IP_TRACK_UDP;
+		return IP_TRACK_UDP;
+	}
+
+	if(h->track.number == 250)
+	{
+		if(h->track.large_packet<70)
+		{
+			if((rep_h->track.flag & IP_TRACK_DATA) == IP_TRACK_DATA)
+			{
+				h->track.flag |= IP_TRACK_DATA;
+				return IP_TRACK_DATA;
+			}
+			h->track.flag |= IP_TRACK_SMALL;
+			return IP_TRACK_SMALL;
+		}
+		
+		if((rep_h->track.flag & IP_TRACK_SMALL) == IP_TRACK_SMALL)
+		{
+			rep_h->track.flag |= IP_TRACK_DATA;
+			rep_h->track.flag &= ~IP_TRACK_SMALL;
+		}
+		h->track.flag |= IP_TRACK_DATA;
+		return IP_TRACK_DATA;
+	}
+	
+	return 0;
+}	
+//--SZ angela 09.03 }
+
 /* On success, returns conntrack ptr, sets skb->nfct and ctinfo */
 static inline struct nf_conn *
 resolve_normal_ct(struct sk_buff *skb,
@@ -768,7 +894,64 @@ resolve_normal_ct(struct sk_buff *skb,
 			return NULL;
 		if (IS_ERR(h))
 			return (void *)h;
+	}//--SZ angela 09.03 {
+	else if((track_flag == 1) && (strcmp(l3proto->name, "ipv4") == 0)) { 
+		write_lock_bh(&nf_conntrack_lock);
+	      
+		switch(deal_track(h, ntohs(ip_hdr(skb)->tot_len))) {
+			case IP_TRACK_UDP:
+				if(ntohl(h->tuple.dst.u3.ip) == ipaddr)
+					skb->mark = 91;
+				else 
+					skb->mark = 51;
+				break;
+			case IP_TRACK_DATA:
+				if(ntohl(h->tuple.dst.u3.ip) == ipaddr)
+					skb->mark = 90;
+				else 
+					skb->mark = 50;
+				break;
+			case IP_TRACK_PORT:
+				if(ntohl(h->tuple.dst.u3.ip) == ipaddr)
+					skb->mark = 80;
+				else
+					skb->mark = 20;
+				break;
+			case IP_TRACK_SMALL:
+				if(ntohl(h->tuple.dst.u3.ip) == ipaddr)
+					skb->mark = 70;
+				else
+					skb->mark = 10;
+				break;
+			default:
+				if(ntohl(h->tuple.dst.u3.ip) == ipaddr)
+					skb->mark = 90;
+				else
+					skb->mark = 50;
+				break;
+	}
+
+		switch(skb->wl_idx)	//SZ-Angela Add for Multiple SSID
+		{
+			case 2:
+				if(mbss_prio_1 == 0)
+					skb->mark = 60;
+				break;
+			case 4:
+				if(mbss_prio_2 == 0)
+					skb->mark = 60;
+				break;
+			case 8:
+				if(mbss_prio_3 == 0)
+					skb->mark = 60;
+				break;
+			default:
+				break;
 	}
+
+		write_unlock_bh(&nf_conntrack_lock);			
+	} //--SZ angela 09.03 }
+
 	ct = nf_ct_tuplehash_to_ctrack(h);
 
 	/* It exists; we have (non-exclusive) reference. */
@@ -1238,6 +1421,9 @@ int __init nf_conntrack_init(void)
 	}
 	nf_conntrack_max = 8 * nf_conntrack_htable_size;
 
+	for(ret=0; ret<65535; ret++)		//--SZ Angela 09.03 QOS Initialization
+		port_num_udp[ret]=0;
+
 	printk("nf_conntrack version %s (%u buckets, %d max)\n",
 	       NF_CONNTRACK_VERSION, nf_conntrack_htable_size,
 	       nf_conntrack_max);
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/netfilter/nf_conntrack_proto_tcp.c linux-N12/net/netfilter/nf_conntrack_proto_tcp.c
--- linux-N16/net/netfilter/nf_conntrack_proto_tcp.c	2010-08-15 02:57:44.000000000 +0400
+++ linux-N12/net/netfilter/nf_conntrack_proto_tcp.c	2010-08-15 03:06:43.000000000 +0400
@@ -30,6 +30,8 @@
 #define DEBUGP printk
 #define DEBUGP_VARS
 #else
+extern int clean_flag; // 2009.04 James. wanduck.
+
 #define DEBUGP(format, args...)
 #endif
 
@@ -315,6 +317,11 @@ static int tcp_print_conntrack(struct se
 {
 	enum tcp_conntrack state;
 
+// 2009.04 James. wanduck. {
+	if(clean_flag == 101)
+		nf_ct_refresh(conntrack, NULL, 0);
+// 2009.04 James. wanduck. }
+
 	read_lock_bh(&tcp_lock);
 	state = conntrack->proto.tcp.state;
 	read_unlock_bh(&tcp_lock);
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/netfilter/nf_conntrack_proto_udp.c linux-N12/net/netfilter/nf_conntrack_proto_udp.c
--- linux-N16/net/netfilter/nf_conntrack_proto_udp.c	2010-08-15 02:57:44.000000000 +0400
+++ linux-N12/net/netfilter/nf_conntrack_proto_udp.c	2010-08-15 03:06:43.000000000 +0400
@@ -23,6 +23,8 @@
 #include <net/netfilter/nf_conntrack_l4proto.h>
 #include <net/netfilter/nf_conntrack_ecache.h>
 
+extern int clean_flag; // 2009.04 James. wanduck.
+
 static unsigned int nf_ct_udp_timeout __read_mostly = 30*HZ;
 static unsigned int nf_ct_udp_timeout_stream __read_mostly = 180*HZ;
 
@@ -64,6 +66,11 @@ static int udp_print_tuple(struct seq_fi
 static int udp_print_conntrack(struct seq_file *s,
 			       const struct nf_conn *conntrack)
 {
+// 2009.04 James. wanduck. {
+	if(clean_flag == 101)
+		nf_ct_refresh(conntrack, NULL, 0);
+// 2009.04 James. wanduck. }
+
 	return 0;
 }
 
diff -urBbwp -x'.*' -x'*.o' linux-N16/net/netfilter/nf_conntrack_standalone.c linux-N12/net/netfilter/nf_conntrack_standalone.c
--- linux-N16/net/netfilter/nf_conntrack_standalone.c	2010-08-15 02:57:44.000000000 +0400
+++ linux-N12/net/netfilter/nf_conntrack_standalone.c	2010-08-15 03:06:43.000000000 +0400
@@ -190,6 +190,125 @@ static int ct_seq_show(struct seq_file *
 	return 0;
 }
 
+//--SZ Angela 09.03 for QOS {
+/* return 0 on success, 1 in case of error */
+static int ct_seq_show_track(struct seq_file *s, void *v)
+{
+	const struct nf_conntrack_tuple_hash *hash = v;
+	const struct nf_conn *conntrack = nf_ct_tuplehash_to_ctrack(hash);
+	struct nf_conntrack_l3proto *l3proto;
+	struct nf_conntrack_l4proto *l4proto;
+
+	NF_CT_ASSERT(conntrack);
+
+	/* we only want to print DIR_ORIGINAL */
+	if (NF_CT_DIRECTION(hash))
+		return 0;
+
+	l3proto = __nf_ct_l3proto_find(conntrack->tuplehash[IP_CT_DIR_ORIGINAL]
+				       .tuple.src.l3num);
+
+	NF_CT_ASSERT(l3proto);
+	l4proto = __nf_ct_l4proto_find(conntrack->tuplehash[IP_CT_DIR_ORIGINAL]
+				   .tuple.src.l3num,
+				   conntrack->tuplehash[IP_CT_DIR_ORIGINAL]
+				   .tuple.dst.protonum);
+	NF_CT_ASSERT(l4proto);
+
+	if (seq_printf(s, "%-8s %u %-8s %u %ld ",
+		       l3proto->name,
+		       conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.l3num,
+		       l4proto->name,
+		       conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.protonum,
+		       timer_pending(&conntrack->timeout)
+		       ? (long)(conntrack->timeout.expires - jiffies)/HZ : 0) != 0)
+		return -ENOSPC;
+
+	if (l3proto->print_conntrack(s, conntrack))
+		return -ENOSPC;
+
+	if (l4proto->print_conntrack(s, conntrack))
+		return -ENOSPC;
+
+	if (print_tuple(s, &conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple,
+			l3proto, l4proto))
+		return -ENOSPC;
+
+	if (seq_print_counters(s, &conntrack->counters[IP_CT_DIR_ORIGINAL]))
+		return -ENOSPC;
+
+	if(seq_printf(s, " flag=%d number=%d large_packet=%d \n\t\t",
+			conntrack->tuplehash[IP_CT_DIR_ORIGINAL].track.flag,
+			conntrack->tuplehash[IP_CT_DIR_ORIGINAL].track.number,
+			conntrack->tuplehash[IP_CT_DIR_ORIGINAL].track.large_packet))
+		return -ENOSPC;
+
+	if (print_tuple(s, &conntrack->tuplehash[IP_CT_DIR_REPLY].tuple,
+			l3proto, l4proto))
+		return -ENOSPC;
+
+	if (seq_print_counters(s, &conntrack->counters[IP_CT_DIR_REPLY]))
+		return -ENOSPC;
+
+	if(seq_printf(s, " flag=%d number=%d large_packet=%d ",
+			conntrack->tuplehash[IP_CT_DIR_REPLY].track.flag,
+			conntrack->tuplehash[IP_CT_DIR_REPLY].track.number,
+			conntrack->tuplehash[IP_CT_DIR_REPLY].track.large_packet))
+		return -ENOSPC;
+
+#if defined(CONFIG_NF_CONNTRACK_MARK)
+	if (seq_printf(s, "mark=%u ", conntrack->mark))
+		return -ENOSPC;
+#endif
+
+#ifdef CONFIG_NF_CONNTRACK_SECMARK
+	if (seq_printf(s, "secmark=%u ", conntrack->secmark))
+		return -ENOSPC;
+#endif
+
+	if (seq_printf(s, "use=%u\n", atomic_read(&conntrack->ct_general.use)))
+		return -ENOSPC;
+	
+	return 0;
+}
+
+static struct seq_operations ct_seq_ops_track = {
+	.start = ct_seq_start,
+	.next  = ct_seq_next,
+	.stop  = ct_seq_stop,
+	.show  = ct_seq_show_track
+};
+
+static int ct_open_track(struct inode *inode, struct file *file)
+{
+	struct seq_file *seq;
+	struct ct_iter_state *st;
+	int ret;
+
+	st = kmalloc(sizeof(struct ct_iter_state), GFP_KERNEL);
+	if (st == NULL)
+		return -ENOMEM;
+	ret = seq_open(file, &ct_seq_ops_track);
+	if (ret)
+		goto out_free;
+	seq          = file->private_data;
+	seq->private = st;
+	memset(st, 0, sizeof(struct ct_iter_state));
+	return ret;
+out_free:
+	kfree(st);
+	return ret;
+}
+
+static const struct file_operations ct_file_ops_track = {
+	.owner   = THIS_MODULE,
+	.open    = ct_open_track,
+	.read    = seq_read,
+	.llseek  = seq_lseek,
+	.release = seq_release_private,
+};
+//--SZ Angela 09.03 }
+
 static struct seq_operations ct_seq_ops = {
 	.start = ct_seq_start,
 	.next  = ct_seq_next,
@@ -410,7 +529,7 @@ EXPORT_SYMBOL_GPL(nf_ct_log_invalid);
 static int __init nf_conntrack_standalone_init(void)
 {
 #ifdef CONFIG_PROC_FS
-	struct proc_dir_entry *proc, *proc_exp, *proc_stat;
+	struct proc_dir_entry *proc, *proc_track, *proc_exp, *proc_stat;
 #endif
 	int ret = 0;
 
@@ -422,6 +541,9 @@ static int __init nf_conntrack_standalon
 	proc = proc_net_fops_create("nf_conntrack", 0440, &ct_file_ops);
 	if (!proc) goto cleanup_init;
 
+	proc_track = proc_net_fops_create("ip_track", 0440, &ct_file_ops_track);	//--SZ Angela 09.03 QOS
+	if (!proc_track) goto cleanup_init_track;
+
 	proc_exp = proc_net_fops_create("nf_conntrack_expect", 0440,
 					&exp_file_ops);
 	if (!proc_exp) goto cleanup_proc;
@@ -452,6 +574,8 @@ static int __init nf_conntrack_standalon
 	proc_net_remove("nf_conntrack_expect");
  cleanup_proc:
 	proc_net_remove("nf_conntrack");
+cleanup_init_track:			//--SZ Angela 09.03 QOS
+	proc_net_remove("ip_track");
  cleanup_init:
 #endif /* CNFIG_PROC_FS */
 	nf_conntrack_cleanup();
