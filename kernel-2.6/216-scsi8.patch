[SCSI] fixes from upstream
 (Tomato-RT commits 18e3e7290ef7 , 2b22c1605895)

 kernel.org commits
 a9bddd74630b2a1f2dedc537417c372b2d9edc76 [SCSI] fix recovered error handling
 02bd3499a3be984f1e88821c3ed252c8c49c498e [SCSI] scsi_lib: only call scsi_unprep_request() under queue lock
 03b147083a2f9a2a3fbbd2505fa88ffa3c6ab194 [SCSI] scsi_lib: fix potential NULL dereference
 d8705f11d89cfabf4a9f0ea234d4809b22abb33e [SCSI] Correctly handle thin provisioning write error
 e7efe5932b1d3916c79326a4221693ea90a900e2 [SCSI] skip sense logging for some ATA PASS-THROUGH cdbs
 52aeeca9001d1b4037a8e5d0c001ebb5fdc61b37 [SCSI] stale residual returned on write following BUSY retry
 77cca462c69d827fabee0ef3fdab86109c2fe8d8 [SCSI] hosts.c: fixes for "no error" reported after error scenarios
 77c019768f0607c36e25bec11ce3e1eabef09277 [SCSI] fix /proc memory leak in the SCSI core
 30c9afa6cc477f6f21f8a0b36f3b81080941a0c9 fix race that can give duplicate host number
 4e46bf89972b9d98a9f282a9fed2359756a5e34e [SCSI] fix crash when disconnecting usb storage
 32aeef605aa01e1fee45e052eceffb00e72ba2b0 [SCSI] Skip deleted devices in __scsi_device_lookup_by_target()
 ebef264bd90abb8bcafe29e5ba5492da4f7d4492 [SCSI] use kmem_cache_zalloc instead of kmem_cache_alloc/memset

---
 drivers/scsi/hosts.c    |   29 ++++++++++++++++++++---------
 drivers/scsi/scsi.c     |    9 +++++----
 drivers/scsi/scsi_lib.c |   33 +++++++++++++++++++++++++++++----
 drivers/scsi/sd.c       |    6 ------
 drivers/scsi/sr.c       |    9 ---------
 5 files changed, 54 insertions(+), 32 deletions(-)

diff -urBp a/drivers/scsi/hosts.c b/drivers/scsi/hosts.c
--- a/drivers/scsi/hosts.c	2011-02-12 22:10:57.000000000 +0300
+++ b/drivers/scsi/hosts.c	2011-02-12 22:23:34.000000000 +0300
@@ -40,7 +40,7 @@
 #include "scsi_logging.h"
 
 
-static int scsi_host_next_hn;		/* host_no for next new host */
+static atomic_t scsi_host_next_hn;	/* host_no for next new host */
 
 
 static void scsi_host_cls_release(struct class_device *class_dev)
@@ -165,8 +165,8 @@ void scsi_remove_host(struct Scsi_Host *
 			return;
 		}
 	spin_unlock_irqrestore(shost->host_lock, flags);
-	mutex_unlock(&shost->scan_mutex);
 	scsi_forget_host(shost);
+	mutex_unlock(&shost->scan_mutex);
 	scsi_proc_host_rm(shost);
 
 	spin_lock_irqsave(shost->host_lock, flags);
@@ -177,7 +177,6 @@ void scsi_remove_host(struct Scsi_Host *
 	transport_unregister_device(&shost->shost_gendev);
 	class_device_unregister(&shost->shost_classdev);
 	device_del(&shost->shost_gendev);
-	scsi_proc_hostdir_rm(shost->hostt);
 }
 EXPORT_SYMBOL(scsi_remove_host);
 
@@ -223,18 +222,24 @@ int scsi_add_host(struct Scsi_Host *shos
 
 	get_device(&shost->shost_gendev);
 
-	if (shost->transportt->host_size &&
-	    (shost->shost_data = kmalloc(shost->transportt->host_size,
-					 GFP_KERNEL)) == NULL)
-		goto out_del_classdev;
+	if (shost->transportt->host_size) {
+		shost->shost_data = kzalloc(shost->transportt->host_size,
+					 GFP_KERNEL);
+		if (shost->shost_data == NULL) {
+			error = -ENOMEM;
+			goto out_del_classdev;
+		}
+	}
 
 	if (shost->transportt->create_work_queue) {
 		snprintf(shost->work_q_name, KOBJ_NAME_LEN, "scsi_wq_%d",
 			shost->host_no);
 		shost->work_q = create_singlethread_workqueue(
 					shost->work_q_name);
-		if (!shost->work_q)
+		if (!shost->work_q) {
+			error = -EINVAL;
 			goto out_free_shost_data;
+		}
 	}
 
 	error = scsi_sysfs_add_host(shost);
@@ -265,6 +270,8 @@ static void scsi_host_dev_release(struct
 	struct Scsi_Host *shost = dev_to_shost(dev);
 	struct device *parent = dev->parent;
 
+	scsi_proc_hostdir_rm(shost->hostt);
+
 	if (shost->ehandler)
 		kthread_stop(shost->ehandler);
 	if (shost->work_q)
@@ -322,7 +329,11 @@ struct Scsi_Host *scsi_host_alloc(struct
 
 	mutex_init(&shost->scan_mutex);
 
-	shost->host_no = scsi_host_next_hn++; /* XXX(hch): still racy */
+	/*
+	 * subtract one because we increment first then return, but we need to
+	 * know what the next host number was before increment
+	 */
+	shost->host_no = atomic_inc_return(&scsi_host_next_hn) - 1;
 	shost->dma_channel = 0xff;
 
 	/* These three are default values which can be overridden */
diff -urBp a/drivers/scsi/scsi.c b/drivers/scsi/scsi.c
--- a/drivers/scsi/scsi.c	2011-02-12 22:10:57.000000000 +0300
+++ b/drivers/scsi/scsi.c	2011-02-12 22:23:34.000000000 +0300
@@ -172,12 +172,10 @@ scsi_pool_alloc_command(struct scsi_host
 {
 	struct scsi_cmnd *cmd;
 
-	cmd = kmem_cache_alloc(pool->cmd_slab, gfp_mask | pool->gfp_mask);
+	cmd = kmem_cache_zalloc(pool->cmd_slab, gfp_mask | pool->gfp_mask);
 	if (!cmd)
 		return NULL;
 
-	memset(cmd, 0, sizeof(*cmd));
-
 	cmd->sense_buffer = kmem_cache_alloc(pool->sense_slab,
 					     gfp_mask | pool->gfp_mask);
 	if (!cmd->sense_buffer) {
@@ -1069,7 +1067,8 @@ EXPORT_SYMBOL(starget_for_each_device);
  * Looks up the scsi_device with the specified @lun for a give
  * @starget. The returned scsi_device does not have an additional
  * reference.  You must hold the host's host_lock over this call and
- * any access to the returned scsi_device.
+ * any access to the returned scsi_device. A scsi_device in state
+ * SDEV_DEL is skipped.
  *
  * Note:  The only reason why drivers would want to use this is because
  * they're need to access the device list in irq context.  Otherwise you
@@ -1081,6 +1080,8 @@ struct scsi_device *__scsi_device_lookup
 	struct scsi_device *sdev;
 
 	list_for_each_entry(sdev, &starget->devices, same_target_siblings) {
+		if (sdev->sdev_state == SDEV_DEL)
+			continue;
 		if (sdev->lun ==lun)
 			return sdev;
 	}
diff -urBp a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
--- a/drivers/scsi/scsi_lib.c	2011-02-12 22:13:18.000000000 +0300
+++ b/drivers/scsi/scsi_lib.c	2011-02-12 22:23:34.000000000 +0300
@@ -471,6 +471,7 @@ EXPORT_SYMBOL_GPL(scsi_execute_async);
 static void scsi_init_cmd_errh(struct scsi_cmnd *cmd)
 {
 	cmd->serial_number = 0;
+	cmd->resid = 0;
 	memset(cmd->sense_buffer, 0, SCSI_SENSE_BUFFERSIZE);
 	if (cmd->cmd_len == 0)
 		cmd->cmd_len = COMMAND_SIZE(cmd->cmnd[0]);
@@ -626,8 +627,8 @@ static void scsi_requeue_command(struct
 	struct request *req = cmd->request;
 	unsigned long flags;
 
-	scsi_unprep_request(req);
 	spin_lock_irqsave(q->queue_lock, flags);
+	scsi_unprep_request(req);
 	blk_requeue_request(q, req);
 	spin_unlock_irqrestore(q->queue_lock, flags);
 
@@ -893,7 +894,28 @@ void scsi_io_completion(struct scsi_cmnd
 				      "%d bytes done.\n",
 				      req->nr_sectors, good_bytes));
 
-	/* A number of bytes were successfully read.  If there
+	/*
+	 * Recovered errors need reporting, but they're always treated
+	 * as success, so fiddle the result code here.  For BLOCK_PC
+	 * we already took a copy of the original into rq->errors which
+	 * is what gets returned to the user
+	 */
+	if (sense_valid && (sshdr.sense_key == RECOVERED_ERROR)) {
+		/* if ATA PASS-THROUGH INFORMATION AVAILABLE skip
+		 * print since caller wants ATA registers. Only occurs on
+		 * SCSI ATA PASS_THROUGH commands when CK_COND=1
+		 */
+		if ((sshdr.asc == 0x0) && (sshdr.ascq == 0x1d))
+			;
+		else if (!(req->cmd_flags & REQ_QUIET))
+			scsi_print_sense("", cmd);
+		result = 0;
+		/* BLOCK_PC may have set error */
+		error = 0;
+	}
+
+	/*
+	 * A number of bytes were successfully read.  If there
 	 * are leftovers and there is some kind of error
 	 * (result != 0), retry the rest.
 	 */
@@ -970,6 +992,7 @@ void scsi_io_completion(struct scsi_cmnd
 				case 0x07: /* operation in progress */
 				case 0x08: /* Long write in progress */
 				case 0x09: /* self test in progress */
+				case 0x14: /* space allocation in progress */
 					action = ACTION_DELAYED_RETRY;
 					break;
 				default:
@@ -1397,8 +1420,8 @@ static inline int scsi_host_queue_ready(
 static void scsi_kill_request(struct request *req, request_queue_t *q)
 {
 	struct scsi_cmnd *cmd = req->special;
-	struct scsi_device *sdev = cmd->device;
-	struct Scsi_Host *shost = sdev->host;
+	struct scsi_device *sdev;
+	struct Scsi_Host *shost;
 
 	blkdev_dequeue_request(req);
 
@@ -1408,6 +1431,8 @@ static void scsi_kill_request(struct req
 		BUG();
 	}
 
+	sdev = cmd->device;
+	shost = sdev->host;
 	scsi_init_cmd_errh(cmd);
 	cmd->result = DID_NO_CONNECT << 16;
 	atomic_inc(&cmd->device->iorequest_cnt);
diff -urBp a/drivers/scsi/sd.c b/drivers/scsi/sd.c
--- a/drivers/scsi/sd.c	2010-07-27 14:22:59.000000000 +0400
+++ b/drivers/scsi/sd.c	2011-02-12 22:23:02.000000000 +0300
@@ -987,12 +987,6 @@ static void sd_rw_intr(struct scsi_cmnd
 		good_bytes = (bad_lba - start_lba)*SCpnt->device->sector_size;
 		break;
 	case RECOVERED_ERROR:
-		/* Inform the user, but make sure that it's not treated
-		 * as a hard error.
-		 */
-		scsi_print_sense("sd", SCpnt);
-		SCpnt->result = 0;
-		memset(SCpnt->sense_buffer, 0, SCSI_SENSE_BUFFERSIZE);
 		good_bytes = xfer_size;
 		break;
 	case NO_SENSE:
diff -urBp a/drivers/scsi/sr.c b/drivers/scsi/sr.c
--- a/drivers/scsi/sr.c	2008-02-26 02:59:40.000000000 +0300
+++ b/drivers/scsi/sr.c	2011-02-12 22:23:02.000000000 +0300
@@ -271,15 +271,6 @@ static void rw_intr(struct scsi_cmnd * S
 			break;
 
 		case RECOVERED_ERROR:
-
-			/*
-			 * An error occured, but it recovered.  Inform the
-			 * user, but make sure that it's not treated as a
-			 * hard error.
-			 */
-			scsi_print_sense("sr", SCpnt);
-			SCpnt->result = 0;
-			SCpnt->sense_buffer[0] = 0x0;
 			good_bytes = this_count;
 			break;
 
-- 
