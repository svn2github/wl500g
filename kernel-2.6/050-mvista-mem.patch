--- linuz/arch/mips/brcm-boards/bcm947xx/prom.c	2008-12-12 06:25:41.000000000 +0300
+++ linux/arch/mips/brcm-boards/bcm947xx/prom.c	2009-10-24 14:37:29.000000000 +0400
@@ -30,34 +30,34 @@
 void __init
 prom_init(void)
 {
-	unsigned long mem;
+	unsigned long mem, before, offset;
 
 	mips_machgroup = MACH_GROUP_BRCM;
 	mips_machtype = MACH_BCM947XX;
 
-	/* Figure out memory size by finding aliases */
-	for (mem = (1 << 20); mem < (128 << 20); mem <<= 1) {
-		if (*(unsigned long *)((unsigned long)(prom_init) + mem) == 
-		    *(unsigned long *)(prom_init))
-			break;
-	} 
-
-#if CONFIG_RAM_SIZE
-       {
-               unsigned long config_mem;
-               config_mem = CONFIG_RAM_SIZE * 0x100000;
-               if (config_mem < mem)
-                       mem = config_mem;
-       }
-#endif
-
-	/* Ignoring the last page when ddr size is 128M. Cached
-	 * accesses to last page is causing the processor to prefetch
-	 * using address above 128M stepping out of the ddr address
-	 * space.
+	/* Figure out memory size by finding aliases.
+	 *
+	 * We assume that there will be no more than 128 MB of memory,
+	 * and that the memory size will be a multiple of 1 MB.
+	 *
+	 * We set 'before' to be the amount of memory (in MB) before this
+	 * function, i.e. one MB less than the number  of MB of memory that we
+	 * *know* we have.  And we set 'offset' to be the address of 'prominit'
+	 * minus 'before', so that KSEG0 or KSEG1 base + offset < 1 MB.
+	 * This prevents us from overrunning 128 MB and causing a bus error.
 	 */
-	if (MIPS74K(current_cpu_data.processor_id) && (mem == 0x8000000))
-		mem -= 0x1000;
+	before = ((unsigned long) &prom_init) & (127 << 20);
+	offset = ((unsigned long) &prom_init) - before;
+	for (mem = before + (1 << 20); mem < (128 << 20); mem += (1 << 20))
+		if (*(unsigned long *)(offset + mem) ==
+		    *(unsigned long *)(prom_init)) {
+			/*
+			 * We may already be well past the end of memory at
+			 * this point, so we'll have to compensate for it.
+			 */
+			mem -= before;
+			break;
+		}
 
 	add_memory_region(0, mem, BOOT_MEM_RAM);
 }
