netfilter: xt_string v1

 4ad3f26162ece5aca3045fd45e15dd99acea4a0e netfilter: fix string extension for case insensitive pattern matching
 d879e19e18ebc69fc20a9b95612e9dd0acf4d7aa netfilter: xtables: remove xt_string revision 0

---
 include/linux/netfilter/xt_string.h |   17 ++++++++++++++++-
 net/netfilter/xt_string.c           |   14 ++++++++++++--
 2 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/include/linux/netfilter/xt_string.h b/include/linux/netfilter/xt_string.h
--- a/include/linux/netfilter/xt_string.h
+++ b/include/linux/netfilter/xt_string.h
@@ -4,6 +4,11 @@
 #define XT_STRING_MAX_PATTERN_SIZE 128
 #define XT_STRING_MAX_ALGO_NAME_SIZE 16
 
+enum {
+	XT_STRING_FLAG_INVERT		= 0x01,
+	XT_STRING_FLAG_IGNORECASE	= 0x02
+};
+
 struct xt_string_info
 {
 	u_int16_t from_offset;
@@ -11,7 +16,17 @@ struct xt_string_info
 	char	  algo[XT_STRING_MAX_ALGO_NAME_SIZE];
 	char 	  pattern[XT_STRING_MAX_PATTERN_SIZE];
 	u_int8_t  patlen;
-	u_int8_t  invert;
+	union {
+		struct {
+			u_int8_t  invert;
+		} v0;
+
+		struct {
+			u_int8_t  flags;
+		} v1;
+	} u;
+
+	/* Used internally by the kernel */
 	struct ts_config __attribute__((aligned(8))) *config;
 };
 
diff --git a/net/netfilter/xt_string.c b/net/netfilter/xt_string.c
--- a/net/netfilter/xt_string.c
+++ b/net/netfilter/xt_string.c
@@ -32,12 +32,14 @@ static int match(const struct sk_buff *s
 {
 	const struct xt_string_info *conf = matchinfo;
 	struct ts_state state;
+	bool invert;
 
 	memset(&state, 0, sizeof(struct ts_state));
+	invert = conf->u.v1.flags & XT_STRING_FLAG_INVERT;
 
 	return (skb_find_text((struct sk_buff *)skb, conf->from_offset,
 			     conf->to_offset, conf->config, &state)
-			     != UINT_MAX) ^ conf->invert;
+			     != UINT_MAX) ^ invert;
 }
 
 #define STRING_TEXT_PRIV(m) ((struct xt_string_info *) m)
@@ -50,6 +52,7 @@ static int checkentry(const char *tablen
 {
 	struct xt_string_info *conf = matchinfo;
 	struct ts_config *ts_conf;
+	int flags = TS_AUTOLOAD;
 
 	/* Damn, can't handle this case properly with iptables... */
 	if (conf->from_offset > conf->to_offset)
@@ -58,8 +61,13 @@ static int checkentry(const char *tablen
 		return 0;
 	if (conf->patlen > XT_STRING_MAX_PATTERN_SIZE)
 		return 0;
+	if (conf->u.v1.flags &
+	    ~(XT_STRING_FLAG_IGNORECASE | XT_STRING_FLAG_INVERT))
+		return -EINVAL;
+	if (conf->u.v1.flags & XT_STRING_FLAG_IGNORECASE)
+		flags |= TS_IGNORECASE;
 	ts_conf = textsearch_prepare(conf->algo, conf->pattern, conf->patlen,
-				     GFP_KERNEL, TS_AUTOLOAD);
+				     GFP_KERNEL, flags);
 	if (IS_ERR(ts_conf))
 		return 0;
 
@@ -76,6 +84,7 @@ static void destroy(const struct xt_matc
 static struct xt_match xt_string_match[] __read_mostly = {
 	{
 		.name 		= "string",
+		.revision	= 1,
 		.family		= AF_INET,
 		.checkentry	= checkentry,
 		.match 		= match,
@@ -85,6 +94,7 @@ static struct xt_match xt_string_match[]
 	},
 	{
 		.name 		= "string",
+		.revision	= 1,
 		.family		= AF_INET6,
 		.checkentry	= checkentry,
 		.match 		= match,
-- 
1.7.6.5
