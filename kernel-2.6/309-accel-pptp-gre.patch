diff -BurpN linux.orig/include/net/gre.h linux/include/net/gre.h
--- linux.orig/include/net/gre.h	1970-01-01 00:00:00.000000000 +0000
+++ linux/include/net/gre.h	2010-08-22 10:29:28.000000000 +0000
@@ -0,0 +1,18 @@
+#ifndef __LINUX_GRE_H
+#define __LINUX_GRE_H
+
+#include <linux/skbuff.h>
+
+#define GREPROTO_CISCO		0
+#define GREPROTO_PPTP		1
+#define GREPROTO_MAX		2
+
+struct gre_protocol {
+	int	(*handler)(struct sk_buff *skb);
+	void	(*err_handler)(struct sk_buff *skb, u32 info);
+};
+
+int gre_add_protocol(struct gre_protocol *proto, u8 version);
+int gre_del_protocol(struct gre_protocol *proto, u8 version);
+
+#endif
diff -BurpN linux.orig/net/ipv4/Kconfig linux/net/ipv4/Kconfig
--- linux.orig/net/ipv4/Kconfig	2008-02-25 23:59:40.000000000 +0000
+++ linux/net/ipv4/Kconfig	2010-08-22 10:31:26.000000000 +0000
@@ -244,6 +244,12 @@ config NET_IPIP
 	  be inserted in and removed from the running kernel whenever you
 	  want). Most people won't need this and can say N.
 
+config NET_IPGRE_DEMUX
+	tristate "IP: GRE demultiplexer"
+	help
+	  This is helper module to demultiplex GRE packets on GRE version field criteria.
+	  Required by ip_gre and pptp modules.
+
 config NET_IPGRE
 	tristate "IP: GRE tunnels over IP"
 	help
diff -BurpN linux.orig/net/ipv4/Makefile linux/net/ipv4/Makefile
--- linux.orig/net/ipv4/Makefile	2008-02-25 23:59:40.000000000 +0000
+++ linux/net/ipv4/Makefile	2010-08-22 10:29:58.000000000 +0000
@@ -18,6 +18,7 @@ obj-$(CONFIG_PROC_FS) += proc.o
 obj-$(CONFIG_IP_MULTIPLE_TABLES) += fib_rules.o
 obj-$(CONFIG_IP_MROUTE) += ipmr.o
 obj-$(CONFIG_NET_IPIP) += ipip.o
+obj-$(CONFIG_NET_IPGRE_DEMUX) += gre.o
 obj-$(CONFIG_NET_IPGRE) += ip_gre.o
 obj-$(CONFIG_SYN_COOKIES) += syncookies.o
 obj-$(CONFIG_INET_AH) += ah4.o
diff -BurpN linux.orig/net/ipv4/gre.c linux/net/ipv4/gre.c
--- linux.orig/net/ipv4/gre.c	1970-01-01 00:00:00.000000000 +0000
+++ linux/net/ipv4/gre.c	2010-08-22 10:29:24.000000000 +0000
@@ -0,0 +1,146 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/skbuff.h>
+#include <linux/in.h>
+#include <linux/netdevice.h>
+#include <linux/version.h>
+#include <linux/spinlock.h>
+#include <net/protocol.h>
+
+#include <net/gre.h>
+
+struct gre_protocol *gre_proto[GREPROTO_MAX] ____cacheline_aligned_in_smp;
+static DEFINE_SPINLOCK(gre_proto_lock);
+
+int gre_add_protocol(struct gre_protocol *proto, u8 version)
+{
+	int ret;
+
+	if (version >= GREPROTO_MAX)
+		return -EINVAL;
+
+	spin_lock(&gre_proto_lock);
+	if (gre_proto[version]) {
+		ret = -EAGAIN;
+	} else {
+		rcu_assign_pointer(gre_proto[version], proto);
+		ret = 0;
+	}
+	spin_unlock(&gre_proto_lock);
+
+	return ret;
+}
+
+int gre_del_protocol(struct gre_protocol *proto, u8 version)
+{
+	if (version >= GREPROTO_MAX)
+		goto out_err;
+
+	spin_lock(&gre_proto_lock);
+	if (gre_proto[version] == proto)
+		rcu_assign_pointer(gre_proto[version], NULL);
+	else
+		goto out_err_unlock;
+	spin_unlock(&gre_proto_lock);
+	synchronize_rcu();
+
+	return 0;
+
+out_err_unlock:
+	spin_unlock(&gre_proto_lock);
+out_err:
+	return -EINVAL;
+}
+
+static int gre_rcv(struct sk_buff *skb)
+{
+	u8 ver;
+	int ret;
+	struct gre_protocol *proto;
+
+	if (!pskb_may_pull(skb, 12))
+		goto drop_nolock;
+
+	ver = skb->data[1]&0x7f;
+	if (ver >= GREPROTO_MAX)
+		goto drop_nolock;
+	
+	rcu_read_lock();
+	proto = rcu_dereference(gre_proto[ver]);
+	if (!proto || !proto->handler)
+		goto drop;
+
+	ret = proto->handler(skb);
+
+	rcu_read_unlock();
+
+	return ret;
+
+drop:
+	rcu_read_unlock();
+drop_nolock:
+	kfree_skb(skb);
+	return NET_RX_DROP;
+}
+
+static void gre_err(struct sk_buff *skb, u32 info)
+{
+	u8 ver;
+	struct gre_protocol *proto;
+
+	if (!pskb_may_pull(skb, 12))
+		goto drop_nolock;
+
+	ver=skb->data[1]&0x7f;
+	if (ver>=GREPROTO_MAX)
+		goto drop_nolock;
+
+	rcu_read_lock();
+	proto = rcu_dereference(gre_proto[ver]);
+	if (!proto || !proto->err_handler)
+		goto drop;
+
+	proto->err_handler(skb, info);
+	rcu_read_unlock();
+
+	return;
+
+drop:
+	rcu_read_unlock();
+drop_nolock:
+	kfree_skb(skb);
+}
+
+static struct net_protocol net_gre_protocol = {
+	.handler	= gre_rcv,
+	.err_handler	= gre_err,
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,24)
+	.netns_ok	= 1,
+#endif
+};
+
+static int __init gre_init(void)
+{
+	printk(KERN_INFO "GRE over IPv4 demultiplexor driver\n");
+
+	if (inet_add_protocol(&net_gre_protocol, IPPROTO_GRE) < 0) {
+		printk(KERN_INFO "gre: can't add protocol\n");
+		return -EAGAIN;
+	}
+	return 0;
+}
+
+static void __exit gre_exit(void)
+{
+	inet_del_protocol(&net_gre_protocol, IPPROTO_GRE);
+}
+
+module_init(gre_init);
+module_exit(gre_exit);
+
+MODULE_DESCRIPTION("GRE over IPv4 demultiplexor driver");
+MODULE_AUTHOR("Kozlov D. (xeb@mail.ru)");
+MODULE_LICENSE("GPL");
+EXPORT_SYMBOL_GPL(gre_add_protocol);
+EXPORT_SYMBOL_GPL(gre_del_protocol);
diff -BurpN linux.orig/net/ipv4/ip_gre.c linux/net/ipv4/ip_gre.c
--- linux.orig/net/ipv4/ip_gre.c	2008-02-25 23:59:40.000000000 +0000
+++ linux/net/ipv4/ip_gre.c	2010-08-22 10:34:55.000000000 +0000
@@ -40,6 +40,10 @@
 #include <net/inet_ecn.h>
 #include <net/xfrm.h>
 
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+#include <net/gre.h>
+#endif
+
 #ifdef CONFIG_IPV6
 #include <net/ipv6.h>
 #include <net/ip6_fib.h>
@@ -1236,8 +1240,11 @@ static int __init ipgre_fb_tunnel_init(s
 	return 0;
 }
 
-
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+static struct gre_protocol ipgre_protocol = {
+#else
 static struct net_protocol ipgre_protocol = {
+#endif
 	.handler	=	ipgre_rcv,
 	.err_handler	=	ipgre_err,
 };
@@ -1253,7 +1260,11 @@ static int __init ipgre_init(void)
 
 	printk(KERN_INFO "GRE over IPv4 tunneling driver\n");
 
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+	if (gre_add_protocol(&ipgre_protocol, GREPROTO_CISCO) < 0) {
+#else
 	if (inet_add_protocol(&ipgre_protocol, IPPROTO_GRE) < 0) {
+#endif
 		printk(KERN_INFO "ipgre init: can't add protocol\n");
 		return -EAGAIN;
 	}
@@ -1274,7 +1285,11 @@ out:
 err2:
 	free_netdev(ipgre_fb_tunnel_dev);
 err1:
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+	gre_del_protocol(&ipgre_protocol, GREPROTO_CISCO);
+#else
 	inet_del_protocol(&ipgre_protocol, IPPROTO_GRE);
+#endif
 	goto out;
 }
 
@@ -1294,7 +1309,11 @@ static void __exit ipgre_destroy_tunnels
 
 static void __exit ipgre_fini(void)
 {
+#if defined(CONFIG_NET_IPGRE_DEMUX) || defined(CONFIG_NET_IPGRE_DEMUX_MODULE)
+	if (gre_del_protocol(&ipgre_protocol, GREPROTO_CISCO) < 0)
+#else
 	if (inet_del_protocol(&ipgre_protocol, IPPROTO_GRE) < 0)
+#endif
 		printk(KERN_INFO "ipgre close: can't remove protocol\n");
 
 	rtnl_lock();
